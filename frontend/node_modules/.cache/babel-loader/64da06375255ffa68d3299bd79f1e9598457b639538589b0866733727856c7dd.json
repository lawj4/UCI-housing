{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectBidiOverCdp = void 0;\nconst BidiMapper = __importStar(require(\"chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js\"));\nconst Debug_js_1 = require(\"../common/Debug.js\");\nconst Errors_js_1 = require(\"../common/Errors.js\");\nconst Connection_js_1 = require(\"./Connection.js\");\nconst bidiServerLogger = (prefix, ...args) => {\n  (0, Debug_js_1.debug)(`bidi:${prefix}`)(args);\n};\n/**\n * @internal\n */\nasync function connectBidiOverCdp(cdp) {\n  const transportBiDi = new NoOpTransport();\n  const cdpConnectionAdapter = new CdpConnectionAdapter(cdp);\n  const pptrTransport = {\n    send(message) {\n      // Forwards a BiDi command sent by Puppeteer to the input of the BidiServer.\n      transportBiDi.emitMessage(JSON.parse(message));\n    },\n    close() {\n      bidiServer.close();\n      cdpConnectionAdapter.close();\n      cdp.dispose();\n    },\n    onmessage(_message) {\n      // The method is overridden by the Connection.\n    }\n  };\n  transportBiDi.on('bidiResponse', message => {\n    // Forwards a BiDi event sent by BidiServer to Puppeteer.\n    pptrTransport.onmessage(JSON.stringify(message));\n  });\n  const pptrBiDiConnection = new Connection_js_1.BidiConnection(cdp.url(), pptrTransport, cdp.delay, cdp.timeout);\n  const bidiServer = await BidiMapper.BidiServer.createAndStart(transportBiDi, cdpConnectionAdapter, cdpConnectionAdapter.browserClient(), /* selfTargetId= */'', undefined, bidiServerLogger);\n  return pptrBiDiConnection;\n}\nexports.connectBidiOverCdp = connectBidiOverCdp;\n/**\n * Manages CDPSessions for BidiServer.\n * @internal\n */\nclass CdpConnectionAdapter {\n  #cdp;\n  #adapters = new Map();\n  #browserCdpConnection;\n  constructor(cdp) {\n    this.#cdp = cdp;\n    this.#browserCdpConnection = new CDPClientAdapter(cdp);\n  }\n  browserClient() {\n    return this.#browserCdpConnection;\n  }\n  getCdpClient(id) {\n    const session = this.#cdp.session(id);\n    if (!session) {\n      throw new Error(`Unknown CDP session with id ${id}`);\n    }\n    if (!this.#adapters.has(session)) {\n      const adapter = new CDPClientAdapter(session, id, this.#browserCdpConnection);\n      this.#adapters.set(session, adapter);\n      return adapter;\n    }\n    return this.#adapters.get(session);\n  }\n  close() {\n    this.#browserCdpConnection.close();\n    for (const adapter of this.#adapters.values()) {\n      adapter.close();\n    }\n  }\n}\n/**\n * Wrapper on top of CDPSession/CDPConnection to satisfy CDP interface that\n * BidiServer needs.\n *\n * @internal\n */\nclass CDPClientAdapter extends BidiMapper.EventEmitter {\n  #closed = false;\n  #client;\n  sessionId = undefined;\n  #browserClient;\n  constructor(client, sessionId, browserClient) {\n    super();\n    this.#client = client;\n    this.sessionId = sessionId;\n    this.#browserClient = browserClient;\n    this.#client.on('*', this.#forwardMessage);\n  }\n  browserClient() {\n    return this.#browserClient;\n  }\n  #forwardMessage = (method, event) => {\n    this.emit(method, event);\n  };\n  async sendCommand(method, ...params) {\n    if (this.#closed) {\n      return;\n    }\n    try {\n      return await this.#client.send(method, ...params);\n    } catch (err) {\n      if (this.#closed) {\n        return;\n      }\n      throw err;\n    }\n  }\n  close() {\n    this.#client.off('*', this.#forwardMessage);\n    this.#closed = true;\n  }\n  isCloseError(error) {\n    return error instanceof Errors_js_1.TargetCloseError;\n  }\n}\n/**\n * This transport is given to the BiDi server instance and allows Puppeteer\n * to send and receive commands to the BiDiServer.\n * @internal\n */\nclass NoOpTransport extends BidiMapper.EventEmitter {\n  #onMessage = async _m => {\n    return;\n  };\n  emitMessage(message) {\n    void this.#onMessage(message);\n  }\n  setOnMessage(onMessage) {\n    this.#onMessage = onMessage;\n  }\n  async sendMessage(message) {\n    this.emit('bidiResponse', message);\n  }\n  close() {\n    this.#onMessage = async _m => {\n      return;\n    };\n  }\n}","map":{"version":3,"names":["BidiMapper","__importStar","require","Debug_js_1","Errors_js_1","Connection_js_1","bidiServerLogger","prefix","args","debug","connectBidiOverCdp","cdp","transportBiDi","NoOpTransport","cdpConnectionAdapter","CdpConnectionAdapter","pptrTransport","send","message","emitMessage","JSON","parse","close","bidiServer","dispose","onmessage","_message","on","stringify","pptrBiDiConnection","BidiConnection","url","delay","timeout","BidiServer","createAndStart","browserClient","undefined","exports","adapters","Map","browserCdpConnection","constructor","CDPClientAdapter","getCdpClient","id","session","Error","has","adapter","set","get","values","EventEmitter","closed","client","sessionId","forwardMessage","#forwardMessage","method","event","emit","sendCommand","params","err","off","isCloseError","error","TargetCloseError","onMessage","_m","setOnMessage","sendMessage"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/src/bidi/BidiOverCdp.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as BidiMapper from 'chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js';\nimport type * as Bidi from 'chromium-bidi/lib/cjs/protocol/protocol.js';\nimport type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';\n\nimport type {CDPEvents, CDPSession} from '../api/CDPSession.js';\nimport type {Connection as CdpConnection} from '../cdp/Connection.js';\nimport {debug} from '../common/Debug.js';\nimport {TargetCloseError} from '../common/Errors.js';\nimport type {Handler} from '../common/EventEmitter.js';\n\nimport {BidiConnection} from './Connection.js';\n\nconst bidiServerLogger = (prefix: string, ...args: unknown[]): void => {\n  debug(`bidi:${prefix}`)(args);\n};\n\n/**\n * @internal\n */\nexport async function connectBidiOverCdp(\n  cdp: CdpConnection\n): Promise<BidiConnection> {\n  const transportBiDi = new NoOpTransport();\n  const cdpConnectionAdapter = new CdpConnectionAdapter(cdp);\n  const pptrTransport = {\n    send(message: string): void {\n      // Forwards a BiDi command sent by Puppeteer to the input of the BidiServer.\n      transportBiDi.emitMessage(JSON.parse(message));\n    },\n    close(): void {\n      bidiServer.close();\n      cdpConnectionAdapter.close();\n      cdp.dispose();\n    },\n    onmessage(_message: string): void {\n      // The method is overridden by the Connection.\n    },\n  };\n  transportBiDi.on('bidiResponse', (message: object) => {\n    // Forwards a BiDi event sent by BidiServer to Puppeteer.\n    pptrTransport.onmessage(JSON.stringify(message));\n  });\n  const pptrBiDiConnection = new BidiConnection(\n    cdp.url(),\n    pptrTransport,\n    cdp.delay,\n    cdp.timeout\n  );\n  const bidiServer = await BidiMapper.BidiServer.createAndStart(\n    transportBiDi,\n    cdpConnectionAdapter,\n    cdpConnectionAdapter.browserClient(),\n    /* selfTargetId= */ '',\n    undefined,\n    bidiServerLogger\n  );\n  return pptrBiDiConnection;\n}\n\n/**\n * Manages CDPSessions for BidiServer.\n * @internal\n */\nclass CdpConnectionAdapter {\n  #cdp: CdpConnection;\n  #adapters = new Map<CDPSession, CDPClientAdapter<CDPSession>>();\n  #browserCdpConnection: CDPClientAdapter<CdpConnection>;\n\n  constructor(cdp: CdpConnection) {\n    this.#cdp = cdp;\n    this.#browserCdpConnection = new CDPClientAdapter(cdp);\n  }\n\n  browserClient(): CDPClientAdapter<CdpConnection> {\n    return this.#browserCdpConnection;\n  }\n\n  getCdpClient(id: string) {\n    const session = this.#cdp.session(id);\n    if (!session) {\n      throw new Error(`Unknown CDP session with id ${id}`);\n    }\n    if (!this.#adapters.has(session)) {\n      const adapter = new CDPClientAdapter(\n        session,\n        id,\n        this.#browserCdpConnection\n      );\n      this.#adapters.set(session, adapter);\n      return adapter;\n    }\n    return this.#adapters.get(session)!;\n  }\n\n  close() {\n    this.#browserCdpConnection.close();\n    for (const adapter of this.#adapters.values()) {\n      adapter.close();\n    }\n  }\n}\n\n/**\n * Wrapper on top of CDPSession/CDPConnection to satisfy CDP interface that\n * BidiServer needs.\n *\n * @internal\n */\nclass CDPClientAdapter<T extends CDPSession | CdpConnection>\n  extends BidiMapper.EventEmitter<CDPEvents>\n  implements BidiMapper.CdpClient\n{\n  #closed = false;\n  #client: T;\n  sessionId: string | undefined = undefined;\n  #browserClient?: BidiMapper.CdpClient;\n\n  constructor(\n    client: T,\n    sessionId?: string,\n    browserClient?: BidiMapper.CdpClient\n  ) {\n    super();\n    this.#client = client;\n    this.sessionId = sessionId;\n    this.#browserClient = browserClient;\n    this.#client.on('*', this.#forwardMessage as Handler<any>);\n  }\n\n  browserClient(): BidiMapper.CdpClient {\n    return this.#browserClient!;\n  }\n\n  #forwardMessage = <T extends keyof CDPEvents>(\n    method: T,\n    event: CDPEvents[T]\n  ) => {\n    this.emit(method, event);\n  };\n\n  async sendCommand<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    ...params: ProtocolMapping.Commands[T]['paramsType']\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    if (this.#closed) {\n      return;\n    }\n    try {\n      return await this.#client.send(method, ...params);\n    } catch (err) {\n      if (this.#closed) {\n        return;\n      }\n      throw err;\n    }\n  }\n\n  close() {\n    this.#client.off('*', this.#forwardMessage as Handler<any>);\n    this.#closed = true;\n  }\n\n  isCloseError(error: unknown): boolean {\n    return error instanceof TargetCloseError;\n  }\n}\n\n/**\n * This transport is given to the BiDi server instance and allows Puppeteer\n * to send and receive commands to the BiDiServer.\n * @internal\n */\nclass NoOpTransport\n  extends BidiMapper.EventEmitter<{\n    bidiResponse: Bidi.ChromiumBidi.Message;\n  }>\n  implements BidiMapper.BidiTransport\n{\n  #onMessage: (message: Bidi.ChromiumBidi.Command) => Promise<void> | void =\n    async (_m: Bidi.ChromiumBidi.Command): Promise<void> => {\n      return;\n    };\n\n  emitMessage(message: Bidi.ChromiumBidi.Command) {\n    void this.#onMessage(message);\n  }\n\n  setOnMessage(\n    onMessage: (message: Bidi.ChromiumBidi.Command) => Promise<void> | void\n  ): void {\n    this.#onMessage = onMessage;\n  }\n\n  async sendMessage(message: Bidi.ChromiumBidi.Message): Promise<void> {\n    this.emit('bidiResponse', message);\n  }\n\n  close() {\n    this.#onMessage = async (_m: Bidi.ChromiumBidi.Command): Promise<void> => {\n      return;\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}