{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CdpWebWorker = void 0;\nconst CDPSession_js_1 = require(\"../api/CDPSession.js\");\nconst Target_js_1 = require(\"../api/Target.js\");\nconst WebWorker_js_1 = require(\"../api/WebWorker.js\");\nconst TimeoutSettings_js_1 = require(\"../common/TimeoutSettings.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst ExecutionContext_js_1 = require(\"./ExecutionContext.js\");\nconst IsolatedWorld_js_1 = require(\"./IsolatedWorld.js\");\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\n/**\n * @internal\n */\nclass CdpWebWorker extends WebWorker_js_1.WebWorker {\n  #world;\n  #client;\n  #id;\n  #targetType;\n  constructor(client, url, targetId, targetType, consoleAPICalled, exceptionThrown) {\n    super(url);\n    this.#id = targetId;\n    this.#client = client;\n    this.#targetType = targetType;\n    this.#world = new IsolatedWorld_js_1.IsolatedWorld(this, new TimeoutSettings_js_1.TimeoutSettings());\n    this.#client.once('Runtime.executionContextCreated', async event => {\n      this.#world.setContext(new ExecutionContext_js_1.ExecutionContext(client, event.context, this.#world));\n    });\n    this.#world.emitter.on('consoleapicalled', async event => {\n      try {\n        return consoleAPICalled(event.type, event.args.map(object => {\n          return new JSHandle_js_1.CdpJSHandle(this.#world, object);\n        }), event.stackTrace);\n      } catch (err) {\n        (0, util_js_1.debugError)(err);\n      }\n    });\n    this.#client.on('Runtime.exceptionThrown', exceptionThrown);\n    this.#client.once(CDPSession_js_1.CDPSessionEvent.Disconnected, () => {\n      this.#world.dispose();\n    });\n    // This might fail if the target is closed before we receive all execution contexts.\n    this.#client.send('Runtime.enable').catch(util_js_1.debugError);\n  }\n  mainRealm() {\n    return this.#world;\n  }\n  get client() {\n    return this.#client;\n  }\n  async close() {\n    switch (this.#targetType) {\n      case Target_js_1.TargetType.SERVICE_WORKER:\n      case Target_js_1.TargetType.SHARED_WORKER:\n        {\n          // For service and shared workers we need to close the target and detach to allow\n          // the worker to stop.\n          await this.client.connection()?.send('Target.closeTarget', {\n            targetId: this.#id\n          });\n          await this.client.connection()?.send('Target.detachFromTarget', {\n            sessionId: this.client.id()\n          });\n          break;\n        }\n      default:\n        await this.evaluate(() => {\n          self.close();\n        });\n    }\n  }\n}\nexports.CdpWebWorker = CdpWebWorker;","map":{"version":3,"names":["CDPSession_js_1","require","Target_js_1","WebWorker_js_1","TimeoutSettings_js_1","util_js_1","ExecutionContext_js_1","IsolatedWorld_js_1","JSHandle_js_1","CdpWebWorker","WebWorker","world","client","id","targetType","constructor","url","targetId","consoleAPICalled","exceptionThrown","IsolatedWorld","TimeoutSettings","once","event","setContext","ExecutionContext","context","emitter","on","type","args","map","object","CdpJSHandle","stackTrace","err","debugError","CDPSessionEvent","Disconnected","dispose","send","catch","mainRealm","close","TargetType","SERVICE_WORKER","SHARED_WORKER","connection","sessionId","evaluate","self","exports"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/src/cdp/WebWorker.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type {Protocol} from 'devtools-protocol';\n\nimport {CDPSessionEvent, type CDPSession} from '../api/CDPSession.js';\nimport type {Realm} from '../api/Realm.js';\nimport {TargetType} from '../api/Target.js';\nimport {WebWorker} from '../api/WebWorker.js';\nimport {TimeoutSettings} from '../common/TimeoutSettings.js';\nimport {debugError} from '../common/util.js';\n\nimport {ExecutionContext} from './ExecutionContext.js';\nimport {IsolatedWorld} from './IsolatedWorld.js';\nimport {CdpJSHandle} from './JSHandle.js';\n\n/**\n * @internal\n */\nexport type ConsoleAPICalledCallback = (\n  eventType: string,\n  handles: CdpJSHandle[],\n  trace?: Protocol.Runtime.StackTrace\n) => void;\n\n/**\n * @internal\n */\nexport type ExceptionThrownCallback = (\n  event: Protocol.Runtime.ExceptionThrownEvent\n) => void;\n\n/**\n * @internal\n */\nexport class CdpWebWorker extends WebWorker {\n  #world: IsolatedWorld;\n  #client: CDPSession;\n  readonly #id: string;\n  readonly #targetType: TargetType;\n\n  constructor(\n    client: CDPSession,\n    url: string,\n    targetId: string,\n    targetType: TargetType,\n    consoleAPICalled: ConsoleAPICalledCallback,\n    exceptionThrown: ExceptionThrownCallback\n  ) {\n    super(url);\n    this.#id = targetId;\n    this.#client = client;\n    this.#targetType = targetType;\n    this.#world = new IsolatedWorld(this, new TimeoutSettings());\n\n    this.#client.once('Runtime.executionContextCreated', async event => {\n      this.#world.setContext(\n        new ExecutionContext(client, event.context, this.#world)\n      );\n    });\n    this.#world.emitter.on('consoleapicalled', async event => {\n      try {\n        return consoleAPICalled(\n          event.type,\n          event.args.map((object: Protocol.Runtime.RemoteObject) => {\n            return new CdpJSHandle(this.#world, object);\n          }),\n          event.stackTrace\n        );\n      } catch (err) {\n        debugError(err);\n      }\n    });\n    this.#client.on('Runtime.exceptionThrown', exceptionThrown);\n    this.#client.once(CDPSessionEvent.Disconnected, () => {\n      this.#world.dispose();\n    });\n\n    // This might fail if the target is closed before we receive all execution contexts.\n    this.#client.send('Runtime.enable').catch(debugError);\n  }\n\n  mainRealm(): Realm {\n    return this.#world;\n  }\n\n  get client(): CDPSession {\n    return this.#client;\n  }\n\n  override async close(): Promise<void> {\n    switch (this.#targetType) {\n      case TargetType.SERVICE_WORKER:\n      case TargetType.SHARED_WORKER: {\n        // For service and shared workers we need to close the target and detach to allow\n        // the worker to stop.\n        await this.client.connection()?.send('Target.closeTarget', {\n          targetId: this.#id,\n        });\n        await this.client.connection()?.send('Target.detachFromTarget', {\n          sessionId: this.client.id(),\n        });\n        break;\n      }\n      default:\n        await this.evaluate(() => {\n          self.close();\n        });\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}