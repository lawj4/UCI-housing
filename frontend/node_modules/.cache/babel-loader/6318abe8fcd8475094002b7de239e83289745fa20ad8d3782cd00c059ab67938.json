{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LazyArg = void 0;\n/**\n * @internal\n */\nclass LazyArg {\n  static create = get => {\n    // We don't want to introduce LazyArg to the type system, otherwise we would\n    // have to make it public.\n    return new LazyArg(get);\n  };\n  #get;\n  constructor(get) {\n    this.#get = get;\n  }\n  async get(context) {\n    return await this.#get(context);\n  }\n}\nexports.LazyArg = LazyArg;","map":{"version":3,"names":["LazyArg","create","get","constructor","context","exports"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/src/common/LazyArg.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {JSHandle} from '../api/JSHandle.js';\nimport type PuppeteerUtil from '../injected/injected.js';\n\n/**\n * @internal\n */\nexport interface PuppeteerUtilWrapper {\n  puppeteerUtil: Promise<JSHandle<PuppeteerUtil>>;\n}\n\n/**\n * @internal\n */\nexport class LazyArg<T, Context = PuppeteerUtilWrapper> {\n  static create = <T>(\n    get: (context: PuppeteerUtilWrapper) => Promise<T> | T\n  ): T => {\n    // We don't want to introduce LazyArg to the type system, otherwise we would\n    // have to make it public.\n    return new LazyArg(get) as unknown as T;\n  };\n\n  #get: (context: Context) => Promise<T> | T;\n  private constructor(get: (context: Context) => Promise<T> | T) {\n    this.#get = get;\n  }\n\n  async get(context: Context): Promise<T> {\n    return await this.#get(context);\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;AAgBA;;;AAGA,MAAaA,OAAO;EAClB,OAAOC,MAAM,GACXC,GAAsD,IACjD;IACL;IACA;IACA,OAAO,IAAIF,OAAO,CAACE,GAAG,CAAiB;EACzC,CAAC;EAED,CAAAA,GAAI;EACJC,YAAoBD,GAAyC;IAC3D,IAAI,CAAC,CAAAA,GAAI,GAAGA,GAAG;EACjB;EAEA,MAAMA,GAAGA,CAACE,OAAgB;IACxB,OAAO,MAAM,IAAI,CAAC,CAAAF,GAAI,CAACE,OAAO,CAAC;EACjC;;AAhBFC,OAAA,CAAAL,OAAA,GAAAA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}