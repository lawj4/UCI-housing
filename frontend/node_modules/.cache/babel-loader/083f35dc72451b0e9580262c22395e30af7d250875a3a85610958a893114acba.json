{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BidiDeserializer = void 0;\nconst util_js_1 = require(\"../common/util.js\");\n/**\n * @internal\n */\nclass BidiDeserializer {\n  static deserialize(result) {\n    if (!result) {\n      (0, util_js_1.debugError)('Service did not produce a result.');\n      return undefined;\n    }\n    switch (result.type) {\n      case 'array':\n        return result.value?.map(value => {\n          return this.deserialize(value);\n        });\n      case 'set':\n        return result.value?.reduce((acc, value) => {\n          return acc.add(this.deserialize(value));\n        }, new Set());\n      case 'object':\n        return result.value?.reduce((acc, tuple) => {\n          const {\n            key,\n            value\n          } = this.#deserializeTuple(tuple);\n          acc[key] = value;\n          return acc;\n        }, {});\n      case 'map':\n        return result.value?.reduce((acc, tuple) => {\n          const {\n            key,\n            value\n          } = this.#deserializeTuple(tuple);\n          return acc.set(key, value);\n        }, new Map());\n      case 'promise':\n        return {};\n      case 'regexp':\n        return new RegExp(result.value.pattern, result.value.flags);\n      case 'date':\n        return new Date(result.value);\n      case 'undefined':\n        return undefined;\n      case 'null':\n        return null;\n      case 'number':\n        return this.#deserializeNumber(result.value);\n      case 'bigint':\n        return BigInt(result.value);\n      case 'boolean':\n        return Boolean(result.value);\n      case 'string':\n        return result.value;\n    }\n    (0, util_js_1.debugError)(`Deserialization of type ${result.type} not supported.`);\n    return undefined;\n  }\n  static #deserializeNumber(value) {\n    switch (value) {\n      case '-0':\n        return -0;\n      case 'NaN':\n        return NaN;\n      case 'Infinity':\n        return Infinity;\n      case '-Infinity':\n        return -Infinity;\n      default:\n        return value;\n    }\n  }\n  static #deserializeTuple([serializedKey, serializedValue]) {\n    const key = typeof serializedKey === 'string' ? serializedKey : this.deserialize(serializedKey);\n    const value = this.deserialize(serializedValue);\n    return {\n      key,\n      value\n    };\n  }\n}\nexports.BidiDeserializer = BidiDeserializer;","map":{"version":3,"names":["util_js_1","require","BidiDeserializer","deserialize","result","debugError","undefined","type","value","map","reduce","acc","add","Set","tuple","key","deserializeTuple","set","Map","RegExp","pattern","flags","Date","deserializeNumber","BigInt","Boolean","#deserializeNumber","NaN","Infinity","#deserializeTuple","serializedKey","serializedValue","exports"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/bidi/Deserializer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type * as Bidi from 'chromium-bidi/lib/cjs/protocol/protocol.js';\n\nimport {debugError} from '../common/util.js';\n\n/**\n * @internal\n */\nexport class BidiDeserializer {\n  static deserialize(result: Bidi.Script.RemoteValue): any {\n    if (!result) {\n      debugError('Service did not produce a result.');\n      return undefined;\n    }\n\n    switch (result.type) {\n      case 'array':\n        return result.value?.map(value => {\n          return this.deserialize(value);\n        });\n      case 'set':\n        return result.value?.reduce((acc: Set<unknown>, value) => {\n          return acc.add(this.deserialize(value));\n        }, new Set());\n      case 'object':\n        return result.value?.reduce((acc: Record<any, unknown>, tuple) => {\n          const {key, value} = this.#deserializeTuple(tuple);\n          acc[key as any] = value;\n          return acc;\n        }, {});\n      case 'map':\n        return result.value?.reduce((acc: Map<unknown, unknown>, tuple) => {\n          const {key, value} = this.#deserializeTuple(tuple);\n          return acc.set(key, value);\n        }, new Map());\n      case 'promise':\n        return {};\n      case 'regexp':\n        return new RegExp(result.value.pattern, result.value.flags);\n      case 'date':\n        return new Date(result.value);\n      case 'undefined':\n        return undefined;\n      case 'null':\n        return null;\n      case 'number':\n        return this.#deserializeNumber(result.value);\n      case 'bigint':\n        return BigInt(result.value);\n      case 'boolean':\n        return Boolean(result.value);\n      case 'string':\n        return result.value;\n    }\n\n    debugError(`Deserialization of type ${result.type} not supported.`);\n    return undefined;\n  }\n\n  static #deserializeNumber(value: Bidi.Script.SpecialNumber | number): number {\n    switch (value) {\n      case '-0':\n        return -0;\n      case 'NaN':\n        return NaN;\n      case 'Infinity':\n        return Infinity;\n      case '-Infinity':\n        return -Infinity;\n      default:\n        return value;\n    }\n  }\n\n  static #deserializeTuple([serializedKey, serializedValue]: [\n    Bidi.Script.RemoteValue | string,\n    Bidi.Script.RemoteValue,\n  ]): {key: unknown; value: unknown} {\n    const key =\n      typeof serializedKey === 'string'\n        ? serializedKey\n        : this.deserialize(serializedKey);\n    const value = this.deserialize(serializedValue);\n\n    return {key, value};\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}