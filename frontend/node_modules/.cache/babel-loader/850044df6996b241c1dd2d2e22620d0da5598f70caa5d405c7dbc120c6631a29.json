{"ast":null,"code":"/**\nMIT License\n\nCopyright (c) 2020 Lea Verou\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// lib/cjs/third_party/parsel-js/parsel-js.js\nvar parsel_js_exports = {};\n__export(parsel_js_exports, {\n  TOKENS: () => TOKENS,\n  stringify: () => stringify,\n  tokenize: () => tokenize\n});\nmodule.exports = __toCommonJS(parsel_js_exports);\n\n// ../../node_modules/parsel-js/dist/parsel.js\nvar TOKENS = {\n  attribute: /\\[\\s*(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)\\s*(?:(?<operator>\\W?=)\\s*(?<value>.+?)\\s*(\\s(?<caseSensitive>[iIsS]))?\\s*)?\\]/gu,\n  id: /#(?<name>[-\\w\\P{ASCII}]+)/gu,\n  class: /\\.(?<name>[-\\w\\P{ASCII}]+)/gu,\n  comma: /\\s*,\\s*/g,\n  combinator: /\\s*[\\s>+~]\\s*/g,\n  \"pseudo-element\": /::(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n  \"pseudo-class\": /:(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n  universal: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?\\*/gu,\n  type: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)/gu\n  // this must be last\n};\nvar TRIM_TOKENS = /* @__PURE__ */new Set([\"combinator\", \"comma\"]);\nvar getArgumentPatternByType = type => {\n  switch (type) {\n    case \"pseudo-element\":\n    case \"pseudo-class\":\n      return new RegExp(TOKENS[type].source.replace(\"(?<argument>\\xB6*)\", \"(?<argument>.*)\"), \"gu\");\n    default:\n      return TOKENS[type];\n  }\n};\nfunction gobbleParens(text, offset) {\n  let nesting = 0;\n  let result = \"\";\n  for (; offset < text.length; offset++) {\n    const char = text[offset];\n    switch (char) {\n      case \"(\":\n        ++nesting;\n        break;\n      case \")\":\n        --nesting;\n        break;\n    }\n    result += char;\n    if (nesting === 0) {\n      return result;\n    }\n  }\n  return result;\n}\nfunction tokenizeBy(text, grammar = TOKENS) {\n  if (!text) {\n    return [];\n  }\n  const tokens = [text];\n  for (const [type, pattern] of Object.entries(grammar)) {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (typeof token !== \"string\") {\n        continue;\n      }\n      pattern.lastIndex = 0;\n      const match = pattern.exec(token);\n      if (!match) {\n        continue;\n      }\n      const from = match.index - 1;\n      const args = [];\n      const content = match[0];\n      const before = token.slice(0, from + 1);\n      if (before) {\n        args.push(before);\n      }\n      args.push({\n        ...match.groups,\n        type,\n        content\n      });\n      const after = token.slice(from + content.length + 1);\n      if (after) {\n        args.push(after);\n      }\n      tokens.splice(i, 1, ...args);\n    }\n  }\n  let offset = 0;\n  for (const token of tokens) {\n    switch (typeof token) {\n      case \"string\":\n        throw new Error(`Unexpected sequence ${token} found at index ${offset}`);\n      case \"object\":\n        offset += token.content.length;\n        token.pos = [offset - token.content.length, offset];\n        if (TRIM_TOKENS.has(token.type)) {\n          token.content = token.content.trim() || \" \";\n        }\n        break;\n    }\n  }\n  return tokens;\n}\nvar STRING_PATTERN = /(['\"])([^\\\\\\n]+?)\\1/g;\nvar ESCAPE_PATTERN = /\\\\./g;\nfunction tokenize(selector, grammar = TOKENS) {\n  selector = selector.trim();\n  if (selector === \"\") {\n    return [];\n  }\n  const replacements = [];\n  selector = selector.replace(ESCAPE_PATTERN, (value, offset) => {\n    replacements.push({\n      value,\n      offset\n    });\n    return \"\\uE000\".repeat(value.length);\n  });\n  selector = selector.replace(STRING_PATTERN, (value, quote, content, offset) => {\n    replacements.push({\n      value,\n      offset\n    });\n    return `${quote}${\"\\uE001\".repeat(content.length)}${quote}`;\n  });\n  {\n    let pos = 0;\n    let offset;\n    while ((offset = selector.indexOf(\"(\", pos)) > -1) {\n      const value = gobbleParens(selector, offset);\n      replacements.push({\n        value,\n        offset\n      });\n      selector = `${selector.substring(0, offset)}(${\"\\xB6\".repeat(value.length - 2)})${selector.substring(offset + value.length)}`;\n      pos = offset + value.length;\n    }\n  }\n  const tokens = tokenizeBy(selector, grammar);\n  const changedTokens = /* @__PURE__ */new Set();\n  for (const replacement of replacements.reverse()) {\n    for (const token of tokens) {\n      const {\n        offset,\n        value\n      } = replacement;\n      if (!(token.pos[0] <= offset && offset + value.length <= token.pos[1])) {\n        continue;\n      }\n      const {\n        content\n      } = token;\n      const tokenOffset = offset - token.pos[0];\n      token.content = content.slice(0, tokenOffset) + value + content.slice(tokenOffset + value.length);\n      if (token.content !== content) {\n        changedTokens.add(token);\n      }\n    }\n  }\n  for (const token of changedTokens) {\n    const pattern = getArgumentPatternByType(token.type);\n    if (!pattern) {\n      throw new Error(`Unknown token type: ${token.type}`);\n    }\n    pattern.lastIndex = 0;\n    const match = pattern.exec(token.content);\n    if (!match) {\n      throw new Error(`Unable to parse content for ${token.type}: ${token.content}`);\n    }\n    Object.assign(token, match.groups);\n  }\n  return tokens;\n}\nfunction* flatten(node, parent) {\n  switch (node.type) {\n    case \"list\":\n      for (let child of node.list) {\n        yield* flatten(child, node);\n      }\n      break;\n    case \"complex\":\n      yield* flatten(node.left, node);\n      yield* flatten(node.right, node);\n      break;\n    case \"compound\":\n      yield* node.list.map(token => [token, node]);\n      break;\n    default:\n      yield [node, parent];\n  }\n}\nfunction stringify(listOrNode) {\n  let tokens;\n  if (Array.isArray(listOrNode)) {\n    tokens = listOrNode;\n  } else {\n    tokens = [...flatten(listOrNode)].map(([token]) => token);\n  }\n  return tokens.map(token => token.content).join(\"\");\n}","map":{"version":3,"names":["__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toCommonJS","mod","value","parsel_js_exports","TOKENS","stringify","tokenize","module","exports","attribute","id","class","comma","combinator","universal","type","TRIM_TOKENS","Set","getArgumentPatternByType","RegExp","source","replace","gobbleParens","text","offset","nesting","result","length","char","tokenizeBy","grammar","tokens","pattern","entries","i","token","lastIndex","match","exec","index","args","content","before","slice","push","groups","after","splice","Error","pos","has","trim","STRING_PATTERN","ESCAPE_PATTERN","selector","replacements","repeat","quote","indexOf","substring","changedTokens","replacement","reverse","tokenOffset","add","assign","flatten","node","parent","child","list","left","right","map","listOrNode","Array","isArray","join"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/lib/cjs/third_party/parsel-js/parsel-js.js"],"sourcesContent":["/**\nMIT License\n\nCopyright (c) 2020 Lea Verou\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// lib/cjs/third_party/parsel-js/parsel-js.js\nvar parsel_js_exports = {};\n__export(parsel_js_exports, {\n  TOKENS: () => TOKENS,\n  stringify: () => stringify,\n  tokenize: () => tokenize\n});\nmodule.exports = __toCommonJS(parsel_js_exports);\n\n// ../../node_modules/parsel-js/dist/parsel.js\nvar TOKENS = {\n  attribute: /\\[\\s*(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)\\s*(?:(?<operator>\\W?=)\\s*(?<value>.+?)\\s*(\\s(?<caseSensitive>[iIsS]))?\\s*)?\\]/gu,\n  id: /#(?<name>[-\\w\\P{ASCII}]+)/gu,\n  class: /\\.(?<name>[-\\w\\P{ASCII}]+)/gu,\n  comma: /\\s*,\\s*/g,\n  combinator: /\\s*[\\s>+~]\\s*/g,\n  \"pseudo-element\": /::(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n  \"pseudo-class\": /:(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n  universal: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?\\*/gu,\n  type: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)/gu\n  // this must be last\n};\nvar TRIM_TOKENS = /* @__PURE__ */ new Set([\"combinator\", \"comma\"]);\nvar getArgumentPatternByType = (type) => {\n  switch (type) {\n    case \"pseudo-element\":\n    case \"pseudo-class\":\n      return new RegExp(TOKENS[type].source.replace(\"(?<argument>\\xB6*)\", \"(?<argument>.*)\"), \"gu\");\n    default:\n      return TOKENS[type];\n  }\n};\nfunction gobbleParens(text, offset) {\n  let nesting = 0;\n  let result = \"\";\n  for (; offset < text.length; offset++) {\n    const char = text[offset];\n    switch (char) {\n      case \"(\":\n        ++nesting;\n        break;\n      case \")\":\n        --nesting;\n        break;\n    }\n    result += char;\n    if (nesting === 0) {\n      return result;\n    }\n  }\n  return result;\n}\nfunction tokenizeBy(text, grammar = TOKENS) {\n  if (!text) {\n    return [];\n  }\n  const tokens = [text];\n  for (const [type, pattern] of Object.entries(grammar)) {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (typeof token !== \"string\") {\n        continue;\n      }\n      pattern.lastIndex = 0;\n      const match = pattern.exec(token);\n      if (!match) {\n        continue;\n      }\n      const from = match.index - 1;\n      const args = [];\n      const content = match[0];\n      const before = token.slice(0, from + 1);\n      if (before) {\n        args.push(before);\n      }\n      args.push({\n        ...match.groups,\n        type,\n        content\n      });\n      const after = token.slice(from + content.length + 1);\n      if (after) {\n        args.push(after);\n      }\n      tokens.splice(i, 1, ...args);\n    }\n  }\n  let offset = 0;\n  for (const token of tokens) {\n    switch (typeof token) {\n      case \"string\":\n        throw new Error(`Unexpected sequence ${token} found at index ${offset}`);\n      case \"object\":\n        offset += token.content.length;\n        token.pos = [offset - token.content.length, offset];\n        if (TRIM_TOKENS.has(token.type)) {\n          token.content = token.content.trim() || \" \";\n        }\n        break;\n    }\n  }\n  return tokens;\n}\nvar STRING_PATTERN = /(['\"])([^\\\\\\n]+?)\\1/g;\nvar ESCAPE_PATTERN = /\\\\./g;\nfunction tokenize(selector, grammar = TOKENS) {\n  selector = selector.trim();\n  if (selector === \"\") {\n    return [];\n  }\n  const replacements = [];\n  selector = selector.replace(ESCAPE_PATTERN, (value, offset) => {\n    replacements.push({ value, offset });\n    return \"\\uE000\".repeat(value.length);\n  });\n  selector = selector.replace(STRING_PATTERN, (value, quote, content, offset) => {\n    replacements.push({ value, offset });\n    return `${quote}${\"\\uE001\".repeat(content.length)}${quote}`;\n  });\n  {\n    let pos = 0;\n    let offset;\n    while ((offset = selector.indexOf(\"(\", pos)) > -1) {\n      const value = gobbleParens(selector, offset);\n      replacements.push({ value, offset });\n      selector = `${selector.substring(0, offset)}(${\"\\xB6\".repeat(value.length - 2)})${selector.substring(offset + value.length)}`;\n      pos = offset + value.length;\n    }\n  }\n  const tokens = tokenizeBy(selector, grammar);\n  const changedTokens = /* @__PURE__ */ new Set();\n  for (const replacement of replacements.reverse()) {\n    for (const token of tokens) {\n      const { offset, value } = replacement;\n      if (!(token.pos[0] <= offset && offset + value.length <= token.pos[1])) {\n        continue;\n      }\n      const { content } = token;\n      const tokenOffset = offset - token.pos[0];\n      token.content = content.slice(0, tokenOffset) + value + content.slice(tokenOffset + value.length);\n      if (token.content !== content) {\n        changedTokens.add(token);\n      }\n    }\n  }\n  for (const token of changedTokens) {\n    const pattern = getArgumentPatternByType(token.type);\n    if (!pattern) {\n      throw new Error(`Unknown token type: ${token.type}`);\n    }\n    pattern.lastIndex = 0;\n    const match = pattern.exec(token.content);\n    if (!match) {\n      throw new Error(`Unable to parse content for ${token.type}: ${token.content}`);\n    }\n    Object.assign(token, match.groups);\n  }\n  return tokens;\n}\nfunction* flatten(node, parent) {\n  switch (node.type) {\n    case \"list\":\n      for (let child of node.list) {\n        yield* flatten(child, node);\n      }\n      break;\n    case \"complex\":\n      yield* flatten(node.left, node);\n      yield* flatten(node.right, node);\n      break;\n    case \"compound\":\n      yield* node.list.map((token) => [token, node]);\n      break;\n    default:\n      yield [node, parent];\n  }\n}\nfunction stringify(listOrNode) {\n  let tokens;\n  if (Array.isArray(listOrNode)) {\n    tokens = listOrNode;\n  } else {\n    tokens = [...flatten(listOrNode)].map(([token]) => token);\n  }\n  return tokens.map((token) => token.content).join(\"\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}