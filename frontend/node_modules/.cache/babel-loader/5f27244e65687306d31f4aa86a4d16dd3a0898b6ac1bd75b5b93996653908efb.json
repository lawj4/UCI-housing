{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uuidv4 = uuidv4;\nfunction bytesToHex(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n/**\n * Generates a random v4 UUID, as specified in RFC4122.\n *\n * Uses the native Web Crypto API if available, otherwise falls back to a\n * polyfill.\n *\n * Example: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n */\nfunction uuidv4() {\n  // Available only in secure contexts\n  // https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API\n  if ('crypto' in globalThis && 'randomUUID' in globalThis.crypto) {\n    // Node with\n    // https://nodejs.org/dist/latest-v20.x/docs/api/globals.html#crypto_1 or\n    // secure browser context.\n    return globalThis.crypto.randomUUID();\n  }\n  const randomValues = new Uint8Array(16);\n  if ('crypto' in globalThis && 'getRandomValues' in globalThis.crypto) {\n    // Node (>=18) with\n    // https://nodejs.org/dist/latest-v20.x/docs/api/globals.html#crypto_1 or\n    // browser.\n    globalThis.crypto.getRandomValues(randomValues);\n  } else {\n    // Node (<=16) without\n    // https://nodejs.org/dist/latest-v20.x/docs/api/globals.html#crypto_1.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-require-imports\n    require('crypto').webcrypto.getRandomValues(randomValues);\n  }\n  // Set version (4) and variant (RFC4122) bits.\n  randomValues[6] = randomValues[6] & 0x0f | 0x40;\n  randomValues[8] = randomValues[8] & 0x3f | 0x80;\n  return [bytesToHex(randomValues.subarray(0, 4)), bytesToHex(randomValues.subarray(4, 6)), bytesToHex(randomValues.subarray(6, 8)), bytesToHex(randomValues.subarray(8, 10)), bytesToHex(randomValues.subarray(10, 16))].join('-');\n}","map":{"version":3,"names":["exports","uuidv4","bytesToHex","bytes","reduce","str","byte","toString","padStart","globalThis","crypto","randomUUID","randomValues","Uint8Array","getRandomValues","require","webcrypto","subarray","join"],"sources":["../../../src/utils/uuid.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgCAA,OAAA,CAAAC,MAAA,GAAAA,MAAA;AAfA,SAASC,UAAUA,CAACC,KAAiB;EACnC,OAAOA,KAAK,CAACC,MAAM,CACjB,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EACvD,EAAE,CACH;AACH;AAEA;;;;;;;;AAQA,SAAgBP,MAAMA,CAAA;EACpB;EACA;EACA,IAAI,QAAQ,IAAIQ,UAAU,IAAI,YAAY,IAAIA,UAAU,CAACC,MAAM,EAAE;IAC/D;IACA;IACA;IACA,OAAOD,UAAU,CAACC,MAAM,CAACC,UAAU,EAAE;EACvC;EAEA,MAAMC,YAAY,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;EAEvC,IAAI,QAAQ,IAAIJ,UAAU,IAAI,iBAAiB,IAAIA,UAAU,CAACC,MAAM,EAAE;IACpE;IACA;IACA;IACAD,UAAU,CAACC,MAAM,CAACI,eAAe,CAACF,YAAY,CAAC;EACjD,CAAC,MAAM;IACL;IACA;IACA;IACAG,OAAO,CAAC,QAAQ,CAAC,CAACC,SAAS,CAACF,eAAe,CAACF,YAAY,CAAC;EAC3D;EAEA;EACAA,YAAY,CAAC,CAAC,CAAC,GAAIA,YAAY,CAAC,CAAC,CAAE,GAAG,IAAI,GAAI,IAAI;EAClDA,YAAY,CAAC,CAAC,CAAC,GAAIA,YAAY,CAAC,CAAC,CAAE,GAAG,IAAI,GAAI,IAAI;EAElD,OAAO,CACLV,UAAU,CAACU,YAAY,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACvCf,UAAU,CAACU,YAAY,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACvCf,UAAU,CAACU,YAAY,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACvCf,UAAU,CAACU,YAAY,CAACK,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EACxCf,UAAU,CAACU,YAAY,CAACK,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAC1C,CAACC,IAAI,CAAC,GAAG,CAAwD;AACpE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}