{"ast":null,"code":"\"use strict\";\n\nvar __addDisposableResource = this && this.__addDisposableResource || function (env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({\n      value: value,\n      dispose: dispose,\n      async: async\n    });\n  } else if (async) {\n    env.stack.push({\n      async: true\n    });\n  }\n  return value;\n};\nvar __disposeResources = this && this.__disposeResources || function (SuppressedError) {\n  return function (env) {\n    function fail(e) {\n      env.error = env.hasError ? new SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n      env.hasError = true;\n    }\n    function next() {\n      while (env.stack.length) {\n        var rec = env.stack.pop();\n        try {\n          var result = rec.dispose && rec.dispose.call(rec.value);\n          if (rec.async) return Promise.resolve(result).then(next, function (e) {\n            fail(e);\n            return next();\n          });\n        } catch (e) {\n          fail(e);\n        }\n      }\n      if (env.hasError) throw env.error;\n    }\n    return next();\n  };\n}(typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n});\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Binding = void 0;\n/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nconst JSHandle_js_1 = require(\"../api/JSHandle.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst disposable_js_1 = require(\"../util/disposable.js\");\nconst ErrorLike_js_1 = require(\"../util/ErrorLike.js\");\n/**\n * @internal\n */\nclass Binding {\n  #name;\n  #fn;\n  #initSource;\n  constructor(name, fn, initSource) {\n    this.#name = name;\n    this.#fn = fn;\n    this.#initSource = initSource;\n  }\n  get name() {\n    return this.#name;\n  }\n  get initSource() {\n    return this.#initSource;\n  }\n  /**\n   * @param context - Context to run the binding in; the context should have\n   * the binding added to it beforehand.\n   * @param id - ID of the call. This should come from the CDP\n   * `onBindingCalled` response.\n   * @param args - Plain arguments from CDP.\n   */\n  async run(context, id, args, isTrivial) {\n    const stack = new disposable_js_1.DisposableStack();\n    try {\n      if (!isTrivial) {\n        const env_1 = {\n          stack: [],\n          error: void 0,\n          hasError: false\n        };\n        try {\n          // Getting non-trivial arguments.\n          const handles = __addDisposableResource(env_1, await context.evaluateHandle((name, seq) => {\n            // @ts-expect-error Code is evaluated in a different context.\n            return globalThis[name].args.get(seq);\n          }, this.#name, id), false);\n          const properties = await handles.getProperties();\n          for (const [index, handle] of properties) {\n            // This is not straight-forward since some arguments can stringify, but\n            // aren't plain objects so add subtypes when the use-case arises.\n            if (index in args) {\n              switch (handle.remoteObject().subtype) {\n                case 'node':\n                  args[+index] = handle;\n                  break;\n                default:\n                  stack.use(handle);\n              }\n            } else {\n              stack.use(handle);\n            }\n          }\n        } catch (e_1) {\n          env_1.error = e_1;\n          env_1.hasError = true;\n        } finally {\n          __disposeResources(env_1);\n        }\n      }\n      await context.evaluate((name, seq, result) => {\n        // @ts-expect-error Code is evaluated in a different context.\n        const callbacks = globalThis[name].callbacks;\n        callbacks.get(seq).resolve(result);\n        callbacks.delete(seq);\n      }, this.#name, id, await this.#fn(...args));\n      for (const arg of args) {\n        if (arg instanceof JSHandle_js_1.JSHandle) {\n          stack.use(arg);\n        }\n      }\n    } catch (error) {\n      if ((0, ErrorLike_js_1.isErrorLike)(error)) {\n        await context.evaluate((name, seq, message, stack) => {\n          const error = new Error(message);\n          error.stack = stack;\n          // @ts-expect-error Code is evaluated in a different context.\n          const callbacks = globalThis[name].callbacks;\n          callbacks.get(seq).reject(error);\n          callbacks.delete(seq);\n        }, this.#name, id, error.message, error.stack).catch(util_js_1.debugError);\n      } else {\n        await context.evaluate((name, seq, error) => {\n          // @ts-expect-error Code is evaluated in a different context.\n          const callbacks = globalThis[name].callbacks;\n          callbacks.get(seq).reject(error);\n          callbacks.delete(seq);\n        }, this.#name, id, error).catch(util_js_1.debugError);\n      }\n    }\n  }\n}\nexports.Binding = Binding;","map":{"version":3,"names":["JSHandle_js_1","require","util_js_1","disposable_js_1","ErrorLike_js_1","Binding","name","fn","initSource","constructor","run","context","id","args","isTrivial","stack","DisposableStack","handles","__addDisposableResource","env_1","evaluateHandle","seq","globalThis","get","properties","getProperties","index","handle","remoteObject","subtype","use","evaluate","result","callbacks","resolve","delete","arg","JSHandle","error","isErrorLike","message","Error","reject","catch","debugError","exports"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/cdp/Binding.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {JSHandle} from '../api/JSHandle.js';\nimport {debugError} from '../common/util.js';\nimport {DisposableStack} from '../util/disposable.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\nimport type {ExecutionContext} from './ExecutionContext.js';\n\n/**\n * @internal\n */\nexport class Binding {\n  #name: string;\n  #fn: (...args: unknown[]) => unknown;\n  #initSource: string;\n  constructor(\n    name: string,\n    fn: (...args: unknown[]) => unknown,\n    initSource: string\n  ) {\n    this.#name = name;\n    this.#fn = fn;\n    this.#initSource = initSource;\n  }\n\n  get name(): string {\n    return this.#name;\n  }\n\n  get initSource(): string {\n    return this.#initSource;\n  }\n\n  /**\n   * @param context - Context to run the binding in; the context should have\n   * the binding added to it beforehand.\n   * @param id - ID of the call. This should come from the CDP\n   * `onBindingCalled` response.\n   * @param args - Plain arguments from CDP.\n   */\n  async run(\n    context: ExecutionContext,\n    id: number,\n    args: unknown[],\n    isTrivial: boolean\n  ): Promise<void> {\n    const stack = new DisposableStack();\n    try {\n      if (!isTrivial) {\n        // Getting non-trivial arguments.\n        using handles = await context.evaluateHandle(\n          (name, seq) => {\n            // @ts-expect-error Code is evaluated in a different context.\n            return globalThis[name].args.get(seq);\n          },\n          this.#name,\n          id\n        );\n        const properties = await handles.getProperties();\n        for (const [index, handle] of properties) {\n          // This is not straight-forward since some arguments can stringify, but\n          // aren't plain objects so add subtypes when the use-case arises.\n          if (index in args) {\n            switch (handle.remoteObject().subtype) {\n              case 'node':\n                args[+index] = handle;\n                break;\n              default:\n                stack.use(handle);\n            }\n          } else {\n            stack.use(handle);\n          }\n        }\n      }\n\n      await context.evaluate(\n        (name, seq, result) => {\n          // @ts-expect-error Code is evaluated in a different context.\n          const callbacks = globalThis[name].callbacks;\n          callbacks.get(seq).resolve(result);\n          callbacks.delete(seq);\n        },\n        this.#name,\n        id,\n        await this.#fn(...args)\n      );\n\n      for (const arg of args) {\n        if (arg instanceof JSHandle) {\n          stack.use(arg);\n        }\n      }\n    } catch (error) {\n      if (isErrorLike(error)) {\n        await context\n          .evaluate(\n            (name, seq, message, stack) => {\n              const error = new Error(message);\n              error.stack = stack;\n              // @ts-expect-error Code is evaluated in a different context.\n              const callbacks = globalThis[name].callbacks;\n              callbacks.get(seq).reject(error);\n              callbacks.delete(seq);\n            },\n            this.#name,\n            id,\n            error.message,\n            error.stack\n          )\n          .catch(debugError);\n      } else {\n        await context\n          .evaluate(\n            (name, seq, error) => {\n              // @ts-expect-error Code is evaluated in a different context.\n              const callbacks = globalThis[name].callbacks;\n              callbacks.get(seq).reject(error);\n              callbacks.delete(seq);\n            },\n            this.#name,\n            id,\n            error\n          )\n          .catch(debugError);\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}