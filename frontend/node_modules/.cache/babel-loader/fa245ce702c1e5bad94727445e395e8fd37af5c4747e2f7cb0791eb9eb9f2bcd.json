{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CdpTargetManager = void 0;\nconst log_js_1 = require(\"../../../utils/log.js\");\nconst BrowsingContextImpl_js_1 = require(\"../context/BrowsingContextImpl.js\");\nconst WorkerRealm_js_1 = require(\"../script/WorkerRealm.js\");\nconst CdpTarget_js_1 = require(\"./CdpTarget.js\");\nconst cdpToBidiTargetTypes = {\n  service_worker: 'service-worker',\n  shared_worker: 'shared-worker',\n  worker: 'dedicated-worker'\n};\nclass CdpTargetManager {\n  #browserCdpClient;\n  #cdpConnection;\n  #targetKeysToBeIgnoredByAutoAttach = new Set();\n  #selfTargetId;\n  #eventManager;\n  #browsingContextStorage;\n  #networkStorage;\n  #preloadScriptStorage;\n  #realmStorage;\n  #defaultUserContextId;\n  #logger;\n  #unhandledPromptBehavior;\n  constructor(cdpConnection, browserCdpClient, selfTargetId, eventManager, browsingContextStorage, realmStorage, networkStorage, preloadScriptStorage, defaultUserContextId, unhandledPromptBehavior, logger) {\n    this.#cdpConnection = cdpConnection;\n    this.#browserCdpClient = browserCdpClient;\n    this.#targetKeysToBeIgnoredByAutoAttach.add(selfTargetId);\n    this.#selfTargetId = selfTargetId;\n    this.#eventManager = eventManager;\n    this.#browsingContextStorage = browsingContextStorage;\n    this.#preloadScriptStorage = preloadScriptStorage;\n    this.#networkStorage = networkStorage;\n    this.#realmStorage = realmStorage;\n    this.#defaultUserContextId = defaultUserContextId;\n    this.#unhandledPromptBehavior = unhandledPromptBehavior;\n    this.#logger = logger;\n    this.#setEventListeners(browserCdpClient);\n  }\n  /**\n   * This method is called for each CDP session, since this class is responsible\n   * for creating and destroying all targets and browsing contexts.\n   */\n  #setEventListeners(cdpClient) {\n    cdpClient.on('Target.attachedToTarget', params => {\n      this.#handleAttachedToTargetEvent(params, cdpClient);\n    });\n    cdpClient.on('Target.detachedFromTarget', this.#handleDetachedFromTargetEvent.bind(this));\n    cdpClient.on('Target.targetInfoChanged', this.#handleTargetInfoChangedEvent.bind(this));\n    cdpClient.on('Inspector.targetCrashed', () => {\n      this.#handleTargetCrashedEvent(cdpClient);\n    });\n    cdpClient.on('Page.frameAttached', this.#handleFrameAttachedEvent.bind(this));\n    cdpClient.on('Page.frameDetached', this.#handleFrameDetachedEvent.bind(this));\n  }\n  #handleFrameAttachedEvent(params) {\n    const parentBrowsingContext = this.#browsingContextStorage.findContext(params.parentFrameId);\n    if (parentBrowsingContext !== undefined) {\n      BrowsingContextImpl_js_1.BrowsingContextImpl.create(params.frameId, params.parentFrameId, parentBrowsingContext.userContext, parentBrowsingContext.cdpTarget, this.#eventManager, this.#browsingContextStorage, this.#realmStorage,\n      // At this point, we don't know the URL of the frame yet, so it will be updated\n      // later.\n      'about:blank', undefined, this.#unhandledPromptBehavior, this.#logger);\n    }\n  }\n  #handleFrameDetachedEvent(params) {\n    // In case of OOPiF no need in deleting BrowsingContext.\n    if (params.reason === 'swap') {\n      return;\n    }\n    this.#browsingContextStorage.findContext(params.frameId)?.dispose();\n  }\n  #handleAttachedToTargetEvent(params, parentSessionCdpClient) {\n    const {\n      sessionId,\n      targetInfo\n    } = params;\n    const targetCdpClient = this.#cdpConnection.getCdpClient(sessionId);\n    const detach = async () => {\n      // Detaches and resumes the target suppressing errors.\n      await targetCdpClient.sendCommand('Runtime.runIfWaitingForDebugger').then(() => parentSessionCdpClient.sendCommand('Target.detachFromTarget', params)).catch(error => this.#logger?.(log_js_1.LogType.debugError, error));\n    };\n    if (this.#selfTargetId !== targetInfo.targetId) {\n      // Service workers are special case because they attach to the\n      // browser target and the page target (so twice per worker) during\n      // the regular auto-attach and might hang if the CDP session on\n      // the browser level is not detached. The logic to detach the\n      // right session is handled in the switch below.\n      const targetKey = targetInfo.type === 'service_worker' ? `${parentSessionCdpClient.sessionId}_${targetInfo.targetId}` : targetInfo.targetId;\n      // Mapper generally only needs one session per target. If we\n      // receive additional auto-attached sessions, that is very likely\n      // coming from custom CDP sessions.\n      if (this.#targetKeysToBeIgnoredByAutoAttach.has(targetKey)) {\n        // Return to leave the session untouched.\n        return;\n      }\n      this.#targetKeysToBeIgnoredByAutoAttach.add(targetKey);\n    }\n    switch (targetInfo.type) {\n      case 'page':\n      case 'iframe':\n        {\n          if (this.#selfTargetId === targetInfo.targetId) {\n            void detach();\n            return;\n          }\n          const cdpTarget = this.#createCdpTarget(targetCdpClient, targetInfo);\n          const maybeContext = this.#browsingContextStorage.findContext(targetInfo.targetId);\n          if (maybeContext && targetInfo.type === 'iframe') {\n            // OOPiF.\n            maybeContext.updateCdpTarget(cdpTarget);\n          } else {\n            const userContext = targetInfo.browserContextId && targetInfo.browserContextId !== this.#defaultUserContextId ? targetInfo.browserContextId : 'default';\n            // New context.\n            BrowsingContextImpl_js_1.BrowsingContextImpl.create(targetInfo.targetId, null, userContext, cdpTarget, this.#eventManager, this.#browsingContextStorage, this.#realmStorage,\n            // Hack: when a new target created, CDP emits targetInfoChanged with an empty\n            // url, and navigates it to about:blank later. When the event is emitted for\n            // an existing target (reconnect), the url is already known, and navigation\n            // events will not be emitted anymore. Replacing empty url with `about:blank`\n            // allows to handle both cases in the same way.\n            // \"7.3.2.1 Creating browsing contexts\".\n            // https://html.spec.whatwg.org/multipage/document-sequences.html#creating-browsing-contexts\n            // TODO: check who to deal with non-null creator and its `creatorOrigin`.\n            targetInfo.url === '' ? 'about:blank' : targetInfo.url, targetInfo.openerFrameId ?? targetInfo.openerId, this.#unhandledPromptBehavior, this.#logger);\n          }\n          return;\n        }\n      case 'service_worker':\n      case 'worker':\n        {\n          const realm = this.#realmStorage.findRealm({\n            cdpSessionId: parentSessionCdpClient.sessionId\n          });\n          // If there is no browsing context, this worker is already terminated.\n          if (!realm) {\n            void detach();\n            return;\n          }\n          const cdpTarget = this.#createCdpTarget(targetCdpClient, targetInfo);\n          this.#handleWorkerTarget(cdpToBidiTargetTypes[targetInfo.type], cdpTarget, realm);\n          return;\n        }\n      // In CDP, we only emit shared workers on the browser and not the set of\n      // frames that use the shared worker. If we change this in the future to\n      // behave like service workers (emits on both browser and frame targets),\n      // we can remove this block and merge service workers with the above one.\n      case 'shared_worker':\n        {\n          const cdpTarget = this.#createCdpTarget(targetCdpClient, targetInfo);\n          this.#handleWorkerTarget(cdpToBidiTargetTypes[targetInfo.type], cdpTarget);\n          return;\n        }\n    }\n    // DevTools or some other not supported by BiDi target. Just release\n    // debugger and ignore them.\n    void detach();\n  }\n  #createCdpTarget(targetCdpClient, targetInfo) {\n    this.#setEventListeners(targetCdpClient);\n    const target = CdpTarget_js_1.CdpTarget.create(targetInfo.targetId, targetCdpClient, this.#browserCdpClient, this.#realmStorage, this.#eventManager, this.#preloadScriptStorage, this.#browsingContextStorage, this.#networkStorage, this.#unhandledPromptBehavior, this.#logger);\n    this.#networkStorage.onCdpTargetCreated(target);\n    return target;\n  }\n  #workers = new Map();\n  #handleWorkerTarget(realmType, cdpTarget, ownerRealm) {\n    cdpTarget.cdpClient.on('Runtime.executionContextCreated', params => {\n      const {\n        uniqueId,\n        id,\n        origin\n      } = params.context;\n      const workerRealm = new WorkerRealm_js_1.WorkerRealm(cdpTarget.cdpClient, this.#eventManager, id, this.#logger, (0, BrowsingContextImpl_js_1.serializeOrigin)(origin), ownerRealm ? [ownerRealm] : [], uniqueId, this.#realmStorage, realmType);\n      this.#workers.set(cdpTarget.cdpSessionId, workerRealm);\n    });\n  }\n  #handleDetachedFromTargetEvent({\n    sessionId,\n    targetId\n  }) {\n    if (targetId) {\n      this.#preloadScriptStorage.find({\n        targetId\n      }).map(preloadScript => {\n        preloadScript.dispose(targetId);\n      });\n    }\n    const context = this.#browsingContextStorage.findContextBySession(sessionId);\n    if (context) {\n      context.dispose();\n      return;\n    }\n    const worker = this.#workers.get(sessionId);\n    if (worker) {\n      this.#realmStorage.deleteRealms({\n        cdpSessionId: worker.cdpClient.sessionId\n      });\n    }\n  }\n  #handleTargetInfoChangedEvent(params) {\n    const context = this.#browsingContextStorage.findContext(params.targetInfo.targetId);\n    if (context) {\n      context.onTargetInfoChanged(params);\n    }\n  }\n  #handleTargetCrashedEvent(cdpClient) {\n    // This is primarily used for service and shared workers. CDP tends to not\n    // signal they closed gracefully and instead says they crashed to signal\n    // they are closed.\n    const realms = this.#realmStorage.findRealms({\n      cdpSessionId: cdpClient.sessionId\n    });\n    for (const realm of realms) {\n      realm.dispose();\n    }\n  }\n}\nexports.CdpTargetManager = CdpTargetManager;","map":{"version":3,"names":["log_js_1","require","BrowsingContextImpl_js_1","WorkerRealm_js_1","CdpTarget_js_1","cdpToBidiTargetTypes","service_worker","shared_worker","worker","CdpTargetManager","browserCdpClient","cdpConnection","targetKeysToBeIgnoredByAutoAttach","Set","selfTargetId","eventManager","browsingContextStorage","networkStorage","preloadScriptStorage","realmStorage","defaultUserContextId","logger","unhandledPromptBehavior","constructor","add","setEventListeners","#setEventListeners","cdpClient","on","params","handleAttachedToTargetEvent","handleDetachedFromTargetEvent","bind","handleTargetInfoChangedEvent","handleTargetCrashedEvent","handleFrameAttachedEvent","handleFrameDetachedEvent","#handleFrameAttachedEvent","parentBrowsingContext","findContext","parentFrameId","undefined","BrowsingContextImpl","create","frameId","userContext","cdpTarget","#handleFrameDetachedEvent","reason","dispose","#handleAttachedToTargetEvent","parentSessionCdpClient","sessionId","targetInfo","targetCdpClient","getCdpClient","detach","sendCommand","then","catch","error","LogType","debugError","targetId","targetKey","type","has","createCdpTarget","maybeContext","updateCdpTarget","browserContextId","url","openerFrameId","openerId","realm","findRealm","cdpSessionId","handleWorkerTarget","#createCdpTarget","target","CdpTarget","onCdpTargetCreated","workers","Map","#handleWorkerTarget","realmType","ownerRealm","uniqueId","id","origin","context","workerRealm","WorkerRealm","serializeOrigin","set","#handleDetachedFromTargetEvent","find","map","preloadScript","findContextBySession","get","deleteRealms","#handleTargetInfoChangedEvent","onTargetInfoChanged","#handleTargetCrashedEvent","realms","findRealms","exports"],"sources":["../../../../../src/bidiMapper/modules/cdp/CdpTargetManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}