{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStorage = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst uuid_js_1 = require(\"../../../utils/uuid.js\");\nconst NetworkRequest_js_1 = require(\"./NetworkRequest.js\");\nconst NetworkUtils_js_1 = require(\"./NetworkUtils.js\");\n/** Stores network and intercept maps. */\nclass NetworkStorage {\n  #browsingContextStorage;\n  #eventManager;\n  #logger;\n  /**\n   * A map from network request ID to Network Request objects.\n   * Needed as long as information about requests comes from different events.\n   */\n  #requests = new Map();\n  /** A map from intercept ID to track active network intercepts. */\n  #intercepts = new Map();\n  constructor(eventManager, browsingContextStorage, browserClient, logger) {\n    this.#browsingContextStorage = browsingContextStorage;\n    this.#eventManager = eventManager;\n    browserClient.on('Target.detachedFromTarget', ({\n      sessionId\n    }) => {\n      this.disposeRequestMap(sessionId);\n    });\n    this.#logger = logger;\n  }\n  /**\n   * Gets the network request with the given ID, if any.\n   * Otherwise, creates a new network request with the given ID and cdp target.\n   */\n  #getOrCreateNetworkRequest(id, cdpTarget, redirectCount) {\n    let request = this.getRequestById(id);\n    if (request) {\n      return request;\n    }\n    request = new NetworkRequest_js_1.NetworkRequest(id, this.#eventManager, this, cdpTarget, redirectCount, this.#logger);\n    this.addRequest(request);\n    return request;\n  }\n  onCdpTargetCreated(cdpTarget) {\n    const cdpClient = cdpTarget.cdpClient;\n    // TODO: Wrap into object\n    const listeners = [['Network.requestWillBeSent', params => {\n      const request = this.getRequestById(params.requestId);\n      if (request && request.isRedirecting()) {\n        request.handleRedirect(params);\n        this.deleteRequest(params.requestId);\n        this.#getOrCreateNetworkRequest(params.requestId, cdpTarget, request.redirectCount + 1).onRequestWillBeSentEvent(params);\n      } else {\n        this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentEvent(params);\n      }\n    }], ['Network.requestWillBeSentExtraInfo', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentExtraInfoEvent(params);\n    }], ['Network.responseReceived', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedEvent(params);\n    }], ['Network.responseReceivedExtraInfo', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedExtraInfoEvent(params);\n    }], ['Network.requestServedFromCache', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onServedFromCache();\n    }], ['Network.loadingFailed', params => {\n      this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onLoadingFailedEvent(params);\n    }], ['Fetch.requestPaused', event => {\n      this.#getOrCreateNetworkRequest(\n      // CDP quirk if the Network domain is not present this is undefined\n      event.networkId ?? event.requestId, cdpTarget).onRequestPaused(event);\n    }], ['Fetch.authRequired', event => {\n      let request = this.getRequestByFetchId(event.requestId);\n      if (!request) {\n        request = this.#getOrCreateNetworkRequest(event.requestId, cdpTarget);\n      }\n      request.onAuthRequired(event);\n    }]];\n    for (const [event, listener] of listeners) {\n      cdpClient.on(event, listener);\n    }\n  }\n  getInterceptionStages(browsingContextId) {\n    const stages = {\n      request: false,\n      response: false,\n      auth: false\n    };\n    for (const intercept of this.#intercepts.values()) {\n      if (intercept.contexts && !intercept.contexts.includes(browsingContextId)) {\n        continue;\n      }\n      stages.request ||= intercept.phases.includes(\"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */);\n      stages.response ||= intercept.phases.includes(\"responseStarted\" /* Network.InterceptPhase.ResponseStarted */);\n      stages.auth ||= intercept.phases.includes(\"authRequired\" /* Network.InterceptPhase.AuthRequired */);\n    }\n    return stages;\n  }\n  getInterceptsForPhase(request, phase) {\n    if (request.url === NetworkRequest_js_1.NetworkRequest.unknownParameter) {\n      return new Set();\n    }\n    const intercepts = new Set();\n    for (const [interceptId, intercept] of this.#intercepts.entries()) {\n      if (!intercept.phases.includes(phase) || intercept.contexts && !intercept.contexts.includes(request.cdpTarget.topLevelId)) {\n        continue;\n      }\n      if (intercept.urlPatterns.length === 0) {\n        intercepts.add(interceptId);\n        continue;\n      }\n      for (const pattern of intercept.urlPatterns) {\n        if ((0, NetworkUtils_js_1.matchUrlPattern)(pattern, request.url)) {\n          intercepts.add(interceptId);\n          break;\n        }\n      }\n    }\n    return intercepts;\n  }\n  disposeRequestMap(sessionId) {\n    for (const request of this.#requests.values()) {\n      if (request.cdpClient.sessionId === sessionId) {\n        this.#requests.delete(request.id);\n      }\n    }\n  }\n  /**\n   * Adds the given entry to the intercept map.\n   * URL patterns are assumed to be parsed.\n   *\n   * @return The intercept ID.\n   */\n  addIntercept(value) {\n    const interceptId = (0, uuid_js_1.uuidv4)();\n    this.#intercepts.set(interceptId, value);\n    return interceptId;\n  }\n  /**\n   * Removes the given intercept from the intercept map.\n   * Throws NoSuchInterceptException if the intercept does not exist.\n   */\n  removeIntercept(intercept) {\n    if (!this.#intercepts.has(intercept)) {\n      throw new protocol_js_1.NoSuchInterceptException(`Intercept '${intercept}' does not exist.`);\n    }\n    this.#intercepts.delete(intercept);\n  }\n  getRequestById(id) {\n    return this.#requests.get(id);\n  }\n  getRequestByFetchId(fetchId) {\n    for (const request of this.#requests.values()) {\n      if (request.fetchId === fetchId) {\n        return request;\n      }\n    }\n    return;\n  }\n  addRequest(request) {\n    this.#requests.set(request.id, request);\n  }\n  deleteRequest(id) {\n    this.#requests.delete(id);\n  }\n  /**\n   * Gets the virtual navigation ID for the given navigable ID.\n   */\n  getVirtualNavigationId(contextId) {\n    if (contextId === undefined) {\n      return null;\n    }\n    return this.#browsingContextStorage.findContext(contextId)?.virtualNavigationId ?? null;\n  }\n}\nexports.NetworkStorage = NetworkStorage;","map":{"version":3,"names":["protocol_js_1","require","uuid_js_1","NetworkRequest_js_1","NetworkUtils_js_1","NetworkStorage","browsingContextStorage","eventManager","logger","requests","Map","intercepts","constructor","browserClient","on","sessionId","disposeRequestMap","getOrCreateNetworkRequest","#getOrCreateNetworkRequest","id","cdpTarget","redirectCount","request","getRequestById","NetworkRequest","addRequest","onCdpTargetCreated","cdpClient","listeners","params","requestId","isRedirecting","handleRedirect","deleteRequest","onRequestWillBeSentEvent","onRequestWillBeSentExtraInfoEvent","onResponseReceivedEvent","onResponseReceivedExtraInfoEvent","onServedFromCache","onLoadingFailedEvent","event","networkId","onRequestPaused","getRequestByFetchId","onAuthRequired","listener","getInterceptionStages","browsingContextId","stages","response","auth","intercept","values","contexts","includes","phases","getInterceptsForPhase","phase","url","unknownParameter","Set","interceptId","entries","topLevelId","urlPatterns","length","add","pattern","matchUrlPattern","delete","addIntercept","value","uuidv4","set","removeIntercept","has","NoSuchInterceptException","get","fetchId","getVirtualNavigationId","contextId","undefined","findContext","virtualNavigationId","exports"],"sources":["../../../../../src/bidiMapper/modules/network/NetworkStorage.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}