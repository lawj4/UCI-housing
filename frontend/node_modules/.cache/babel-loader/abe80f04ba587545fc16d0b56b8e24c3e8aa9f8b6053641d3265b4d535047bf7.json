{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareVersions = exports.resolveSystemExecutablePath = exports.resolveBuildId = exports.getLastKnownGoodReleaseForBuild = exports.getLastKnownGoodReleaseForMilestone = exports.getLastKnownGoodReleaseForChannel = exports.relativeExecutablePath = exports.resolveDownloadPath = exports.resolveDownloadUrl = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst semver_1 = __importDefault(require(\"semver\"));\nconst httpUtil_js_1 = require(\"../httpUtil.js\");\nconst types_js_1 = require(\"./types.js\");\nfunction folder(platform) {\n  switch (platform) {\n    case types_js_1.BrowserPlatform.LINUX:\n      return 'linux64';\n    case types_js_1.BrowserPlatform.MAC_ARM:\n      return 'mac-arm64';\n    case types_js_1.BrowserPlatform.MAC:\n      return 'mac-x64';\n    case types_js_1.BrowserPlatform.WIN32:\n      return 'win32';\n    case types_js_1.BrowserPlatform.WIN64:\n      return 'win64';\n  }\n}\nfunction resolveDownloadUrl(platform, buildId, baseUrl = 'https://storage.googleapis.com/chrome-for-testing-public') {\n  return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexports.resolveDownloadUrl = resolveDownloadUrl;\nfunction resolveDownloadPath(platform, buildId) {\n  return [buildId, folder(platform), `chrome-${folder(platform)}.zip`];\n}\nexports.resolveDownloadPath = resolveDownloadPath;\nfunction relativeExecutablePath(platform, _buildId) {\n  switch (platform) {\n    case types_js_1.BrowserPlatform.MAC:\n    case types_js_1.BrowserPlatform.MAC_ARM:\n      return path_1.default.join('chrome-' + folder(platform), 'Google Chrome for Testing.app', 'Contents', 'MacOS', 'Google Chrome for Testing');\n    case types_js_1.BrowserPlatform.LINUX:\n      return path_1.default.join('chrome-linux64', 'chrome');\n    case types_js_1.BrowserPlatform.WIN32:\n    case types_js_1.BrowserPlatform.WIN64:\n      return path_1.default.join('chrome-' + folder(platform), 'chrome.exe');\n  }\n}\nexports.relativeExecutablePath = relativeExecutablePath;\nasync function getLastKnownGoodReleaseForChannel(channel) {\n  const data = await (0, httpUtil_js_1.getJSON)(new URL('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json'));\n  for (const channel of Object.keys(data.channels)) {\n    data.channels[channel.toLowerCase()] = data.channels[channel];\n    delete data.channels[channel];\n  }\n  return data.channels[channel];\n}\nexports.getLastKnownGoodReleaseForChannel = getLastKnownGoodReleaseForChannel;\nasync function getLastKnownGoodReleaseForMilestone(milestone) {\n  const data = await (0, httpUtil_js_1.getJSON)(new URL('https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'));\n  return data.milestones[milestone];\n}\nexports.getLastKnownGoodReleaseForMilestone = getLastKnownGoodReleaseForMilestone;\nasync function getLastKnownGoodReleaseForBuild(\n/**\n * @example `112.0.23`,\n */\nbuildPrefix) {\n  const data = await (0, httpUtil_js_1.getJSON)(new URL('https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build.json'));\n  return data.builds[buildPrefix];\n}\nexports.getLastKnownGoodReleaseForBuild = getLastKnownGoodReleaseForBuild;\nasync function resolveBuildId(channel) {\n  if (Object.values(types_js_1.ChromeReleaseChannel).includes(channel)) {\n    return (await getLastKnownGoodReleaseForChannel(channel)).version;\n  }\n  if (channel.match(/^\\d+$/)) {\n    // Potentially a milestone.\n    return (await getLastKnownGoodReleaseForMilestone(channel))?.version;\n  }\n  if (channel.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    // Potentially a build prefix without the patch version.\n    return (await getLastKnownGoodReleaseForBuild(channel))?.version;\n  }\n  return;\n}\nexports.resolveBuildId = resolveBuildId;\nfunction resolveSystemExecutablePath(platform, channel) {\n  switch (platform) {\n    case types_js_1.BrowserPlatform.WIN64:\n    case types_js_1.BrowserPlatform.WIN32:\n      switch (channel) {\n        case types_js_1.ChromeReleaseChannel.STABLE:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;\n        case types_js_1.ChromeReleaseChannel.BETA:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Beta\\\\Application\\\\chrome.exe`;\n        case types_js_1.ChromeReleaseChannel.CANARY:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe`;\n        case types_js_1.ChromeReleaseChannel.DEV:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Dev\\\\Application\\\\chrome.exe`;\n      }\n    case types_js_1.BrowserPlatform.MAC_ARM:\n    case types_js_1.BrowserPlatform.MAC:\n      switch (channel) {\n        case types_js_1.ChromeReleaseChannel.STABLE:\n          return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n        case types_js_1.ChromeReleaseChannel.BETA:\n          return '/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta';\n        case types_js_1.ChromeReleaseChannel.CANARY:\n          return '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary';\n        case types_js_1.ChromeReleaseChannel.DEV:\n          return '/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev';\n      }\n    case types_js_1.BrowserPlatform.LINUX:\n      switch (channel) {\n        case types_js_1.ChromeReleaseChannel.STABLE:\n          return '/opt/google/chrome/chrome';\n        case types_js_1.ChromeReleaseChannel.BETA:\n          return '/opt/google/chrome-beta/chrome';\n        case types_js_1.ChromeReleaseChannel.DEV:\n          return '/opt/google/chrome-unstable/chrome';\n      }\n  }\n  throw new Error(`Unable to detect browser executable path for '${channel}' on ${platform}.`);\n}\nexports.resolveSystemExecutablePath = resolveSystemExecutablePath;\nfunction compareVersions(a, b) {\n  if (!semver_1.default.valid(a)) {\n    throw new Error(`Version ${a} is not a valid semver version`);\n  }\n  if (!semver_1.default.valid(b)) {\n    throw new Error(`Version ${b} is not a valid semver version`);\n  }\n  if (semver_1.default.gt(a, b)) {\n    return 1;\n  } else if (semver_1.default.lt(a, b)) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\nexports.compareVersions = compareVersions;","map":{"version":3,"names":["path_1","__importDefault","require","semver_1","httpUtil_js_1","types_js_1","folder","platform","BrowserPlatform","LINUX","MAC_ARM","MAC","WIN32","WIN64","resolveDownloadUrl","buildId","baseUrl","resolveDownloadPath","join","exports","relativeExecutablePath","_buildId","default","getLastKnownGoodReleaseForChannel","channel","data","getJSON","URL","Object","keys","channels","toLowerCase","getLastKnownGoodReleaseForMilestone","milestone","milestones","getLastKnownGoodReleaseForBuild","buildPrefix","builds","resolveBuildId","values","ChromeReleaseChannel","includes","version","match","resolveSystemExecutablePath","STABLE","process","env","BETA","CANARY","DEV","Error","compareVersions","a","b","valid","gt","lt"],"sources":["/Users/lawj4/webDevelopment/node_modules/@puppeteer/browsers/src/browser-data/chrome.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport path from 'path';\n\nimport semver from 'semver';\n\nimport {getJSON} from '../httpUtil.js';\n\nimport {BrowserPlatform, ChromeReleaseChannel} from './types.js';\n\nfunction folder(platform: BrowserPlatform): string {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'linux64';\n    case BrowserPlatform.MAC_ARM:\n      return 'mac-arm64';\n    case BrowserPlatform.MAC:\n      return 'mac-x64';\n    case BrowserPlatform.WIN32:\n      return 'win32';\n    case BrowserPlatform.WIN64:\n      return 'win64';\n  }\n}\n\nexport function resolveDownloadUrl(\n  platform: BrowserPlatform,\n  buildId: string,\n  baseUrl = 'https://storage.googleapis.com/chrome-for-testing-public'\n): string {\n  return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\n\nexport function resolveDownloadPath(\n  platform: BrowserPlatform,\n  buildId: string\n): string[] {\n  return [buildId, folder(platform), `chrome-${folder(platform)}.zip`];\n}\n\nexport function relativeExecutablePath(\n  platform: BrowserPlatform,\n  _buildId: string\n): string {\n  switch (platform) {\n    case BrowserPlatform.MAC:\n    case BrowserPlatform.MAC_ARM:\n      return path.join(\n        'chrome-' + folder(platform),\n        'Google Chrome for Testing.app',\n        'Contents',\n        'MacOS',\n        'Google Chrome for Testing'\n      );\n    case BrowserPlatform.LINUX:\n      return path.join('chrome-linux64', 'chrome');\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      return path.join('chrome-' + folder(platform), 'chrome.exe');\n  }\n}\n\nexport async function getLastKnownGoodReleaseForChannel(\n  channel: ChromeReleaseChannel\n): Promise<{version: string; revision: string}> {\n  const data = (await getJSON(\n    new URL(\n      'https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json'\n    )\n  )) as {\n    channels: Record<string, {version: string}>;\n  };\n\n  for (const channel of Object.keys(data.channels)) {\n    data.channels[channel.toLowerCase()] = data.channels[channel]!;\n    delete data.channels[channel];\n  }\n\n  return (\n    data as {\n      channels: {\n        [channel in ChromeReleaseChannel]: {version: string; revision: string};\n      };\n    }\n  ).channels[channel];\n}\n\nexport async function getLastKnownGoodReleaseForMilestone(\n  milestone: string\n): Promise<{version: string; revision: string} | undefined> {\n  const data = (await getJSON(\n    new URL(\n      'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    )\n  )) as {\n    milestones: Record<string, {version: string; revision: string}>;\n  };\n  return data.milestones[milestone] as\n    | {version: string; revision: string}\n    | undefined;\n}\n\nexport async function getLastKnownGoodReleaseForBuild(\n  /**\n   * @example `112.0.23`,\n   */\n  buildPrefix: string\n): Promise<{version: string; revision: string} | undefined> {\n  const data = (await getJSON(\n    new URL(\n      'https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build.json'\n    )\n  )) as {\n    builds: Record<string, {version: string; revision: string}>;\n  };\n  return data.builds[buildPrefix] as\n    | {version: string; revision: string}\n    | undefined;\n}\n\nexport async function resolveBuildId(\n  channel: ChromeReleaseChannel\n): Promise<string>;\nexport async function resolveBuildId(\n  channel: string\n): Promise<string | undefined>;\nexport async function resolveBuildId(\n  channel: ChromeReleaseChannel | string\n): Promise<string | undefined> {\n  if (\n    Object.values(ChromeReleaseChannel).includes(\n      channel as ChromeReleaseChannel\n    )\n  ) {\n    return (\n      await getLastKnownGoodReleaseForChannel(channel as ChromeReleaseChannel)\n    ).version;\n  }\n  if (channel.match(/^\\d+$/)) {\n    // Potentially a milestone.\n    return (await getLastKnownGoodReleaseForMilestone(channel))?.version;\n  }\n  if (channel.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    // Potentially a build prefix without the patch version.\n    return (await getLastKnownGoodReleaseForBuild(channel))?.version;\n  }\n  return;\n}\n\nexport function resolveSystemExecutablePath(\n  platform: BrowserPlatform,\n  channel: ChromeReleaseChannel\n): string {\n  switch (platform) {\n    case BrowserPlatform.WIN64:\n    case BrowserPlatform.WIN32:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.BETA:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Beta\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.CANARY:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.DEV:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Dev\\\\Application\\\\chrome.exe`;\n      }\n    case BrowserPlatform.MAC_ARM:\n    case BrowserPlatform.MAC:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta';\n        case ChromeReleaseChannel.CANARY:\n          return '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary';\n        case ChromeReleaseChannel.DEV:\n          return '/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev';\n      }\n    case BrowserPlatform.LINUX:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/opt/google/chrome/chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/opt/google/chrome-beta/chrome';\n        case ChromeReleaseChannel.DEV:\n          return '/opt/google/chrome-unstable/chrome';\n      }\n  }\n\n  throw new Error(\n    `Unable to detect browser executable path for '${channel}' on ${platform}.`\n  );\n}\n\nexport function compareVersions(a: string, b: string): number {\n  if (!semver.valid(a)) {\n    throw new Error(`Version ${a} is not a valid semver version`);\n  }\n  if (!semver.valid(b)) {\n    throw new Error(`Version ${b} is not a valid semver version`);\n  }\n  if (semver.gt(a, b)) {\n    return 1;\n  } else if (semver.lt(a, b)) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;AAMA,MAAAA,MAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAF,eAAA,CAAAC,OAAA;AAEA,MAAAE,aAAA,GAAAF,OAAA;AAEA,MAAAG,UAAA,GAAAH,OAAA;AAEA,SAASI,MAAMA,CAACC,QAAyB;EACvC,QAAQA,QAAQ;IACd,KAAKF,UAAA,CAAAG,eAAe,CAACC,KAAK;MACxB,OAAO,SAAS;IAClB,KAAKJ,UAAA,CAAAG,eAAe,CAACE,OAAO;MAC1B,OAAO,WAAW;IACpB,KAAKL,UAAA,CAAAG,eAAe,CAACG,GAAG;MACtB,OAAO,SAAS;IAClB,KAAKN,UAAA,CAAAG,eAAe,CAACI,KAAK;MACxB,OAAO,OAAO;IAChB,KAAKP,UAAA,CAAAG,eAAe,CAACK,KAAK;MACxB,OAAO,OAAO;EAClB;AACF;AAEA,SAAgBC,kBAAkBA,CAChCP,QAAyB,EACzBQ,OAAe,EACfC,OAAO,GAAG,0DAA0D;EAEpE,OAAO,GAAGA,OAAO,IAAIC,mBAAmB,CAACV,QAAQ,EAAEQ,OAAO,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC,EAAE;AACzE;AANAC,OAAA,CAAAL,kBAAA,GAAAA,kBAAA;AAQA,SAAgBG,mBAAmBA,CACjCV,QAAyB,EACzBQ,OAAe;EAEf,OAAO,CAACA,OAAO,EAAET,MAAM,CAACC,QAAQ,CAAC,EAAE,UAAUD,MAAM,CAACC,QAAQ,CAAC,MAAM,CAAC;AACtE;AALAY,OAAA,CAAAF,mBAAA,GAAAA,mBAAA;AAOA,SAAgBG,sBAAsBA,CACpCb,QAAyB,EACzBc,QAAgB;EAEhB,QAAQd,QAAQ;IACd,KAAKF,UAAA,CAAAG,eAAe,CAACG,GAAG;IACxB,KAAKN,UAAA,CAAAG,eAAe,CAACE,OAAO;MAC1B,OAAOV,MAAA,CAAAsB,OAAI,CAACJ,IAAI,CACd,SAAS,GAAGZ,MAAM,CAACC,QAAQ,CAAC,EAC5B,+BAA+B,EAC/B,UAAU,EACV,OAAO,EACP,2BAA2B,CAC5B;IACH,KAAKF,UAAA,CAAAG,eAAe,CAACC,KAAK;MACxB,OAAOT,MAAA,CAAAsB,OAAI,CAACJ,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IAC9C,KAAKb,UAAA,CAAAG,eAAe,CAACI,KAAK;IAC1B,KAAKP,UAAA,CAAAG,eAAe,CAACK,KAAK;MACxB,OAAOb,MAAA,CAAAsB,OAAI,CAACJ,IAAI,CAAC,SAAS,GAAGZ,MAAM,CAACC,QAAQ,CAAC,EAAE,YAAY,CAAC;EAChE;AACF;AApBAY,OAAA,CAAAC,sBAAA,GAAAA,sBAAA;AAsBO,eAAeG,iCAAiCA,CACrDC,OAA6B;EAE7B,MAAMC,IAAI,GAAI,MAAM,IAAArB,aAAA,CAAAsB,OAAO,EACzB,IAAIC,GAAG,CACL,qFAAqF,CACtF,CAGF;EAED,KAAK,MAAMH,OAAO,IAAII,MAAM,CAACC,IAAI,CAACJ,IAAI,CAACK,QAAQ,CAAC,EAAE;IAChDL,IAAI,CAACK,QAAQ,CAACN,OAAO,CAACO,WAAW,EAAE,CAAC,GAAGN,IAAI,CAACK,QAAQ,CAACN,OAAO,CAAE;IAC9D,OAAOC,IAAI,CAACK,QAAQ,CAACN,OAAO,CAAC;EAC/B;EAEA,OACEC,IAKD,CAACK,QAAQ,CAACN,OAAO,CAAC;AACrB;AAvBAL,OAAA,CAAAI,iCAAA,GAAAA,iCAAA;AAyBO,eAAeS,mCAAmCA,CACvDC,SAAiB;EAEjB,MAAMR,IAAI,GAAI,MAAM,IAAArB,aAAA,CAAAsB,OAAO,EACzB,IAAIC,GAAG,CACL,0FAA0F,CAC3F,CAGF;EACD,OAAOF,IAAI,CAACS,UAAU,CAACD,SAAS,CAEnB;AACf;AAbAd,OAAA,CAAAa,mCAAA,GAAAA,mCAAA;AAeO,eAAeG,+BAA+BA;AACnD;;;AAGAC,WAAmB;EAEnB,MAAMX,IAAI,GAAI,MAAM,IAAArB,aAAA,CAAAsB,OAAO,EACzB,IAAIC,GAAG,CACL,4FAA4F,CAC7F,CAGF;EACD,OAAOF,IAAI,CAACY,MAAM,CAACD,WAAW,CAEjB;AACf;AAhBAjB,OAAA,CAAAgB,+BAAA,GAAAA,+BAAA;AAwBO,eAAeG,cAAcA,CAClCd,OAAsC;EAEtC,IACEI,MAAM,CAACW,MAAM,CAAClC,UAAA,CAAAmC,oBAAoB,CAAC,CAACC,QAAQ,CAC1CjB,OAA+B,CAChC,EACD;IACA,OAAO,CACL,MAAMD,iCAAiC,CAACC,OAA+B,CAAC,EACxEkB,OAAO;EACX;EACA,IAAIlB,OAAO,CAACmB,KAAK,CAAC,OAAO,CAAC,EAAE;IAC1B;IACA,OAAO,CAAC,MAAMX,mCAAmC,CAACR,OAAO,CAAC,GAAGkB,OAAO;EACtE;EACA,IAAIlB,OAAO,CAACmB,KAAK,CAAC,iBAAiB,CAAC,EAAE;IACpC;IACA,OAAO,CAAC,MAAMR,+BAA+B,CAACX,OAAO,CAAC,GAAGkB,OAAO;EAClE;EACA;AACF;AArBAvB,OAAA,CAAAmB,cAAA,GAAAA,cAAA;AAuBA,SAAgBM,2BAA2BA,CACzCrC,QAAyB,EACzBiB,OAA6B;EAE7B,QAAQjB,QAAQ;IACd,KAAKF,UAAA,CAAAG,eAAe,CAACK,KAAK;IAC1B,KAAKR,UAAA,CAAAG,eAAe,CAACI,KAAK;MACxB,QAAQY,OAAO;QACb,KAAKnB,UAAA,CAAAmC,oBAAoB,CAACK,MAAM;UAC9B,OAAO,GAAGC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,2CAA2C;QAClF,KAAK1C,UAAA,CAAAmC,oBAAoB,CAACQ,IAAI;UAC5B,OAAO,GAAGF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,gDAAgD;QACvF,KAAK1C,UAAA,CAAAmC,oBAAoB,CAACS,MAAM;UAC9B,OAAO,GAAGH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,+CAA+C;QACtF,KAAK1C,UAAA,CAAAmC,oBAAoB,CAACU,GAAG;UAC3B,OAAO,GAAGJ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,+CAA+C;MACxF;IACF,KAAK1C,UAAA,CAAAG,eAAe,CAACE,OAAO;IAC5B,KAAKL,UAAA,CAAAG,eAAe,CAACG,GAAG;MACtB,QAAQa,OAAO;QACb,KAAKnB,UAAA,CAAAmC,oBAAoB,CAACK,MAAM;UAC9B,OAAO,8DAA8D;QACvE,KAAKxC,UAAA,CAAAmC,oBAAoB,CAACQ,IAAI;UAC5B,OAAO,wEAAwE;QACjF,KAAK3C,UAAA,CAAAmC,oBAAoB,CAACS,MAAM;UAC9B,OAAO,4EAA4E;QACrF,KAAK5C,UAAA,CAAAmC,oBAAoB,CAACU,GAAG;UAC3B,OAAO,sEAAsE;MACjF;IACF,KAAK7C,UAAA,CAAAG,eAAe,CAACC,KAAK;MACxB,QAAQe,OAAO;QACb,KAAKnB,UAAA,CAAAmC,oBAAoB,CAACK,MAAM;UAC9B,OAAO,2BAA2B;QACpC,KAAKxC,UAAA,CAAAmC,oBAAoB,CAACQ,IAAI;UAC5B,OAAO,gCAAgC;QACzC,KAAK3C,UAAA,CAAAmC,oBAAoB,CAACU,GAAG;UAC3B,OAAO,oCAAoC;MAC/C;EACJ;EAEA,MAAM,IAAIC,KAAK,CACb,iDAAiD3B,OAAO,QAAQjB,QAAQ,GAAG,CAC5E;AACH;AA3CAY,OAAA,CAAAyB,2BAAA,GAAAA,2BAAA;AA6CA,SAAgBQ,eAAeA,CAACC,CAAS,EAAEC,CAAS;EAClD,IAAI,CAACnD,QAAA,CAAAmB,OAAM,CAACiC,KAAK,CAACF,CAAC,CAAC,EAAE;IACpB,MAAM,IAAIF,KAAK,CAAC,WAAWE,CAAC,gCAAgC,CAAC;EAC/D;EACA,IAAI,CAAClD,QAAA,CAAAmB,OAAM,CAACiC,KAAK,CAACD,CAAC,CAAC,EAAE;IACpB,MAAM,IAAIH,KAAK,CAAC,WAAWG,CAAC,gCAAgC,CAAC;EAC/D;EACA,IAAInD,QAAA,CAAAmB,OAAM,CAACkC,EAAE,CAACH,CAAC,EAAEC,CAAC,CAAC,EAAE;IACnB,OAAO,CAAC;EACV,CAAC,MAAM,IAAInD,QAAA,CAAAmB,OAAM,CAACmC,EAAE,CAACJ,CAAC,EAAEC,CAAC,CAAC,EAAE;IAC1B,OAAO,CAAC,CAAC;EACX,CAAC,MAAM;IACL,OAAO,CAAC;EACV;AACF;AAdAnC,OAAA,CAAAiC,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}