{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OtherTarget = exports.WorkerTarget = exports.DevToolsTarget = exports.PageTarget = exports.CdpTarget = exports.InitializationStatus = void 0;\nconst Target_js_1 = require(\"../api/Target.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst Deferred_js_1 = require(\"../util/Deferred.js\");\nconst CDPSession_js_1 = require(\"./CDPSession.js\");\nconst Page_js_1 = require(\"./Page.js\");\nconst WebWorker_js_1 = require(\"./WebWorker.js\");\n/**\n * @internal\n */\nvar InitializationStatus;\n(function (InitializationStatus) {\n  InitializationStatus[\"SUCCESS\"] = \"success\";\n  InitializationStatus[\"ABORTED\"] = \"aborted\";\n})(InitializationStatus || (exports.InitializationStatus = InitializationStatus = {}));\n/**\n * @internal\n */\nclass CdpTarget extends Target_js_1.Target {\n  #browserContext;\n  #session;\n  #targetInfo;\n  #targetManager;\n  #sessionFactory;\n  #childTargets = new Set();\n  _initializedDeferred = Deferred_js_1.Deferred.create();\n  _isClosedDeferred = Deferred_js_1.Deferred.create();\n  _targetId;\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n    if (this.#session && this.#session instanceof CDPSession_js_1.CdpCDPSession) {\n      this.#session._setTarget(this);\n    }\n  }\n  async asPage() {\n    const session = this._session();\n    if (!session) {\n      return await this.createCDPSession().then(client => {\n        return Page_js_1.CdpPage._create(client, this, null);\n      });\n    }\n    return await Page_js_1.CdpPage._create(session, this, null);\n  }\n  _subtype() {\n    return this.#targetInfo.subtype;\n  }\n  _session() {\n    return this.#session;\n  }\n  _addChildTarget(target) {\n    this.#childTargets.add(target);\n  }\n  _removeChildTarget(target) {\n    this.#childTargets.delete(target);\n  }\n  _childTargets() {\n    return this.#childTargets;\n  }\n  _sessionFactory() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n  createCDPSession() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false).then(session => {\n      session._setTarget(this);\n      return session;\n    });\n  }\n  url() {\n    return this.#targetInfo.url;\n  }\n  type() {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return Target_js_1.TargetType.PAGE;\n      case 'background_page':\n        return Target_js_1.TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return Target_js_1.TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return Target_js_1.TargetType.SHARED_WORKER;\n      case 'browser':\n        return Target_js_1.TargetType.BROWSER;\n      case 'webview':\n        return Target_js_1.TargetType.WEBVIEW;\n      case 'tab':\n        return Target_js_1.TargetType.TAB;\n      default:\n        return Target_js_1.TargetType.OTHER;\n    }\n  }\n  _targetManager() {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n  _getTargetInfo() {\n    return this.#targetInfo;\n  }\n  browser() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext.browser();\n  }\n  browserContext() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext;\n  }\n  opener() {\n    const {\n      openerId\n    } = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser().targets().find(target => {\n      return target._targetId === openerId;\n    });\n  }\n  _targetInfoChanged(targetInfo) {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n  _initialize() {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n  _isTargetExposed() {\n    return this.type() !== Target_js_1.TargetType.TAB && !this._subtype();\n  }\n  _checkIfInitialized() {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\nexports.CdpTarget = CdpTarget;\n/**\n * @internal\n */\nclass PageTarget extends CdpTarget {\n  #defaultViewport;\n  pagePromise;\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory, defaultViewport) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#defaultViewport = defaultViewport ?? undefined;\n  }\n  _initialize() {\n    this._initializedDeferred.valueOrThrow().then(async result => {\n      if (result === InitializationStatus.ABORTED) {\n        return;\n      }\n      const opener = this.opener();\n      if (!(opener instanceof PageTarget)) {\n        return;\n      }\n      if (!opener || !opener.pagePromise || this.type() !== 'page') {\n        return true;\n      }\n      const openerPage = await opener.pagePromise;\n      if (!openerPage.listenerCount(\"popup\" /* PageEvent.Popup */)) {\n        return true;\n      }\n      const popupPage = await this.page();\n      openerPage.emit(\"popup\" /* PageEvent.Popup */, popupPage);\n      return true;\n    }).catch(util_js_1.debugError);\n    this._checkIfInitialized();\n  }\n  async page() {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return Page_js_1.CdpPage._create(client, this, this.#defaultViewport ?? null);\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n  _checkIfInitialized() {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\nexports.PageTarget = PageTarget;\n/**\n * @internal\n */\nclass DevToolsTarget extends PageTarget {}\nexports.DevToolsTarget = DevToolsTarget;\n/**\n * @internal\n */\nclass WorkerTarget extends CdpTarget {\n  #workerPromise;\n  async worker() {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return new WebWorker_js_1.CdpWebWorker(client, this._getTargetInfo().url, this._targetId, this.type(), () => {} /* consoleAPICalled */, () => {} /* exceptionThrown */);\n      });\n    }\n    return await this.#workerPromise;\n  }\n}\nexports.WorkerTarget = WorkerTarget;\n/**\n * @internal\n */\nclass OtherTarget extends CdpTarget {}\nexports.OtherTarget = OtherTarget;","map":{"version":3,"names":["Target_js_1","require","util_js_1","Deferred_js_1","CDPSession_js_1","Page_js_1","WebWorker_js_1","InitializationStatus","exports","CdpTarget","Target","browserContext","session","targetInfo","targetManager","sessionFactory","childTargets","Set","_initializedDeferred","Deferred","create","_isClosedDeferred","_targetId","constructor","targetId","CdpCDPSession","_setTarget","asPage","_session","createCDPSession","then","client","CdpPage","_create","_subtype","subtype","_addChildTarget","target","add","_removeChildTarget","delete","_childTargets","_sessionFactory","Error","url","type","TargetType","PAGE","BACKGROUND_PAGE","SERVICE_WORKER","SHARED_WORKER","BROWSER","WEBVIEW","TAB","OTHER","_targetManager","_getTargetInfo","browser","opener","openerId","targets","find","_targetInfoChanged","_checkIfInitialized","_initialize","resolve","SUCCESS","_isTargetExposed","resolved","PageTarget","defaultViewport","pagePromise","undefined","valueOrThrow","result","ABORTED","openerPage","listenerCount","popupPage","page","emit","catch","debugError","Promise","DevToolsTarget","WorkerTarget","workerPromise","worker","CdpWebWorker","OtherTarget"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/src/cdp/Target.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserContext} from '../api/BrowserContext.js';\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {PageEvent, type Page} from '../api/Page.js';\nimport {Target, TargetType} from '../api/Target.js';\nimport {debugError} from '../common/util.js';\nimport type {Viewport} from '../common/Viewport.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport {CdpCDPSession} from './CDPSession.js';\nimport {CdpPage} from './Page.js';\nimport type {TargetManager} from './TargetManager.js';\nimport {CdpWebWorker} from './WebWorker.js';\n\n/**\n * @internal\n */\nexport enum InitializationStatus {\n  SUCCESS = 'success',\n  ABORTED = 'aborted',\n}\n\n/**\n * @internal\n */\nexport class CdpTarget extends Target {\n  #browserContext?: BrowserContext;\n  #session?: CDPSession;\n  #targetInfo: Protocol.Target.TargetInfo;\n  #targetManager?: TargetManager;\n  #sessionFactory:\n    | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n    | undefined;\n  #childTargets = new Set<CdpTarget>();\n  _initializedDeferred = Deferred.create<InitializationStatus>();\n  _isClosedDeferred = Deferred.create<void>();\n  _targetId: string;\n\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext | undefined,\n    targetManager: TargetManager | undefined,\n    sessionFactory:\n      | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n      | undefined\n  ) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n    if (this.#session && this.#session instanceof CdpCDPSession) {\n      this.#session._setTarget(this);\n    }\n  }\n\n  override async asPage(): Promise<Page> {\n    const session = this._session();\n    if (!session) {\n      return await this.createCDPSession().then(client => {\n        return CdpPage._create(client, this, null);\n      });\n    }\n    return await CdpPage._create(session, this, null);\n  }\n\n  _subtype(): string | undefined {\n    return this.#targetInfo.subtype;\n  }\n\n  _session(): CDPSession | undefined {\n    return this.#session;\n  }\n\n  _addChildTarget(target: CdpTarget): void {\n    this.#childTargets.add(target);\n  }\n\n  _removeChildTarget(target: CdpTarget): void {\n    this.#childTargets.delete(target);\n  }\n\n  _childTargets(): ReadonlySet<CdpTarget> {\n    return this.#childTargets;\n  }\n\n  protected _sessionFactory(): (\n    isAutoAttachEmulated: boolean\n  ) => Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n\n  override createCDPSession(): Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false).then(session => {\n      (session as CdpCDPSession)._setTarget(this);\n      return session;\n    });\n  }\n\n  override url(): string {\n    return this.#targetInfo.url;\n  }\n\n  override type(): TargetType {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return TargetType.PAGE;\n      case 'background_page':\n        return TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return TargetType.SHARED_WORKER;\n      case 'browser':\n        return TargetType.BROWSER;\n      case 'webview':\n        return TargetType.WEBVIEW;\n      case 'tab':\n        return TargetType.TAB;\n      default:\n        return TargetType.OTHER;\n    }\n  }\n\n  _targetManager(): TargetManager {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n\n  _getTargetInfo(): Protocol.Target.TargetInfo {\n    return this.#targetInfo;\n  }\n\n  override browser(): Browser {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext.browser();\n  }\n\n  override browserContext(): BrowserContext {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext;\n  }\n\n  override opener(): Target | undefined {\n    const {openerId} = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser()\n      .targets()\n      .find(target => {\n        return (target as CdpTarget)._targetId === openerId;\n      });\n  }\n\n  _targetInfoChanged(targetInfo: Protocol.Target.TargetInfo): void {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n\n  _initialize(): void {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n\n  _isTargetExposed(): boolean {\n    return this.type() !== TargetType.TAB && !this._subtype();\n  }\n\n  protected _checkIfInitialized(): void {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class PageTarget extends CdpTarget {\n  #defaultViewport?: Viewport;\n  protected pagePromise?: Promise<Page>;\n\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext,\n    targetManager: TargetManager,\n    sessionFactory: (isAutoAttachEmulated: boolean) => Promise<CDPSession>,\n    defaultViewport: Viewport | null\n  ) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#defaultViewport = defaultViewport ?? undefined;\n  }\n\n  override _initialize(): void {\n    this._initializedDeferred\n      .valueOrThrow()\n      .then(async result => {\n        if (result === InitializationStatus.ABORTED) {\n          return;\n        }\n        const opener = this.opener();\n        if (!(opener instanceof PageTarget)) {\n          return;\n        }\n        if (!opener || !opener.pagePromise || this.type() !== 'page') {\n          return true;\n        }\n        const openerPage = await opener.pagePromise;\n        if (!openerPage.listenerCount(PageEvent.Popup)) {\n          return true;\n        }\n        const popupPage = await this.page();\n        openerPage.emit(PageEvent.Popup, popupPage);\n        return true;\n      })\n      .catch(debugError);\n    this._checkIfInitialized();\n  }\n\n  override async page(): Promise<Page | null> {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return CdpPage._create(client, this, this.#defaultViewport ?? null);\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n\n  override _checkIfInitialized(): void {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class DevToolsTarget extends PageTarget {}\n\n/**\n * @internal\n */\nexport class WorkerTarget extends CdpTarget {\n  #workerPromise?: Promise<CdpWebWorker>;\n\n  override async worker(): Promise<CdpWebWorker | null> {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return new CdpWebWorker(\n          client,\n          this._getTargetInfo().url,\n          this._targetId,\n          this.type(),\n          () => {} /* consoleAPICalled */,\n          () => {} /* exceptionThrown */\n        );\n      });\n    }\n    return await this.#workerPromise;\n  }\n}\n\n/**\n * @internal\n */\nexport class OtherTarget extends CdpTarget {}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}