{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __setFunctionName = this && this.__setFunctionName || function (f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", {\n    configurable: true,\n    value: prefix ? \"\".concat(prefix, \" \", name) : name\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScreenRecorder = void 0;\nconst child_process_1 = require(\"child_process\");\nconst stream_1 = require(\"stream\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst rxjs_js_1 = require(\"../../third_party/rxjs/rxjs.js\");\nconst CDPSession_js_1 = require(\"../api/CDPSession.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst decorators_js_1 = require(\"../util/decorators.js\");\nconst disposable_js_1 = require(\"../util/disposable.js\");\nconst CRF_VALUE = 30;\nconst DEFAULT_FPS = 30;\nconst debugFfmpeg = (0, debug_1.default)('puppeteer:ffmpeg');\n/**\n * @public\n */\nlet ScreenRecorder = (() => {\n  let _classSuper = stream_1.PassThrough;\n  let _instanceExtraInitializers = [];\n  let _private_writeFrame_decorators;\n  let _private_writeFrame_descriptor;\n  let _stop_decorators;\n  return class ScreenRecorder extends _classSuper {\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n      __esDecorate(this, _private_writeFrame_descriptor = {\n        value: __setFunctionName(async function (buffer) {\n          const error = await new Promise(resolve => {\n            this.#process.stdin.write(buffer, resolve);\n          });\n          if (error) {\n            console.log(`ffmpeg failed to write: ${error.message}.`);\n          }\n        }, \"#writeFrame\")\n      }, _private_writeFrame_decorators, {\n        kind: \"method\",\n        name: \"#writeFrame\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #writeFrame in obj,\n          get: obj => obj.#writeFrame\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _stop_decorators, {\n        kind: \"method\",\n        name: \"stop\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"stop\" in obj,\n          get: obj => obj.stop\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    }\n    #page = __runInitializers(this, _instanceExtraInitializers);\n    #process;\n    #controller = new AbortController();\n    #lastFrame;\n    /**\n     * @internal\n     */\n    constructor(page, width, height, {\n      speed,\n      scale,\n      crop,\n      format,\n      path\n    } = {}) {\n      super({\n        allowHalfOpen: false\n      });\n      path ??= 'ffmpeg';\n      // Tests if `ffmpeg` exists.\n      const {\n        error\n      } = (0, child_process_1.spawnSync)(path);\n      if (error) {\n        throw error;\n      }\n      this.#process = (0, child_process_1.spawn)(path,\n      // See https://trac.ffmpeg.org/wiki/Encode/VP9 for more information on flags.\n      [['-loglevel', 'error'],\n      // Reduces general buffering.\n      ['-avioflags', 'direct'],\n      // Reduces initial buffering while analyzing input fps and other stats.\n      ['-fpsprobesize', '0', '-probesize', '32', '-analyzeduration', '0', '-fflags', 'nobuffer'],\n      // Forces input to be read from standard input, and forces png input\n      // image format.\n      ['-f', 'image2pipe', '-c:v', 'png', '-i', 'pipe:0'],\n      // Overwrite output and no audio.\n      ['-y', '-an'],\n      // This drastically reduces stalling when cpu is overbooked. By default\n      // VP9 tries to use all available threads?\n      ['-threads', '1'],\n      // Specifies the frame rate we are giving ffmpeg.\n      ['-framerate', `${DEFAULT_FPS}`],\n      // Specifies the encoding and format we are using.\n      this.#getFormatArgs(format ?? 'webm'),\n      // Disable bitrate.\n      ['-b:v', '0'],\n      // Filters to ensure the images are piped correctly.\n      ['-vf', `${speed ? `setpts=${1 / speed}*PTS,` : ''}crop='min(${width},iw):min(${height},ih):0:0',pad=${width}:${height}:0:0${crop ? `,crop=${crop.width}:${crop.height}:${crop.x}:${crop.y}` : ''}${scale ? `,scale=iw*${scale}:-1` : ''}`], 'pipe:1'].flat(), {\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n      this.#process.stdout.pipe(this);\n      this.#process.stderr.on('data', data => {\n        debugFfmpeg(data.toString('utf8'));\n      });\n      this.#page = page;\n      const {\n        client\n      } = this.#page.mainFrame();\n      client.once(CDPSession_js_1.CDPSessionEvent.Disconnected, () => {\n        void this.stop().catch(util_js_1.debugError);\n      });\n      this.#lastFrame = (0, rxjs_js_1.lastValueFrom)((0, util_js_1.fromEmitterEvent)(client, 'Page.screencastFrame').pipe((0, rxjs_js_1.tap)(event => {\n        void client.send('Page.screencastFrameAck', {\n          sessionId: event.sessionId\n        });\n      }), (0, rxjs_js_1.filter)(event => {\n        return event.metadata.timestamp !== undefined;\n      }), (0, rxjs_js_1.map)(event => {\n        return {\n          buffer: Buffer.from(event.data, 'base64'),\n          timestamp: event.metadata.timestamp\n        };\n      }), (0, rxjs_js_1.bufferCount)(2, 1), (0, rxjs_js_1.concatMap)(([{\n        timestamp: previousTimestamp,\n        buffer\n      }, {\n        timestamp\n      }]) => {\n        return (0, rxjs_js_1.from)(Array(Math.round(DEFAULT_FPS * Math.max(timestamp - previousTimestamp, 0))).fill(buffer));\n      }), (0, rxjs_js_1.map)(buffer => {\n        void this.#writeFrame(buffer);\n        return [buffer, performance.now()];\n      }), (0, rxjs_js_1.takeUntil)((0, rxjs_js_1.fromEvent)(this.#controller.signal, 'abort'))), {\n        defaultValue: [Buffer.from([]), performance.now()]\n      });\n    }\n    #getFormatArgs(format) {\n      switch (format) {\n        case 'webm':\n          return [\n          // Sets the codec to use.\n          ['-c:v', 'vp9'],\n          // Sets the format\n          ['-f', 'webm'],\n          // Sets the quality. Lower the better.\n          ['-crf', `${CRF_VALUE}`],\n          // Sets the quality and how efficient the compression will be.\n          ['-deadline', 'realtime', '-cpu-used', '8']].flat();\n        case 'gif':\n          return [\n          // Sets the frame rate and uses a custom palette generated from the\n          // input.\n          ['-vf', 'fps=5,split[s0][s1];[s0]palettegen=stats_mode=diff[p];[s1][p]paletteuse'],\n          // Sets the format\n          ['-f', 'gif']].flat();\n      }\n    }\n    get #writeFrame() {\n      return _private_writeFrame_descriptor.value;\n    }\n    /**\n     * Stops the recorder.\n     *\n     * @public\n     */\n    async stop() {\n      if (this.#controller.signal.aborted) {\n        return;\n      }\n      // Stopping the screencast will flush the frames.\n      await this.#page._stopScreencast().catch(util_js_1.debugError);\n      this.#controller.abort();\n      // Repeat the last frame for the remaining frames.\n      const [buffer, timestamp] = await this.#lastFrame;\n      await Promise.all(Array(Math.max(1, Math.round(DEFAULT_FPS * (performance.now() - timestamp) / 1000))).fill(buffer).map(this.#writeFrame.bind(this)));\n      // Close stdin to notify FFmpeg we are done.\n      this.#process.stdin.end();\n      await new Promise(resolve => {\n        this.#process.once('close', resolve);\n      });\n    }\n    /**\n     * @internal\n     */\n    async [(_private_writeFrame_decorators = [(0, decorators_js_1.guarded)()], _stop_decorators = [(0, decorators_js_1.guarded)()], disposable_js_1.asyncDisposeSymbol)]() {\n      await this.stop();\n    }\n  };\n})();\nexports.ScreenRecorder = ScreenRecorder;","map":{"version":3,"names":["child_process_1","require","stream_1","debug_1","__importDefault","rxjs_js_1","CDPSession_js_1","util_js_1","decorators_js_1","disposable_js_1","CRF_VALUE","DEFAULT_FPS","debugFfmpeg","default","ScreenRecorder","PassThrough","_classSuper","__esDecorate","_private_writeFrame_descriptor","value","__setFunctionName","buffer","error","Promise","resolve","process","stdin","write","console","log","message","_private_writeFrame_decorators","kind","name","static","private","access","has","obj","writeFrame","get","metadata","_metadata","_instanceExtraInitializers","_stop_decorators","stop","page","__runInitializers","controller","AbortController","lastFrame","constructor","width","height","speed","scale","crop","format","path","allowHalfOpen","spawnSync","spawn","getFormatArgs","x","y","flat","stdio","stdout","pipe","stderr","on","data","toString","client","mainFrame","once","CDPSessionEvent","Disconnected","catch","debugError","lastValueFrom","fromEmitterEvent","tap","event","send","sessionId","filter","timestamp","undefined","map","Buffer","from","bufferCount","concatMap","previousTimestamp","Array","Math","round","max","fill","performance","now","takeUntil","fromEvent","signal","defaultValue","#getFormatArgs","#writeFrame","aborted","_stopScreencast","abort","all","bind","end","guarded","asyncDisposeSymbol","exports"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/node/ScreenRecorder.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {ChildProcessWithoutNullStreams} from 'child_process';\nimport {spawn, spawnSync} from 'child_process';\nimport {PassThrough} from 'stream';\n\nimport debug from 'debug';\n\nimport type {OperatorFunction} from '../../third_party/rxjs/rxjs.js';\nimport {\n  bufferCount,\n  concatMap,\n  filter,\n  from,\n  fromEvent,\n  lastValueFrom,\n  map,\n  takeUntil,\n  tap,\n} from '../../third_party/rxjs/rxjs.js';\nimport {CDPSessionEvent} from '../api/CDPSession.js';\nimport type {BoundingBox} from '../api/ElementHandle.js';\nimport type {Page} from '../api/Page.js';\nimport {debugError, fromEmitterEvent} from '../common/util.js';\nimport {guarded} from '../util/decorators.js';\nimport {asyncDisposeSymbol} from '../util/disposable.js';\n\nconst CRF_VALUE = 30;\nconst DEFAULT_FPS = 30;\n\nconst debugFfmpeg = debug('puppeteer:ffmpeg');\n\n/**\n * @internal\n */\nexport interface ScreenRecorderOptions {\n  speed?: number;\n  crop?: BoundingBox;\n  format?: 'gif' | 'webm';\n  scale?: number;\n  path?: string;\n}\n\n/**\n * @public\n */\nexport class ScreenRecorder extends PassThrough {\n  #page: Page;\n\n  #process: ChildProcessWithoutNullStreams;\n\n  #controller = new AbortController();\n  #lastFrame: Promise<readonly [Buffer, number]>;\n\n  /**\n   * @internal\n   */\n  constructor(\n    page: Page,\n    width: number,\n    height: number,\n    {speed, scale, crop, format, path}: ScreenRecorderOptions = {}\n  ) {\n    super({allowHalfOpen: false});\n\n    path ??= 'ffmpeg';\n\n    // Tests if `ffmpeg` exists.\n    const {error} = spawnSync(path);\n    if (error) {\n      throw error;\n    }\n\n    this.#process = spawn(\n      path,\n      // See https://trac.ffmpeg.org/wiki/Encode/VP9 for more information on flags.\n      [\n        ['-loglevel', 'error'],\n        // Reduces general buffering.\n        ['-avioflags', 'direct'],\n        // Reduces initial buffering while analyzing input fps and other stats.\n        [\n          '-fpsprobesize',\n          '0',\n          '-probesize',\n          '32',\n          '-analyzeduration',\n          '0',\n          '-fflags',\n          'nobuffer',\n        ],\n        // Forces input to be read from standard input, and forces png input\n        // image format.\n        ['-f', 'image2pipe', '-c:v', 'png', '-i', 'pipe:0'],\n        // Overwrite output and no audio.\n        ['-y', '-an'],\n        // This drastically reduces stalling when cpu is overbooked. By default\n        // VP9 tries to use all available threads?\n        ['-threads', '1'],\n        // Specifies the frame rate we are giving ffmpeg.\n        ['-framerate', `${DEFAULT_FPS}`],\n        // Specifies the encoding and format we are using.\n        this.#getFormatArgs(format ?? 'webm'),\n        // Disable bitrate.\n        ['-b:v', '0'],\n        // Filters to ensure the images are piped correctly.\n        [\n          '-vf',\n          `${\n            speed ? `setpts=${1 / speed}*PTS,` : ''\n          }crop='min(${width},iw):min(${height},ih):0:0',pad=${width}:${height}:0:0${\n            crop ? `,crop=${crop.width}:${crop.height}:${crop.x}:${crop.y}` : ''\n          }${scale ? `,scale=iw*${scale}:-1` : ''}`,\n        ],\n        'pipe:1',\n      ].flat(),\n      {stdio: ['pipe', 'pipe', 'pipe']}\n    );\n    this.#process.stdout.pipe(this);\n    this.#process.stderr.on('data', (data: Buffer) => {\n      debugFfmpeg(data.toString('utf8'));\n    });\n\n    this.#page = page;\n\n    const {client} = this.#page.mainFrame();\n    client.once(CDPSessionEvent.Disconnected, () => {\n      void this.stop().catch(debugError);\n    });\n\n    this.#lastFrame = lastValueFrom(\n      fromEmitterEvent(client, 'Page.screencastFrame').pipe(\n        tap(event => {\n          void client.send('Page.screencastFrameAck', {\n            sessionId: event.sessionId,\n          });\n        }),\n        filter(event => {\n          return event.metadata.timestamp !== undefined;\n        }),\n        map(event => {\n          return {\n            buffer: Buffer.from(event.data, 'base64'),\n            timestamp: event.metadata.timestamp!,\n          };\n        }),\n        bufferCount(2, 1) as OperatorFunction<\n          {buffer: Buffer; timestamp: number},\n          [\n            {buffer: Buffer; timestamp: number},\n            {buffer: Buffer; timestamp: number},\n          ]\n        >,\n        concatMap(([{timestamp: previousTimestamp, buffer}, {timestamp}]) => {\n          return from(\n            Array<Buffer>(\n              Math.round(\n                DEFAULT_FPS * Math.max(timestamp - previousTimestamp, 0)\n              )\n            ).fill(buffer)\n          );\n        }),\n        map(buffer => {\n          void this.#writeFrame(buffer);\n          return [buffer, performance.now()] as const;\n        }),\n        takeUntil(fromEvent(this.#controller.signal, 'abort'))\n      ),\n      {defaultValue: [Buffer.from([]), performance.now()] as const}\n    );\n  }\n\n  #getFormatArgs(format: 'webm' | 'gif') {\n    switch (format) {\n      case 'webm':\n        return [\n          // Sets the codec to use.\n          ['-c:v', 'vp9'],\n          // Sets the format\n          ['-f', 'webm'],\n          // Sets the quality. Lower the better.\n          ['-crf', `${CRF_VALUE}`],\n          // Sets the quality and how efficient the compression will be.\n          ['-deadline', 'realtime', '-cpu-used', '8'],\n        ].flat();\n      case 'gif':\n        return [\n          // Sets the frame rate and uses a custom palette generated from the\n          // input.\n          [\n            '-vf',\n            'fps=5,split[s0][s1];[s0]palettegen=stats_mode=diff[p];[s1][p]paletteuse',\n          ],\n          // Sets the format\n          ['-f', 'gif'],\n        ].flat();\n    }\n  }\n\n  @guarded()\n  async #writeFrame(buffer: Buffer) {\n    const error = await new Promise<Error | null | undefined>(resolve => {\n      this.#process.stdin.write(buffer, resolve);\n    });\n    if (error) {\n      console.log(`ffmpeg failed to write: ${error.message}.`);\n    }\n  }\n\n  /**\n   * Stops the recorder.\n   *\n   * @public\n   */\n  @guarded()\n  async stop(): Promise<void> {\n    if (this.#controller.signal.aborted) {\n      return;\n    }\n    // Stopping the screencast will flush the frames.\n    await this.#page._stopScreencast().catch(debugError);\n\n    this.#controller.abort();\n\n    // Repeat the last frame for the remaining frames.\n    const [buffer, timestamp] = await this.#lastFrame;\n    await Promise.all(\n      Array<Buffer>(\n        Math.max(\n          1,\n          Math.round((DEFAULT_FPS * (performance.now() - timestamp)) / 1000)\n        )\n      )\n        .fill(buffer)\n        .map(this.#writeFrame.bind(this))\n    );\n\n    // Close stdin to notify FFmpeg we are done.\n    this.#process.stdin.end();\n    await new Promise(resolve => {\n      this.#process.once('close', resolve);\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async [asyncDisposeSymbol](): Promise<void> {\n    await this.stop();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}