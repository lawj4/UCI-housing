{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BidiHTTPRequest = exports.requests = void 0;\nconst HTTPRequest_js_1 = require(\"../api/HTTPRequest.js\");\nconst Errors_js_1 = require(\"../common/Errors.js\");\nconst encoding_js_1 = require(\"../util/encoding.js\");\nconst HTTPResponse_js_1 = require(\"./HTTPResponse.js\");\nexports.requests = new WeakMap();\n/**\n * @internal\n */\nclass BidiHTTPRequest extends HTTPRequest_js_1.HTTPRequest {\n  static from(bidiRequest, frame, redirect) {\n    const request = new _a(bidiRequest, frame, redirect);\n    request.#initialize();\n    return request;\n  }\n  #redirectChain;\n  #response = null;\n  id;\n  #frame;\n  #request;\n  constructor(request, frame, redirect) {\n    super();\n    exports.requests.set(request, this);\n    this.interception.enabled = request.isBlocked;\n    this.#request = request;\n    this.#frame = frame;\n    this.#redirectChain = redirect ? redirect.#redirectChain : [];\n    this.id = request.id;\n  }\n  get client() {\n    return this.#frame.client;\n  }\n  #initialize() {\n    this.#request.on('redirect', request => {\n      const httpRequest = _a.from(request, this.#frame, this);\n      this.#redirectChain.push(this);\n      request.once('success', () => {\n        this.#frame.page().trustedEmitter.emit(\"requestfinished\" /* PageEvent.RequestFinished */, httpRequest);\n      });\n      request.once('error', () => {\n        this.#frame.page().trustedEmitter.emit(\"requestfailed\" /* PageEvent.RequestFailed */, httpRequest);\n      });\n      void httpRequest.finalizeInterceptions();\n    });\n    this.#request.once('success', data => {\n      this.#response = HTTPResponse_js_1.BidiHTTPResponse.from(data, this, this.#frame.page().browser().cdpSupported);\n    });\n    this.#request.on('authenticate', this.#handleAuthentication);\n    this.#frame.page().trustedEmitter.emit(\"request\" /* PageEvent.Request */, this);\n    if (this.#hasInternalHeaderOverwrite) {\n      this.interception.handlers.push(async () => {\n        await this.continue({\n          headers: this.headers()\n        }, 0);\n      });\n    }\n  }\n  url() {\n    return this.#request.url;\n  }\n  resourceType() {\n    if (!this.#frame.page().browser().cdpSupported) {\n      throw new Errors_js_1.UnsupportedOperation();\n    }\n    return (this.#request.resourceType || 'other').toLowerCase();\n  }\n  method() {\n    return this.#request.method;\n  }\n  postData() {\n    if (!this.#frame.page().browser().cdpSupported) {\n      throw new Errors_js_1.UnsupportedOperation();\n    }\n    return this.#request.postData;\n  }\n  hasPostData() {\n    if (!this.#frame.page().browser().cdpSupported) {\n      throw new Errors_js_1.UnsupportedOperation();\n    }\n    return this.#request.hasPostData;\n  }\n  async fetchPostData() {\n    throw new Errors_js_1.UnsupportedOperation();\n  }\n  get #hasInternalHeaderOverwrite() {\n    return Boolean(Object.keys(this.#extraHTTPHeaders).length || Object.keys(this.#userAgentHeaders).length);\n  }\n  get #extraHTTPHeaders() {\n    return this.#frame?.page()._extraHTTPHeaders ?? {};\n  }\n  get #userAgentHeaders() {\n    return this.#frame?.page()._userAgentHeaders ?? {};\n  }\n  headers() {\n    const headers = {};\n    for (const header of this.#request.headers) {\n      headers[header.name.toLowerCase()] = header.value.value;\n    }\n    return {\n      ...headers,\n      ...this.#extraHTTPHeaders,\n      ...this.#userAgentHeaders\n    };\n  }\n  response() {\n    return this.#response;\n  }\n  failure() {\n    if (this.#request.error === undefined) {\n      return null;\n    }\n    return {\n      errorText: this.#request.error\n    };\n  }\n  isNavigationRequest() {\n    return this.#request.navigation !== undefined;\n  }\n  initiator() {\n    return this.#request.initiator;\n  }\n  redirectChain() {\n    return this.#redirectChain.slice();\n  }\n  frame() {\n    return this.#frame;\n  }\n  async continue(overrides, priority) {\n    return await super.continue({\n      headers: this.#hasInternalHeaderOverwrite ? this.headers() : undefined,\n      ...overrides\n    }, priority);\n  }\n  async _continue(overrides = {}) {\n    const headers = getBidiHeaders(overrides.headers);\n    this.interception.handled = true;\n    return await this.#request.continueRequest({\n      url: overrides.url,\n      method: overrides.method,\n      body: overrides.postData ? {\n        type: 'base64',\n        value: (0, encoding_js_1.stringToBase64)(overrides.postData)\n      } : undefined,\n      headers: headers.length > 0 ? headers : undefined\n    }).catch(error => {\n      this.interception.handled = false;\n      return (0, HTTPRequest_js_1.handleError)(error);\n    });\n  }\n  async _abort() {\n    this.interception.handled = true;\n    return await this.#request.failRequest().catch(error => {\n      this.interception.handled = false;\n      throw error;\n    });\n  }\n  async _respond(response, _priority) {\n    this.interception.handled = true;\n    let parsedBody;\n    if (response.body) {\n      parsedBody = HTTPRequest_js_1.HTTPRequest.getResponse(response.body);\n    }\n    const headers = getBidiHeaders(response.headers);\n    const hasContentLength = headers.some(header => {\n      return header.name === 'content-length';\n    });\n    if (response.contentType) {\n      headers.push({\n        name: 'content-type',\n        value: {\n          type: 'string',\n          value: response.contentType\n        }\n      });\n    }\n    if (parsedBody?.contentLength && !hasContentLength) {\n      headers.push({\n        name: 'content-length',\n        value: {\n          type: 'string',\n          value: String(parsedBody.contentLength)\n        }\n      });\n    }\n    const status = response.status || 200;\n    return await this.#request.provideResponse({\n      statusCode: status,\n      headers: headers.length > 0 ? headers : undefined,\n      reasonPhrase: HTTPRequest_js_1.STATUS_TEXTS[status],\n      body: parsedBody?.base64 ? {\n        type: 'base64',\n        value: parsedBody?.base64\n      } : undefined\n    }).catch(error => {\n      this.interception.handled = false;\n      throw error;\n    });\n  }\n  #authenticationHandled = false;\n  #handleAuthentication = async () => {\n    if (!this.#frame) {\n      return;\n    }\n    const credentials = this.#frame.page()._credentials;\n    if (credentials && !this.#authenticationHandled) {\n      this.#authenticationHandled = true;\n      void this.#request.continueWithAuth({\n        action: 'provideCredentials',\n        credentials: {\n          type: 'password',\n          username: credentials.username,\n          password: credentials.password\n        }\n      });\n    } else {\n      void this.#request.continueWithAuth({\n        action: 'cancel'\n      });\n    }\n  };\n  timing() {\n    return this.#request.timing();\n  }\n}\nexports.BidiHTTPRequest = BidiHTTPRequest;\n_a = BidiHTTPRequest;\nfunction getBidiHeaders(rawHeaders) {\n  const headers = [];\n  for (const [name, value] of Object.entries(rawHeaders ?? [])) {\n    if (!Object.is(value, undefined)) {\n      const values = Array.isArray(value) ? value : [value];\n      for (const value of values) {\n        headers.push({\n          name: name.toLowerCase(),\n          value: {\n            type: 'string',\n            value: String(value)\n          }\n        });\n      }\n    }\n  }\n  return headers;\n}","map":{"version":3,"names":["HTTPRequest_js_1","require","Errors_js_1","encoding_js_1","HTTPResponse_js_1","exports","requests","WeakMap","BidiHTTPRequest","HTTPRequest","from","bidiRequest","frame","redirect","request","_a","initialize","redirectChain","response","id","constructor","set","interception","enabled","isBlocked","client","#initialize","on","httpRequest","push","once","page","trustedEmitter","emit","finalizeInterceptions","data","BidiHTTPResponse","browser","cdpSupported","handleAuthentication","hasInternalHeaderOverwrite","handlers","continue","headers","url","resourceType","UnsupportedOperation","toLowerCase","method","postData","hasPostData","fetchPostData","#hasInternalHeaderOverwrite","Boolean","Object","keys","extraHTTPHeaders","length","userAgentHeaders","#extraHTTPHeaders","_extraHTTPHeaders","#userAgentHeaders","_userAgentHeaders","header","name","value","failure","error","undefined","errorText","isNavigationRequest","navigation","initiator","slice","overrides","priority","_continue","getBidiHeaders","handled","continueRequest","body","type","stringToBase64","catch","handleError","_abort","failRequest","_respond","_priority","parsedBody","getResponse","hasContentLength","some","contentType","contentLength","String","status","provideResponse","statusCode","reasonPhrase","STATUS_TEXTS","base64","authenticationHandled","#handleAuthentication","credentials","_credentials","continueWithAuth","action","username","password","timing","rawHeaders","entries","is","values","Array","isArray"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/bidi/HTTPRequest.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type * as Bidi from 'chromium-bidi/lib/cjs/protocol/protocol.js';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport type {\n  ContinueRequestOverrides,\n  ResponseForRequest,\n} from '../api/HTTPRequest.js';\nimport {\n  HTTPRequest,\n  STATUS_TEXTS,\n  type ResourceType,\n  handleError,\n} from '../api/HTTPRequest.js';\nimport {PageEvent} from '../api/Page.js';\nimport {UnsupportedOperation} from '../common/Errors.js';\nimport {stringToBase64} from '../util/encoding.js';\n\nimport type {Request} from './core/Request.js';\nimport type {BidiFrame} from './Frame.js';\nimport {BidiHTTPResponse} from './HTTPResponse.js';\n\nexport const requests = new WeakMap<Request, BidiHTTPRequest>();\n\n/**\n * @internal\n */\nexport class BidiHTTPRequest extends HTTPRequest {\n  static from(\n    bidiRequest: Request,\n    frame: BidiFrame,\n    redirect?: BidiHTTPRequest\n  ): BidiHTTPRequest {\n    const request = new BidiHTTPRequest(bidiRequest, frame, redirect);\n    request.#initialize();\n    return request;\n  }\n\n  #redirectChain: BidiHTTPRequest[];\n  #response: BidiHTTPResponse | null = null;\n  override readonly id: string;\n  readonly #frame: BidiFrame;\n  readonly #request: Request;\n\n  private constructor(\n    request: Request,\n    frame: BidiFrame,\n    redirect?: BidiHTTPRequest\n  ) {\n    super();\n    requests.set(request, this);\n\n    this.interception.enabled = request.isBlocked;\n\n    this.#request = request;\n    this.#frame = frame;\n    this.#redirectChain = redirect ? redirect.#redirectChain : [];\n    this.id = request.id;\n  }\n\n  override get client(): CDPSession {\n    return this.#frame.client;\n  }\n\n  #initialize() {\n    this.#request.on('redirect', request => {\n      const httpRequest = BidiHTTPRequest.from(request, this.#frame, this);\n      this.#redirectChain.push(this);\n\n      request.once('success', () => {\n        this.#frame\n          .page()\n          .trustedEmitter.emit(PageEvent.RequestFinished, httpRequest);\n      });\n\n      request.once('error', () => {\n        this.#frame\n          .page()\n          .trustedEmitter.emit(PageEvent.RequestFailed, httpRequest);\n      });\n      void httpRequest.finalizeInterceptions();\n    });\n    this.#request.once('success', data => {\n      this.#response = BidiHTTPResponse.from(\n        data,\n        this,\n        this.#frame.page().browser().cdpSupported\n      );\n    });\n    this.#request.on('authenticate', this.#handleAuthentication);\n\n    this.#frame.page().trustedEmitter.emit(PageEvent.Request, this);\n\n    if (this.#hasInternalHeaderOverwrite) {\n      this.interception.handlers.push(async () => {\n        await this.continue(\n          {\n            headers: this.headers(),\n          },\n          0\n        );\n      });\n    }\n  }\n\n  override url(): string {\n    return this.#request.url;\n  }\n\n  override resourceType(): ResourceType {\n    if (!this.#frame.page().browser().cdpSupported) {\n      throw new UnsupportedOperation();\n    }\n    return (\n      this.#request.resourceType || 'other'\n    ).toLowerCase() as ResourceType;\n  }\n\n  override method(): string {\n    return this.#request.method;\n  }\n\n  override postData(): string | undefined {\n    if (!this.#frame.page().browser().cdpSupported) {\n      throw new UnsupportedOperation();\n    }\n    return this.#request.postData;\n  }\n\n  override hasPostData(): boolean {\n    if (!this.#frame.page().browser().cdpSupported) {\n      throw new UnsupportedOperation();\n    }\n    return this.#request.hasPostData;\n  }\n\n  override async fetchPostData(): Promise<string | undefined> {\n    throw new UnsupportedOperation();\n  }\n\n  get #hasInternalHeaderOverwrite(): boolean {\n    return Boolean(\n      Object.keys(this.#extraHTTPHeaders).length ||\n        Object.keys(this.#userAgentHeaders).length\n    );\n  }\n\n  get #extraHTTPHeaders(): Record<string, string> {\n    return this.#frame?.page()._extraHTTPHeaders ?? {};\n  }\n\n  get #userAgentHeaders(): Record<string, string> {\n    return this.#frame?.page()._userAgentHeaders ?? {};\n  }\n\n  override headers(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    for (const header of this.#request.headers) {\n      headers[header.name.toLowerCase()] = header.value.value;\n    }\n    return {\n      ...headers,\n      ...this.#extraHTTPHeaders,\n      ...this.#userAgentHeaders,\n    };\n  }\n\n  override response(): BidiHTTPResponse | null {\n    return this.#response;\n  }\n\n  override failure(): {errorText: string} | null {\n    if (this.#request.error === undefined) {\n      return null;\n    }\n    return {errorText: this.#request.error};\n  }\n\n  override isNavigationRequest(): boolean {\n    return this.#request.navigation !== undefined;\n  }\n\n  override initiator(): Bidi.Network.Initiator {\n    return this.#request.initiator;\n  }\n\n  override redirectChain(): BidiHTTPRequest[] {\n    return this.#redirectChain.slice();\n  }\n\n  override frame(): BidiFrame {\n    return this.#frame;\n  }\n\n  override async continue(\n    overrides?: ContinueRequestOverrides,\n    priority?: number | undefined\n  ): Promise<void> {\n    return await super.continue(\n      {\n        headers: this.#hasInternalHeaderOverwrite ? this.headers() : undefined,\n        ...overrides,\n      },\n      priority\n    );\n  }\n\n  override async _continue(\n    overrides: ContinueRequestOverrides = {}\n  ): Promise<void> {\n    const headers: Bidi.Network.Header[] = getBidiHeaders(overrides.headers);\n    this.interception.handled = true;\n\n    return await this.#request\n      .continueRequest({\n        url: overrides.url,\n        method: overrides.method,\n        body: overrides.postData\n          ? {\n              type: 'base64',\n              value: stringToBase64(overrides.postData),\n            }\n          : undefined,\n        headers: headers.length > 0 ? headers : undefined,\n      })\n      .catch(error => {\n        this.interception.handled = false;\n        return handleError(error);\n      });\n  }\n\n  override async _abort(): Promise<void> {\n    this.interception.handled = true;\n    return await this.#request.failRequest().catch(error => {\n      this.interception.handled = false;\n      throw error;\n    });\n  }\n\n  override async _respond(\n    response: Partial<ResponseForRequest>,\n    _priority?: number\n  ): Promise<void> {\n    this.interception.handled = true;\n\n    let parsedBody:\n      | {\n          contentLength: number;\n          base64: string;\n        }\n      | undefined;\n    if (response.body) {\n      parsedBody = HTTPRequest.getResponse(response.body);\n    }\n\n    const headers: Bidi.Network.Header[] = getBidiHeaders(response.headers);\n    const hasContentLength = headers.some(header => {\n      return header.name === 'content-length';\n    });\n\n    if (response.contentType) {\n      headers.push({\n        name: 'content-type',\n        value: {\n          type: 'string',\n          value: response.contentType,\n        },\n      });\n    }\n\n    if (parsedBody?.contentLength && !hasContentLength) {\n      headers.push({\n        name: 'content-length',\n        value: {\n          type: 'string',\n          value: String(parsedBody.contentLength),\n        },\n      });\n    }\n    const status = response.status || 200;\n\n    return await this.#request\n      .provideResponse({\n        statusCode: status,\n        headers: headers.length > 0 ? headers : undefined,\n        reasonPhrase: STATUS_TEXTS[status],\n        body: parsedBody?.base64\n          ? {\n              type: 'base64',\n              value: parsedBody?.base64,\n            }\n          : undefined,\n      })\n      .catch(error => {\n        this.interception.handled = false;\n        throw error;\n      });\n  }\n\n  #authenticationHandled = false;\n  #handleAuthentication = async () => {\n    if (!this.#frame) {\n      return;\n    }\n    const credentials = this.#frame.page()._credentials;\n    if (credentials && !this.#authenticationHandled) {\n      this.#authenticationHandled = true;\n      void this.#request.continueWithAuth({\n        action: 'provideCredentials',\n        credentials: {\n          type: 'password',\n          username: credentials.username,\n          password: credentials.password,\n        },\n      });\n    } else {\n      void this.#request.continueWithAuth({\n        action: 'cancel',\n      });\n    }\n  };\n\n  timing(): Bidi.Network.FetchTimingInfo {\n    return this.#request.timing();\n  }\n}\n\nfunction getBidiHeaders(rawHeaders?: Record<string, unknown>) {\n  const headers: Bidi.Network.Header[] = [];\n  for (const [name, value] of Object.entries(rawHeaders ?? [])) {\n    if (!Object.is(value, undefined)) {\n      const values = Array.isArray(value) ? value : [value];\n\n      for (const value of values) {\n        headers.push({\n          name: name.toLowerCase(),\n          value: {\n            type: 'string',\n            value: String(value),\n          },\n        });\n      }\n    }\n  }\n\n  return headers;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}