{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventManager = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst Buffer_js_1 = require(\"../../../utils/Buffer.js\");\nconst DefaultMap_js_1 = require(\"../../../utils/DefaultMap.js\");\nconst DistinctValues_js_1 = require(\"../../../utils/DistinctValues.js\");\nconst EventEmitter_js_1 = require(\"../../../utils/EventEmitter.js\");\nconst IdWrapper_js_1 = require(\"../../../utils/IdWrapper.js\");\nconst OutgoingMessage_js_1 = require(\"../../OutgoingMessage.js\");\nconst events_js_1 = require(\"./events.js\");\nconst SubscriptionManager_js_1 = require(\"./SubscriptionManager.js\");\nclass EventWrapper {\n  #idWrapper = new IdWrapper_js_1.IdWrapper();\n  #contextId;\n  #event;\n  constructor(event, contextId) {\n    this.#event = event;\n    this.#contextId = contextId;\n  }\n  get id() {\n    return this.#idWrapper.id;\n  }\n  get contextId() {\n    return this.#contextId;\n  }\n  get event() {\n    return this.#event;\n  }\n}\n/**\n * Maps event name to a desired buffer length.\n */\nconst eventBufferLength = new Map([[protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded, 100]]);\nclass EventManager extends EventEmitter_js_1.EventEmitter {\n  /**\n   * Maps event name to a set of contexts where this event already happened.\n   * Needed for getting buffered events from all the contexts in case of\n   * subscripting to all contexts.\n   */\n  #eventToContextsMap = new DefaultMap_js_1.DefaultMap(() => new Set());\n  /**\n   * Maps `eventName` + `browsingContext` to buffer. Used to get buffered events\n   * during subscription. Channel-agnostic.\n   */\n  #eventBuffers = new Map();\n  /**\n   * Maps `eventName` + `browsingContext` + `channel` to last sent event id.\n   * Used to avoid sending duplicated events when user\n   * subscribes -> unsubscribes -> subscribes.\n   */\n  #lastMessageSent = new Map();\n  #subscriptionManager;\n  #browsingContextStorage;\n  /**\n   * Map of event name to hooks to be called when client is subscribed to the event.\n   */\n  #subscribeHooks;\n  constructor(browsingContextStorage) {\n    super();\n    this.#browsingContextStorage = browsingContextStorage;\n    this.#subscriptionManager = new SubscriptionManager_js_1.SubscriptionManager(browsingContextStorage);\n    this.#subscribeHooks = new DefaultMap_js_1.DefaultMap(() => []);\n  }\n  get subscriptionManager() {\n    return this.#subscriptionManager;\n  }\n  /**\n   * Returns consistent key to be used to access value maps.\n   */\n  static #getMapKey(eventName, browsingContext, channel) {\n    return JSON.stringify({\n      eventName,\n      browsingContext,\n      channel\n    });\n  }\n  addSubscribeHook(event, hook) {\n    this.#subscribeHooks.get(event).push(hook);\n  }\n  registerEvent(event, contextId) {\n    this.registerPromiseEvent(Promise.resolve({\n      kind: 'success',\n      value: event\n    }), contextId, event.method);\n  }\n  registerPromiseEvent(event, contextId, eventName) {\n    const eventWrapper = new EventWrapper(event, contextId);\n    const sortedChannels = this.#subscriptionManager.getChannelsSubscribedToEvent(eventName, contextId);\n    this.#bufferEvent(eventWrapper, eventName);\n    // Send events to channels in the subscription priority.\n    for (const channel of sortedChannels) {\n      this.emit(\"event\" /* EventManagerEvents.Event */, {\n        message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(event, channel),\n        event: eventName\n      });\n      this.#markEventSent(eventWrapper, channel, eventName);\n    }\n  }\n  async subscribe(eventNames, contextIds, channel) {\n    for (const name of eventNames) {\n      (0, events_js_1.assertSupportedEvent)(name);\n    }\n    // First check if all the contexts are known.\n    for (const contextId of contextIds) {\n      if (contextId !== null) {\n        // Assert the context is known. Throw exception otherwise.\n        this.#browsingContextStorage.getContext(contextId);\n      }\n    }\n    // List of the subscription items that were actually added. Each contains a specific\n    // event and context. No domain event (like \"network\") or global context subscription\n    // (like null) are included.\n    const addedSubscriptionItems = [];\n    for (const eventName of eventNames) {\n      for (const contextId of contextIds) {\n        addedSubscriptionItems.push(...this.#subscriptionManager.subscribe(eventName, contextId, channel));\n        for (const eventWrapper of this.#getBufferedEvents(eventName, contextId, channel)) {\n          // The order of the events is important.\n          this.emit(\"event\" /* EventManagerEvents.Event */, {\n            message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(eventWrapper.event, channel),\n            event: eventName\n          });\n          this.#markEventSent(eventWrapper, channel, eventName);\n        }\n      }\n    }\n    // Iterate over all new subscription items and call hooks if any. There can be\n    // duplicates, e.g. when subscribing to the whole domain and some specific event in\n    // the same time (\"network\", \"network.responseCompleted\"). `distinctValues` guarantees\n    // that hooks are called only once per pair event + context.\n    (0, DistinctValues_js_1.distinctValues)(addedSubscriptionItems).forEach(({\n      contextId,\n      event\n    }) => {\n      this.#subscribeHooks.get(event).forEach(hook => hook(contextId));\n    });\n    await this.toggleModulesIfNeeded();\n  }\n  async unsubscribe(eventNames, contextIds, channel) {\n    for (const name of eventNames) {\n      (0, events_js_1.assertSupportedEvent)(name);\n    }\n    this.#subscriptionManager.unsubscribeAll(eventNames, contextIds, channel);\n    await this.toggleModulesIfNeeded();\n  }\n  async toggleModulesIfNeeded() {\n    // TODO(1): Only update changed subscribers\n    // TODO(2): Enable for Worker Targets\n    await Promise.all(this.#browsingContextStorage.getAllContexts().map(async context => {\n      return await context.toggleModulesIfNeeded();\n    }));\n  }\n  /**\n   * If the event is buffer-able, put it in the buffer.\n   */\n  #bufferEvent(eventWrapper, eventName) {\n    if (!eventBufferLength.has(eventName)) {\n      // Do nothing if the event is no buffer-able.\n      return;\n    }\n    const bufferMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId);\n    if (!this.#eventBuffers.has(bufferMapKey)) {\n      this.#eventBuffers.set(bufferMapKey, new Buffer_js_1.Buffer(eventBufferLength.get(eventName)));\n    }\n    this.#eventBuffers.get(bufferMapKey).add(eventWrapper);\n    // Add the context to the list of contexts having `eventName` events.\n    this.#eventToContextsMap.get(eventName).add(eventWrapper.contextId);\n  }\n  /**\n   * If the event is buffer-able, mark it as sent to the given contextId and channel.\n   */\n  #markEventSent(eventWrapper, channel, eventName) {\n    if (!eventBufferLength.has(eventName)) {\n      // Do nothing if the event is no buffer-able.\n      return;\n    }\n    const lastSentMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId, channel);\n    this.#lastMessageSent.set(lastSentMapKey, Math.max(this.#lastMessageSent.get(lastSentMapKey) ?? 0, eventWrapper.id));\n  }\n  /**\n   * Returns events which are buffered and not yet sent to the given channel events.\n   */\n  #getBufferedEvents(eventName, contextId, channel) {\n    const bufferMapKey = EventManager.#getMapKey(eventName, contextId);\n    const lastSentMapKey = EventManager.#getMapKey(eventName, contextId, channel);\n    const lastSentMessageId = this.#lastMessageSent.get(lastSentMapKey) ?? -Infinity;\n    const result = this.#eventBuffers.get(bufferMapKey)?.get().filter(wrapper => wrapper.id > lastSentMessageId) ?? [];\n    if (contextId === null) {\n      // For global subscriptions, events buffered in each context should be sent back.\n      Array.from(this.#eventToContextsMap.get(eventName).keys()).filter(_contextId =>\n      // Events without context are already in the result.\n      _contextId !== null &&\n      // Events from deleted contexts should not be sent.\n      this.#browsingContextStorage.hasContext(_contextId)).map(_contextId => this.#getBufferedEvents(eventName, _contextId, channel)).forEach(events => result.push(...events));\n    }\n    return result.sort((e1, e2) => e1.id - e2.id);\n  }\n}\nexports.EventManager = EventManager;","map":{"version":3,"names":["protocol_js_1","require","Buffer_js_1","DefaultMap_js_1","DistinctValues_js_1","EventEmitter_js_1","IdWrapper_js_1","OutgoingMessage_js_1","events_js_1","SubscriptionManager_js_1","EventWrapper","idWrapper","IdWrapper","contextId","event","constructor","id","eventBufferLength","Map","ChromiumBidi","Log","EventNames","LogEntryAdded","EventManager","EventEmitter","eventToContextsMap","DefaultMap","Set","eventBuffers","lastMessageSent","subscriptionManager","browsingContextStorage","subscribeHooks","SubscriptionManager","getMapKey","#getMapKey","eventName","browsingContext","channel","JSON","stringify","addSubscribeHook","hook","get","push","registerEvent","registerPromiseEvent","Promise","resolve","kind","value","method","eventWrapper","sortedChannels","getChannelsSubscribedToEvent","bufferEvent","emit","message","OutgoingMessage","createFromPromise","markEventSent","subscribe","eventNames","contextIds","name","assertSupportedEvent","getContext","addedSubscriptionItems","getBufferedEvents","distinctValues","forEach","toggleModulesIfNeeded","unsubscribe","unsubscribeAll","all","getAllContexts","map","context","#bufferEvent","has","bufferMapKey","set","Buffer","add","#markEventSent","lastSentMapKey","Math","max","#getBufferedEvents","lastSentMessageId","Infinity","result","filter","wrapper","Array","from","keys","_contextId","hasContext","events","sort","e1","e2","exports"],"sources":["../../../../../src/bidiMapper/modules/session/EventManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}