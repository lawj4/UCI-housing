{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQueryHandlerAndSelector = void 0;\nconst AriaQueryHandler_js_1 = require(\"../cdp/AriaQueryHandler.js\");\nconst CSSQueryHandler_js_1 = require(\"./CSSQueryHandler.js\");\nconst CustomQueryHandler_js_1 = require(\"./CustomQueryHandler.js\");\nconst PierceQueryHandler_js_1 = require(\"./PierceQueryHandler.js\");\nconst PQueryHandler_js_1 = require(\"./PQueryHandler.js\");\nconst PSelectorParser_js_1 = require(\"./PSelectorParser.js\");\nconst TextQueryHandler_js_1 = require(\"./TextQueryHandler.js\");\nconst XPathQueryHandler_js_1 = require(\"./XPathQueryHandler.js\");\nconst BUILTIN_QUERY_HANDLERS = {\n  aria: AriaQueryHandler_js_1.ARIAQueryHandler,\n  pierce: PierceQueryHandler_js_1.PierceQueryHandler,\n  xpath: XPathQueryHandler_js_1.XPathQueryHandler,\n  text: TextQueryHandler_js_1.TextQueryHandler\n};\nconst QUERY_SEPARATORS = ['=', '/'];\n/**\n * @internal\n */\nfunction getQueryHandlerAndSelector(selector) {\n  for (const handlerMap of [CustomQueryHandler_js_1.customQueryHandlers.names().map(name => {\n    return [name, CustomQueryHandler_js_1.customQueryHandlers.get(name)];\n  }), Object.entries(BUILTIN_QUERY_HANDLERS)]) {\n    for (const [name, QueryHandler] of handlerMap) {\n      for (const separator of QUERY_SEPARATORS) {\n        const prefix = `${name}${separator}`;\n        if (selector.startsWith(prefix)) {\n          selector = selector.slice(prefix.length);\n          return {\n            updatedSelector: selector,\n            polling: name === 'aria' ? \"raf\" /* PollingOptions.RAF */ : \"mutation\" /* PollingOptions.MUTATION */,\n            QueryHandler\n          };\n        }\n      }\n    }\n  }\n  try {\n    const [pSelector, isPureCSS, hasPseudoClasses, hasAria] = (0, PSelectorParser_js_1.parsePSelectors)(selector);\n    if (isPureCSS) {\n      return {\n        updatedSelector: selector,\n        polling: hasPseudoClasses ? \"raf\" /* PollingOptions.RAF */ : \"mutation\" /* PollingOptions.MUTATION */,\n        QueryHandler: CSSQueryHandler_js_1.CSSQueryHandler\n      };\n    }\n    return {\n      updatedSelector: JSON.stringify(pSelector),\n      polling: hasAria ? \"raf\" /* PollingOptions.RAF */ : \"mutation\" /* PollingOptions.MUTATION */,\n      QueryHandler: PQueryHandler_js_1.PQueryHandler\n    };\n  } catch {\n    return {\n      updatedSelector: selector,\n      polling: \"mutation\" /* PollingOptions.MUTATION */,\n      QueryHandler: CSSQueryHandler_js_1.CSSQueryHandler\n    };\n  }\n}\nexports.getQueryHandlerAndSelector = getQueryHandlerAndSelector;","map":{"version":3,"names":["AriaQueryHandler_js_1","require","CSSQueryHandler_js_1","CustomQueryHandler_js_1","PierceQueryHandler_js_1","PQueryHandler_js_1","PSelectorParser_js_1","TextQueryHandler_js_1","XPathQueryHandler_js_1","BUILTIN_QUERY_HANDLERS","aria","ARIAQueryHandler","pierce","PierceQueryHandler","xpath","XPathQueryHandler","text","TextQueryHandler","QUERY_SEPARATORS","getQueryHandlerAndSelector","selector","handlerMap","customQueryHandlers","names","map","name","get","Object","entries","QueryHandler","separator","prefix","startsWith","slice","length","updatedSelector","polling","pSelector","isPureCSS","hasPseudoClasses","hasAria","parsePSelectors","CSSQueryHandler","JSON","stringify","PQueryHandler","exports"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/src/common/GetQueryHandler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ARIAQueryHandler} from '../cdp/AriaQueryHandler.js';\n\nimport {CSSQueryHandler} from './CSSQueryHandler.js';\nimport {customQueryHandlers} from './CustomQueryHandler.js';\nimport {PierceQueryHandler} from './PierceQueryHandler.js';\nimport {PQueryHandler} from './PQueryHandler.js';\nimport {parsePSelectors} from './PSelectorParser.js';\nimport type {QueryHandler} from './QueryHandler.js';\nimport {PollingOptions} from './QueryHandler.js';\nimport {TextQueryHandler} from './TextQueryHandler.js';\nimport {XPathQueryHandler} from './XPathQueryHandler.js';\n\nconst BUILTIN_QUERY_HANDLERS = {\n  aria: ARIAQueryHandler,\n  pierce: PierceQueryHandler,\n  xpath: XPathQueryHandler,\n  text: TextQueryHandler,\n} as const;\n\nconst QUERY_SEPARATORS = ['=', '/'];\n\n/**\n * @internal\n */\nexport function getQueryHandlerAndSelector(selector: string): {\n  updatedSelector: string;\n  polling: PollingOptions;\n  QueryHandler: typeof QueryHandler;\n} {\n  for (const handlerMap of [\n    customQueryHandlers.names().map(name => {\n      return [name, customQueryHandlers.get(name)!] as const;\n    }),\n    Object.entries(BUILTIN_QUERY_HANDLERS),\n  ]) {\n    for (const [name, QueryHandler] of handlerMap) {\n      for (const separator of QUERY_SEPARATORS) {\n        const prefix = `${name}${separator}`;\n        if (selector.startsWith(prefix)) {\n          selector = selector.slice(prefix.length);\n          return {\n            updatedSelector: selector,\n            polling:\n              name === 'aria' ? PollingOptions.RAF : PollingOptions.MUTATION,\n            QueryHandler,\n          };\n        }\n      }\n    }\n  }\n  try {\n    const [pSelector, isPureCSS, hasPseudoClasses, hasAria] =\n      parsePSelectors(selector);\n    if (isPureCSS) {\n      return {\n        updatedSelector: selector,\n        polling: hasPseudoClasses\n          ? PollingOptions.RAF\n          : PollingOptions.MUTATION,\n        QueryHandler: CSSQueryHandler,\n      };\n    }\n    return {\n      updatedSelector: JSON.stringify(pSelector),\n      polling: hasAria ? PollingOptions.RAF : PollingOptions.MUTATION,\n      QueryHandler: PQueryHandler,\n    };\n  } catch {\n    return {\n      updatedSelector: selector,\n      polling: PollingOptions.MUTATION,\n      QueryHandler: CSSQueryHandler,\n    };\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;AAMA,MAAAA,qBAAA,GAAAC,OAAA;AAEA,MAAAC,oBAAA,GAAAD,OAAA;AACA,MAAAE,uBAAA,GAAAF,OAAA;AACA,MAAAG,uBAAA,GAAAH,OAAA;AACA,MAAAI,kBAAA,GAAAJ,OAAA;AACA,MAAAK,oBAAA,GAAAL,OAAA;AAGA,MAAAM,qBAAA,GAAAN,OAAA;AACA,MAAAO,sBAAA,GAAAP,OAAA;AAEA,MAAMQ,sBAAsB,GAAG;EAC7BC,IAAI,EAAEV,qBAAA,CAAAW,gBAAgB;EACtBC,MAAM,EAAER,uBAAA,CAAAS,kBAAkB;EAC1BC,KAAK,EAAEN,sBAAA,CAAAO,iBAAiB;EACxBC,IAAI,EAAET,qBAAA,CAAAU;CACE;AAEV,MAAMC,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AAEnC;;;AAGA,SAAgBC,0BAA0BA,CAACC,QAAgB;EAKzD,KAAK,MAAMC,UAAU,IAAI,CACvBlB,uBAAA,CAAAmB,mBAAmB,CAACC,KAAK,EAAE,CAACC,GAAG,CAACC,IAAI,IAAG;IACrC,OAAO,CAACA,IAAI,EAAEtB,uBAAA,CAAAmB,mBAAmB,CAACI,GAAG,CAACD,IAAI,CAAE,CAAU;EACxD,CAAC,CAAC,EACFE,MAAM,CAACC,OAAO,CAACnB,sBAAsB,CAAC,CACvC,EAAE;IACD,KAAK,MAAM,CAACgB,IAAI,EAAEI,YAAY,CAAC,IAAIR,UAAU,EAAE;MAC7C,KAAK,MAAMS,SAAS,IAAIZ,gBAAgB,EAAE;QACxC,MAAMa,MAAM,GAAG,GAAGN,IAAI,GAAGK,SAAS,EAAE;QACpC,IAAIV,QAAQ,CAACY,UAAU,CAACD,MAAM,CAAC,EAAE;UAC/BX,QAAQ,GAAGA,QAAQ,CAACa,KAAK,CAACF,MAAM,CAACG,MAAM,CAAC;UACxC,OAAO;YACLC,eAAe,EAAEf,QAAQ;YACzBgB,OAAO,EACLX,IAAI,KAAK,MAAM,GAAE,iCAAqB;YACxCI;WACD;QACH;MACF;IACF;EACF;EACA,IAAI;IACF,MAAM,CAACQ,SAAS,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,OAAO,CAAC,GACrD,IAAAlC,oBAAA,CAAAmC,eAAe,EAACrB,QAAQ,CAAC;IAC3B,IAAIkB,SAAS,EAAE;MACb,OAAO;QACLH,eAAe,EAAEf,QAAQ;QACzBgB,OAAO,EAAEG,gBAAgB,GACtB,iCACA;QACHV,YAAY,EAAE3B,oBAAA,CAAAwC;OACf;IACH;IACA,OAAO;MACLP,eAAe,EAAEQ,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC;MAC1CD,OAAO,EAAEI,OAAO,GAAE,iCAAqB;MACvCX,YAAY,EAAExB,kBAAA,CAAAwC;KACf;EACH,CAAC,CAAC,MAAM;IACN,OAAO;MACLV,eAAe,EAAEf,QAAQ;MACzBgB,OAAO;MACPP,YAAY,EAAE3B,oBAAA,CAAAwC;KACf;EACH;AACF;AAlDAI,OAAA,CAAA3B,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}