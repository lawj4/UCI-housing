{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = exports.InstalledBrowser = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst browser_data_js_1 = require(\"./browser-data/browser-data.js\");\nconst detectPlatform_js_1 = require(\"./detectPlatform.js\");\nconst debugCache = (0, debug_1.default)('puppeteer:browsers:cache');\n/**\n * @public\n */\nclass InstalledBrowser {\n  browser;\n  buildId;\n  platform;\n  executablePath;\n  #cache;\n  /**\n   * @internal\n   */\n  constructor(cache, browser, buildId, platform) {\n    this.#cache = cache;\n    this.browser = browser;\n    this.buildId = buildId;\n    this.platform = platform;\n    this.executablePath = cache.computeExecutablePath({\n      browser,\n      buildId,\n      platform\n    });\n  }\n  /**\n   * Path to the root of the installation folder. Use\n   * {@link computeExecutablePath} to get the path to the executable binary.\n   */\n  get path() {\n    return this.#cache.installationDir(this.browser, this.platform, this.buildId);\n  }\n  readMetadata() {\n    return this.#cache.readMetadata(this.browser);\n  }\n  writeMetadata(metadata) {\n    this.#cache.writeMetadata(this.browser, metadata);\n  }\n}\nexports.InstalledBrowser = InstalledBrowser;\n/**\n * The cache used by Puppeteer relies on the following structure:\n *\n * - rootDir\n *   -- <browser1> | browserRoot(browser1)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   -- <browser2> | browserRoot(browser2)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   @internal\n */\nclass Cache {\n  #rootDir;\n  constructor(rootDir) {\n    this.#rootDir = rootDir;\n  }\n  /**\n   * @internal\n   */\n  get rootDir() {\n    return this.#rootDir;\n  }\n  browserRoot(browser) {\n    return path_1.default.join(this.#rootDir, browser);\n  }\n  metadataFile(browser) {\n    return path_1.default.join(this.browserRoot(browser), '.metadata');\n  }\n  readMetadata(browser) {\n    const metatadaPath = this.metadataFile(browser);\n    if (!fs_1.default.existsSync(metatadaPath)) {\n      return {\n        aliases: {}\n      };\n    }\n    // TODO: add type-safe parsing.\n    const data = JSON.parse(fs_1.default.readFileSync(metatadaPath, 'utf8'));\n    if (typeof data !== 'object') {\n      throw new Error('.metadata is not an object');\n    }\n    return data;\n  }\n  writeMetadata(browser, metadata) {\n    const metatadaPath = this.metadataFile(browser);\n    fs_1.default.mkdirSync(path_1.default.dirname(metatadaPath), {\n      recursive: true\n    });\n    fs_1.default.writeFileSync(metatadaPath, JSON.stringify(metadata, null, 2));\n  }\n  resolveAlias(browser, alias) {\n    const metadata = this.readMetadata(browser);\n    if (alias === 'latest') {\n      return Object.values(metadata.aliases || {}).sort((0, browser_data_js_1.getVersionComparator)(browser)).at(-1);\n    }\n    return metadata.aliases[alias];\n  }\n  installationDir(browser, platform, buildId) {\n    return path_1.default.join(this.browserRoot(browser), `${platform}-${buildId}`);\n  }\n  clear() {\n    fs_1.default.rmSync(this.#rootDir, {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500\n    });\n  }\n  uninstall(browser, platform, buildId) {\n    const metadata = this.readMetadata(browser);\n    for (const alias of Object.keys(metadata.aliases)) {\n      if (metadata.aliases[alias] === buildId) {\n        delete metadata.aliases[alias];\n      }\n    }\n    fs_1.default.rmSync(this.installationDir(browser, platform, buildId), {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500\n    });\n  }\n  getInstalledBrowsers() {\n    if (!fs_1.default.existsSync(this.#rootDir)) {\n      return [];\n    }\n    const types = fs_1.default.readdirSync(this.#rootDir);\n    const browsers = types.filter(t => {\n      return Object.values(browser_data_js_1.Browser).includes(t);\n    });\n    return browsers.flatMap(browser => {\n      const files = fs_1.default.readdirSync(this.browserRoot(browser));\n      return files.map(file => {\n        const result = parseFolderPath(path_1.default.join(this.browserRoot(browser), file));\n        if (!result) {\n          return null;\n        }\n        return new InstalledBrowser(this, browser, result.buildId, result.platform);\n      }).filter(item => {\n        return item !== null;\n      });\n    });\n  }\n  computeExecutablePath(options) {\n    options.platform ??= (0, detectPlatform_js_1.detectBrowserPlatform)();\n    if (!options.platform) {\n      throw new Error(`Cannot download a binary for the provided platform: ${os_1.default.platform()} (${os_1.default.arch()})`);\n    }\n    try {\n      options.buildId = this.resolveAlias(options.browser, options.buildId) ?? options.buildId;\n    } catch {\n      debugCache('could not read .metadata file for the browser');\n    }\n    const installationDir = this.installationDir(options.browser, options.platform, options.buildId);\n    return path_1.default.join(installationDir, browser_data_js_1.executablePathByBrowser[options.browser](options.platform, options.buildId));\n  }\n}\nexports.Cache = Cache;\nfunction parseFolderPath(folderPath) {\n  const name = path_1.default.basename(folderPath);\n  const splits = name.split('-');\n  if (splits.length !== 2) {\n    return;\n  }\n  const [platform, buildId] = splits;\n  if (!buildId || !platform) {\n    return;\n  }\n  return {\n    platform,\n    buildId\n  };\n}","map":{"version":3,"names":["fs_1","__importDefault","require","os_1","path_1","debug_1","browser_data_js_1","detectPlatform_js_1","debugCache","default","InstalledBrowser","browser","buildId","platform","executablePath","cache","constructor","computeExecutablePath","path","installationDir","readMetadata","writeMetadata","metadata","exports","Cache","rootDir","browserRoot","join","metadataFile","metatadaPath","existsSync","aliases","data","JSON","parse","readFileSync","Error","mkdirSync","dirname","recursive","writeFileSync","stringify","resolveAlias","alias","Object","values","sort","getVersionComparator","at","clear","rmSync","force","maxRetries","retryDelay","uninstall","keys","getInstalledBrowsers","types","readdirSync","browsers","filter","t","Browser","includes","flatMap","files","map","file","result","parseFolderPath","item","options","detectBrowserPlatform","arch","executablePathByBrowser","folderPath","name","basename","splits","split","length"],"sources":["/Users/lawj4/webDevelopment/node_modules/@puppeteer/browsers/src/Cache.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport debug from 'debug';\n\nimport {\n  Browser,\n  type BrowserPlatform,\n  executablePathByBrowser,\n  getVersionComparator,\n} from './browser-data/browser-data.js';\nimport {detectBrowserPlatform} from './detectPlatform.js';\n\nconst debugCache = debug('puppeteer:browsers:cache');\n\n/**\n * @public\n */\nexport class InstalledBrowser {\n  browser: Browser;\n  buildId: string;\n  platform: BrowserPlatform;\n  readonly executablePath: string;\n\n  #cache: Cache;\n\n  /**\n   * @internal\n   */\n  constructor(\n    cache: Cache,\n    browser: Browser,\n    buildId: string,\n    platform: BrowserPlatform\n  ) {\n    this.#cache = cache;\n    this.browser = browser;\n    this.buildId = buildId;\n    this.platform = platform;\n    this.executablePath = cache.computeExecutablePath({\n      browser,\n      buildId,\n      platform,\n    });\n  }\n\n  /**\n   * Path to the root of the installation folder. Use\n   * {@link computeExecutablePath} to get the path to the executable binary.\n   */\n  get path(): string {\n    return this.#cache.installationDir(\n      this.browser,\n      this.platform,\n      this.buildId\n    );\n  }\n\n  readMetadata(): Metadata {\n    return this.#cache.readMetadata(this.browser);\n  }\n\n  writeMetadata(metadata: Metadata): void {\n    this.#cache.writeMetadata(this.browser, metadata);\n  }\n}\n\n/**\n * @internal\n */\nexport interface ComputeExecutablePathOptions {\n  /**\n   * Determines which platform the browser will be suited for.\n   *\n   * @defaultValue **Auto-detected.**\n   */\n  platform?: BrowserPlatform;\n  /**\n   * Determines which browser to launch.\n   */\n  browser: Browser;\n  /**\n   * Determines which buildId to download. BuildId should uniquely identify\n   * binaries and they are used for caching.\n   */\n  buildId: string;\n}\n\nexport interface Metadata {\n  // Maps an alias (canary/latest/dev/etc.) to a buildId.\n  aliases: Record<string, string>;\n}\n\n/**\n * The cache used by Puppeteer relies on the following structure:\n *\n * - rootDir\n *   -- <browser1> | browserRoot(browser1)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   -- <browser2> | browserRoot(browser2)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   @internal\n */\nexport class Cache {\n  #rootDir: string;\n\n  constructor(rootDir: string) {\n    this.#rootDir = rootDir;\n  }\n\n  /**\n   * @internal\n   */\n  get rootDir(): string {\n    return this.#rootDir;\n  }\n\n  browserRoot(browser: Browser): string {\n    return path.join(this.#rootDir, browser);\n  }\n\n  metadataFile(browser: Browser): string {\n    return path.join(this.browserRoot(browser), '.metadata');\n  }\n\n  readMetadata(browser: Browser): Metadata {\n    const metatadaPath = this.metadataFile(browser);\n    if (!fs.existsSync(metatadaPath)) {\n      return {aliases: {}};\n    }\n    // TODO: add type-safe parsing.\n    const data = JSON.parse(fs.readFileSync(metatadaPath, 'utf8'));\n    if (typeof data !== 'object') {\n      throw new Error('.metadata is not an object');\n    }\n    return data;\n  }\n\n  writeMetadata(browser: Browser, metadata: Metadata): void {\n    const metatadaPath = this.metadataFile(browser);\n    fs.mkdirSync(path.dirname(metatadaPath), {recursive: true});\n    fs.writeFileSync(metatadaPath, JSON.stringify(metadata, null, 2));\n  }\n\n  resolveAlias(browser: Browser, alias: string): string | undefined {\n    const metadata = this.readMetadata(browser);\n    if (alias === 'latest') {\n      return Object.values(metadata.aliases || {})\n        .sort(getVersionComparator(browser))\n        .at(-1);\n    }\n    return metadata.aliases[alias];\n  }\n\n  installationDir(\n    browser: Browser,\n    platform: BrowserPlatform,\n    buildId: string\n  ): string {\n    return path.join(this.browserRoot(browser), `${platform}-${buildId}`);\n  }\n\n  clear(): void {\n    fs.rmSync(this.#rootDir, {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500,\n    });\n  }\n\n  uninstall(\n    browser: Browser,\n    platform: BrowserPlatform,\n    buildId: string\n  ): void {\n    const metadata = this.readMetadata(browser);\n    for (const alias of Object.keys(metadata.aliases)) {\n      if (metadata.aliases[alias] === buildId) {\n        delete metadata.aliases[alias];\n      }\n    }\n    fs.rmSync(this.installationDir(browser, platform, buildId), {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500,\n    });\n  }\n\n  getInstalledBrowsers(): InstalledBrowser[] {\n    if (!fs.existsSync(this.#rootDir)) {\n      return [];\n    }\n    const types = fs.readdirSync(this.#rootDir);\n    const browsers = types.filter((t): t is Browser => {\n      return (Object.values(Browser) as string[]).includes(t);\n    });\n    return browsers.flatMap(browser => {\n      const files = fs.readdirSync(this.browserRoot(browser));\n      return files\n        .map(file => {\n          const result = parseFolderPath(\n            path.join(this.browserRoot(browser), file)\n          );\n          if (!result) {\n            return null;\n          }\n          return new InstalledBrowser(\n            this,\n            browser,\n            result.buildId,\n            result.platform as BrowserPlatform\n          );\n        })\n        .filter((item: InstalledBrowser | null): item is InstalledBrowser => {\n          return item !== null;\n        });\n    });\n  }\n\n  computeExecutablePath(options: ComputeExecutablePathOptions): string {\n    options.platform ??= detectBrowserPlatform();\n    if (!options.platform) {\n      throw new Error(\n        `Cannot download a binary for the provided platform: ${os.platform()} (${os.arch()})`\n      );\n    }\n    try {\n      options.buildId =\n        this.resolveAlias(options.browser, options.buildId) ?? options.buildId;\n    } catch {\n      debugCache('could not read .metadata file for the browser');\n    }\n    const installationDir = this.installationDir(\n      options.browser,\n      options.platform,\n      options.buildId\n    );\n    return path.join(\n      installationDir,\n      executablePathByBrowser[options.browser](\n        options.platform,\n        options.buildId\n      )\n    );\n  }\n}\n\nfunction parseFolderPath(\n  folderPath: string\n): {platform: string; buildId: string} | undefined {\n  const name = path.basename(folderPath);\n  const splits = name.split('-');\n  if (splits.length !== 2) {\n    return;\n  }\n  const [platform, buildId] = splits;\n  if (!buildId || !platform) {\n    return;\n  }\n  return {platform, buildId};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}