{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProtocolErrorMessage = exports.rewriteError = exports.isErrnoException = exports.isErrorLike = void 0;\n/**\n * @internal\n */\nfunction isErrorLike(obj) {\n  return typeof obj === 'object' && obj !== null && 'name' in obj && 'message' in obj;\n}\nexports.isErrorLike = isErrorLike;\n/**\n * @internal\n */\nfunction isErrnoException(obj) {\n  return isErrorLike(obj) && ('errno' in obj || 'code' in obj || 'path' in obj || 'syscall' in obj);\n}\nexports.isErrnoException = isErrnoException;\n/**\n * @internal\n */\nfunction rewriteError(error, message, originalMessage) {\n  error.message = message;\n  error.originalMessage = originalMessage ?? error.originalMessage;\n  return error;\n}\nexports.rewriteError = rewriteError;\n/**\n * @internal\n */\nfunction createProtocolErrorMessage(object) {\n  let message = object.error.message;\n  // TODO: remove the type checks when we stop connecting to BiDi with a CDP\n  // client.\n  if (object.error && typeof object.error === 'object' && 'data' in object.error) {\n    message += ` ${object.error.data}`;\n  }\n  return message;\n}\nexports.createProtocolErrorMessage = createProtocolErrorMessage;","map":{"version":3,"names":["isErrorLike","obj","exports","isErrnoException","rewriteError","error","message","originalMessage","createProtocolErrorMessage","object","data"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/util/ErrorLike.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {ProtocolError} from '../common/Errors.js';\n\n/**\n * @internal\n */\nexport interface ErrorLike extends Error {\n  name: string;\n  message: string;\n}\n\n/**\n * @internal\n */\nexport function isErrorLike(obj: unknown): obj is ErrorLike {\n  return (\n    typeof obj === 'object' && obj !== null && 'name' in obj && 'message' in obj\n  );\n}\n\n/**\n * @internal\n */\nexport function isErrnoException(obj: unknown): obj is NodeJS.ErrnoException {\n  return (\n    isErrorLike(obj) &&\n    ('errno' in obj || 'code' in obj || 'path' in obj || 'syscall' in obj)\n  );\n}\n\n/**\n * @internal\n */\nexport function rewriteError(\n  error: ProtocolError,\n  message: string,\n  originalMessage?: string\n): Error {\n  error.message = message;\n  error.originalMessage = originalMessage ?? error.originalMessage;\n  return error;\n}\n\n/**\n * @internal\n */\nexport function createProtocolErrorMessage(object: {\n  error: {message: string; data: any; code: number};\n}): string {\n  let message = object.error.message;\n  // TODO: remove the type checks when we stop connecting to BiDi with a CDP\n  // client.\n  if (\n    object.error &&\n    typeof object.error === 'object' &&\n    'data' in object.error\n  ) {\n    message += ` ${object.error.data}`;\n  }\n  return message;\n}\n"],"mappings":";;AAAA;;;;;;;;;AAgBA;;;AAGA,SAAgBA,WAAWA,CAACC,GAAY;EACtC,OACE,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,IAAI,MAAM,IAAIA,GAAG,IAAI,SAAS,IAAIA,GAAG;AAEhF;AAJAC,OAAA,CAAAF,WAAA,GAAAA,WAAA;AAMA;;;AAGA,SAAgBG,gBAAgBA,CAACF,GAAY;EAC3C,OACED,WAAW,CAACC,GAAG,CAAC,KACf,OAAO,IAAIA,GAAG,IAAI,MAAM,IAAIA,GAAG,IAAI,MAAM,IAAIA,GAAG,IAAI,SAAS,IAAIA,GAAG,CAAC;AAE1E;AALAC,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AAOA;;;AAGA,SAAgBC,YAAYA,CAC1BC,KAAoB,EACpBC,OAAe,EACfC,eAAwB;EAExBF,KAAK,CAACC,OAAO,GAAGA,OAAO;EACvBD,KAAK,CAACE,eAAe,GAAGA,eAAe,IAAIF,KAAK,CAACE,eAAe;EAChE,OAAOF,KAAK;AACd;AARAH,OAAA,CAAAE,YAAA,GAAAA,YAAA;AAUA;;;AAGA,SAAgBI,0BAA0BA,CAACC,MAE1C;EACC,IAAIH,OAAO,GAAGG,MAAM,CAACJ,KAAK,CAACC,OAAO;EAClC;EACA;EACA,IACEG,MAAM,CAACJ,KAAK,IACZ,OAAOI,MAAM,CAACJ,KAAK,KAAK,QAAQ,IAChC,MAAM,IAAII,MAAM,CAACJ,KAAK,EACtB;IACAC,OAAO,IAAI,IAAIG,MAAM,CAACJ,KAAK,CAACK,IAAI,EAAE;EACpC;EACA,OAAOJ,OAAO;AAChB;AAdAJ,OAAA,CAAAM,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}