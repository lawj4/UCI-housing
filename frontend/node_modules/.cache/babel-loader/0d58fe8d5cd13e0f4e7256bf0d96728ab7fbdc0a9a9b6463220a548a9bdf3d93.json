{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unpackArchive = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\nconst path = __importStar(require(\"path\"));\nconst extract_zip_1 = __importDefault(require(\"extract-zip\"));\nconst tar_fs_1 = __importDefault(require(\"tar-fs\"));\nconst unbzip2_stream_1 = __importDefault(require(\"unbzip2-stream\"));\n/**\n * @internal\n */\nasync function unpackArchive(archivePath, folderPath) {\n  if (archivePath.endsWith('.zip')) {\n    await (0, extract_zip_1.default)(archivePath, {\n      dir: folderPath\n    });\n  } else if (archivePath.endsWith('.tar.bz2')) {\n    await extractTar(archivePath, folderPath);\n  } else if (archivePath.endsWith('.dmg')) {\n    await (0, promises_1.mkdir)(folderPath);\n    await installDMG(archivePath, folderPath);\n  } else if (archivePath.endsWith('.exe')) {\n    // Firefox on Windows.\n    const result = (0, child_process_1.spawnSync)(archivePath, [`/ExtractDir=${folderPath}`], {\n      env: {\n        __compat_layer: 'RunAsInvoker'\n      }\n    });\n    if (result.status !== 0) {\n      throw new Error(`Failed to extract ${archivePath} to ${folderPath}: ${result.output}`);\n    }\n  } else {\n    throw new Error(`Unsupported archive format: ${archivePath}`);\n  }\n}\nexports.unpackArchive = unpackArchive;\n/**\n * @internal\n */\nfunction extractTar(tarPath, folderPath) {\n  return new Promise((fulfill, reject) => {\n    const tarStream = tar_fs_1.default.extract(folderPath);\n    tarStream.on('error', reject);\n    tarStream.on('finish', fulfill);\n    const readStream = (0, fs_1.createReadStream)(tarPath);\n    readStream.pipe((0, unbzip2_stream_1.default)()).pipe(tarStream);\n  });\n}\n/**\n * @internal\n */\nasync function installDMG(dmgPath, folderPath) {\n  const {\n    stdout\n  } = (0, child_process_1.spawnSync)(`hdiutil`, ['attach', '-nobrowse', '-noautoopen', dmgPath]);\n  const volumes = stdout.toString('utf8').match(/\\/Volumes\\/(.*)/m);\n  if (!volumes) {\n    throw new Error(`Could not find volume path in ${stdout}`);\n  }\n  const mountPath = volumes[0];\n  try {\n    const fileNames = await (0, promises_1.readdir)(mountPath);\n    const appName = fileNames.find(item => {\n      return typeof item === 'string' && item.endsWith('.app');\n    });\n    if (!appName) {\n      throw new Error(`Cannot find app in ${mountPath}`);\n    }\n    const mountedPath = path.join(mountPath, appName);\n    (0, child_process_1.spawnSync)('cp', ['-R', mountedPath, folderPath]);\n  } finally {\n    (0, child_process_1.spawnSync)('hdiutil', ['detach', mountPath, '-quiet']);\n  }\n}","map":{"version":3,"names":["child_process_1","require","fs_1","promises_1","path","__importStar","extract_zip_1","__importDefault","tar_fs_1","unbzip2_stream_1","unpackArchive","archivePath","folderPath","endsWith","default","dir","extractTar","mkdir","installDMG","result","spawnSync","env","__compat_layer","status","Error","output","exports","tarPath","Promise","fulfill","reject","tarStream","extract","on","readStream","createReadStream","pipe","dmgPath","stdout","volumes","toString","match","mountPath","fileNames","readdir","appName","find","item","mountedPath","join"],"sources":["/Users/lawj4/webDevelopment/node_modules/@puppeteer/browsers/src/fileUtil.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {spawnSync} from 'child_process';\nimport {createReadStream} from 'fs';\nimport {mkdir, readdir} from 'fs/promises';\nimport * as path from 'path';\n\nimport extractZip from 'extract-zip';\nimport tar from 'tar-fs';\nimport bzip from 'unbzip2-stream';\n\n/**\n * @internal\n */\nexport async function unpackArchive(\n  archivePath: string,\n  folderPath: string\n): Promise<void> {\n  if (archivePath.endsWith('.zip')) {\n    await extractZip(archivePath, {dir: folderPath});\n  } else if (archivePath.endsWith('.tar.bz2')) {\n    await extractTar(archivePath, folderPath);\n  } else if (archivePath.endsWith('.dmg')) {\n    await mkdir(folderPath);\n    await installDMG(archivePath, folderPath);\n  } else if (archivePath.endsWith('.exe')) {\n    // Firefox on Windows.\n    const result = spawnSync(archivePath, [`/ExtractDir=${folderPath}`], {\n      env: {\n        __compat_layer: 'RunAsInvoker',\n      },\n    });\n    if (result.status !== 0) {\n      throw new Error(\n        `Failed to extract ${archivePath} to ${folderPath}: ${result.output}`\n      );\n    }\n  } else {\n    throw new Error(`Unsupported archive format: ${archivePath}`);\n  }\n}\n\n/**\n * @internal\n */\nfunction extractTar(tarPath: string, folderPath: string): Promise<void> {\n  return new Promise((fulfill, reject) => {\n    const tarStream = tar.extract(folderPath);\n    tarStream.on('error', reject);\n    tarStream.on('finish', fulfill);\n    const readStream = createReadStream(tarPath);\n    readStream.pipe(bzip()).pipe(tarStream);\n  });\n}\n\n/**\n * @internal\n */\nasync function installDMG(dmgPath: string, folderPath: string): Promise<void> {\n  const {stdout} = spawnSync(`hdiutil`, [\n    'attach',\n    '-nobrowse',\n    '-noautoopen',\n    dmgPath,\n  ]);\n\n  const volumes = stdout.toString('utf8').match(/\\/Volumes\\/(.*)/m);\n  if (!volumes) {\n    throw new Error(`Could not find volume path in ${stdout}`);\n  }\n  const mountPath = volumes[0]!;\n\n  try {\n    const fileNames = await readdir(mountPath);\n    const appName = fileNames.find(item => {\n      return typeof item === 'string' && item.endsWith('.app');\n    });\n    if (!appName) {\n      throw new Error(`Cannot find app in ${mountPath}`);\n    }\n    const mountedPath = path.join(mountPath!, appName);\n\n    spawnSync('cp', ['-R', mountedPath, folderPath]);\n  } finally {\n    spawnSync('hdiutil', ['detach', mountPath, '-quiet']);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}