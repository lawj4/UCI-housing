{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FrameManager = void 0;\nconst CDPSession_js_1 = require(\"../api/CDPSession.js\");\nconst Frame_js_1 = require(\"../api/Frame.js\");\nconst EventEmitter_js_1 = require(\"../common/EventEmitter.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst assert_js_1 = require(\"../util/assert.js\");\nconst Deferred_js_1 = require(\"../util/Deferred.js\");\nconst disposable_js_1 = require(\"../util/disposable.js\");\nconst ErrorLike_js_1 = require(\"../util/ErrorLike.js\");\nconst CdpPreloadScript_js_1 = require(\"./CdpPreloadScript.js\");\nconst CDPSession_js_2 = require(\"./CDPSession.js\");\nconst Connection_js_1 = require(\"./Connection.js\");\nconst DeviceRequestPrompt_js_1 = require(\"./DeviceRequestPrompt.js\");\nconst ExecutionContext_js_1 = require(\"./ExecutionContext.js\");\nconst Frame_js_2 = require(\"./Frame.js\");\nconst FrameManagerEvents_js_1 = require(\"./FrameManagerEvents.js\");\nconst FrameTree_js_1 = require(\"./FrameTree.js\");\nconst IsolatedWorlds_js_1 = require(\"./IsolatedWorlds.js\");\nconst NetworkManager_js_1 = require(\"./NetworkManager.js\");\nconst TIME_FOR_WAITING_FOR_SWAP = 100; // ms.\n/**\n * A frame manager manages the frames for a given {@link Page | page}.\n *\n * @internal\n */\nclass FrameManager extends EventEmitter_js_1.EventEmitter {\n  #page;\n  #networkManager;\n  #timeoutSettings;\n  #isolatedWorlds = new Set();\n  #client;\n  #scriptsToEvaluateOnNewDocument = new Map();\n  #bindings = new Set();\n  _frameTree = new FrameTree_js_1.FrameTree();\n  /**\n   * Set of frame IDs stored to indicate if a frame has received a\n   * frameNavigated event so that frame tree responses could be ignored as the\n   * frameNavigated event usually contains the latest information.\n   */\n  #frameNavigatedReceived = new Set();\n  #deviceRequestPromptManagerMap = new WeakMap();\n  #frameTreeHandled;\n  get timeoutSettings() {\n    return this.#timeoutSettings;\n  }\n  get networkManager() {\n    return this.#networkManager;\n  }\n  get client() {\n    return this.#client;\n  }\n  constructor(client, page, timeoutSettings) {\n    super();\n    this.#client = client;\n    this.#page = page;\n    this.#networkManager = new NetworkManager_js_1.NetworkManager(this);\n    this.#timeoutSettings = timeoutSettings;\n    this.setupEventListeners(this.#client);\n    client.once(CDPSession_js_1.CDPSessionEvent.Disconnected, () => {\n      this.#onClientDisconnect().catch(util_js_1.debugError);\n    });\n  }\n  /**\n   * Called when the frame's client is disconnected. We don't know if the\n   * disconnect means that the frame is removed or if it will be replaced by a\n   * new frame. Therefore, we wait for a swap event.\n   */\n  async #onClientDisconnect() {\n    const mainFrame = this._frameTree.getMainFrame();\n    if (!mainFrame) {\n      return;\n    }\n    for (const child of mainFrame.childFrames()) {\n      this.#removeFramesRecursively(child);\n    }\n    const swapped = Deferred_js_1.Deferred.create({\n      timeout: TIME_FOR_WAITING_FOR_SWAP,\n      message: 'Frame was not swapped'\n    });\n    mainFrame.once(Frame_js_1.FrameEvent.FrameSwappedByActivation, () => {\n      swapped.resolve();\n    });\n    try {\n      await swapped.valueOrThrow();\n    } catch (err) {\n      this.#removeFramesRecursively(mainFrame);\n    }\n  }\n  /**\n   * When the main frame is replaced by another main frame,\n   * we maintain the main frame object identity while updating\n   * its frame tree and ID.\n   */\n  async swapFrameTree(client) {\n    this.#client = client;\n    (0, assert_js_1.assert)(this.#client instanceof CDPSession_js_2.CdpCDPSession, 'CDPSession is not an instance of CDPSessionImpl.');\n    const frame = this._frameTree.getMainFrame();\n    if (frame) {\n      this.#frameNavigatedReceived.add(this.#client._target()._targetId);\n      this._frameTree.removeFrame(frame);\n      frame.updateId(this.#client._target()._targetId);\n      this._frameTree.addFrame(frame);\n      frame.updateClient(client);\n    }\n    this.setupEventListeners(client);\n    client.once(CDPSession_js_1.CDPSessionEvent.Disconnected, () => {\n      this.#onClientDisconnect().catch(util_js_1.debugError);\n    });\n    await this.initialize(client, frame);\n    await this.#networkManager.addClient(client);\n    if (frame) {\n      frame.emit(Frame_js_1.FrameEvent.FrameSwappedByActivation, undefined);\n    }\n  }\n  async registerSpeculativeSession(client) {\n    await this.#networkManager.addClient(client);\n  }\n  setupEventListeners(session) {\n    session.on('Page.frameAttached', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameAttached(session, event.frameId, event.parentFrameId);\n    });\n    session.on('Page.frameNavigated', async event => {\n      this.#frameNavigatedReceived.add(event.frame.id);\n      await this.#frameTreeHandled?.valueOrThrow();\n      void this.#onFrameNavigated(event.frame, event.type);\n    });\n    session.on('Page.navigatedWithinDocument', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameNavigatedWithinDocument(event.frameId, event.url);\n    });\n    session.on('Page.frameDetached', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameDetached(event.frameId, event.reason);\n    });\n    session.on('Page.frameStartedLoading', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameStartedLoading(event.frameId);\n    });\n    session.on('Page.frameStoppedLoading', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameStoppedLoading(event.frameId);\n    });\n    session.on('Runtime.executionContextCreated', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onExecutionContextCreated(event.context, session);\n    });\n    session.on('Page.lifecycleEvent', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onLifecycleEvent(event);\n    });\n  }\n  async initialize(client, frame) {\n    try {\n      this.#frameTreeHandled?.resolve();\n      this.#frameTreeHandled = Deferred_js_1.Deferred.create();\n      // We need to schedule all these commands while the target is paused,\n      // therefore, it needs to happen synchroniously. At the same time we\n      // should not start processing execution context and frame events before\n      // we received the initial information about the frame tree.\n      await Promise.all([this.#networkManager.addClient(client), client.send('Page.enable'), client.send('Page.getFrameTree').then(({\n        frameTree\n      }) => {\n        this.#handleFrameTree(client, frameTree);\n        this.#frameTreeHandled?.resolve();\n      }), client.send('Page.setLifecycleEventsEnabled', {\n        enabled: true\n      }), client.send('Runtime.enable').then(() => {\n        return this.#createIsolatedWorld(client, util_js_1.UTILITY_WORLD_NAME);\n      }), ...(frame ? Array.from(this.#scriptsToEvaluateOnNewDocument.values()) : []).map(script => {\n        return frame?.addPreloadScript(script);\n      }), ...(frame ? Array.from(this.#bindings.values()) : []).map(binding => {\n        return frame?.addExposedFunctionBinding(binding);\n      })]);\n    } catch (error) {\n      this.#frameTreeHandled?.resolve();\n      // The target might have been closed before the initialization finished.\n      if ((0, ErrorLike_js_1.isErrorLike)(error) && (0, Connection_js_1.isTargetClosedError)(error)) {\n        return;\n      }\n      throw error;\n    }\n  }\n  page() {\n    return this.#page;\n  }\n  mainFrame() {\n    const mainFrame = this._frameTree.getMainFrame();\n    (0, assert_js_1.assert)(mainFrame, 'Requesting main frame too early!');\n    return mainFrame;\n  }\n  frames() {\n    return Array.from(this._frameTree.frames());\n  }\n  frame(frameId) {\n    return this._frameTree.getById(frameId) || null;\n  }\n  async addExposedFunctionBinding(binding) {\n    this.#bindings.add(binding);\n    await Promise.all(this.frames().map(async frame => {\n      return await frame.addExposedFunctionBinding(binding);\n    }));\n  }\n  async removeExposedFunctionBinding(binding) {\n    this.#bindings.delete(binding);\n    await Promise.all(this.frames().map(async frame => {\n      return await frame.removeExposedFunctionBinding(binding);\n    }));\n  }\n  async evaluateOnNewDocument(source) {\n    const {\n      identifier\n    } = await this.mainFrame()._client().send('Page.addScriptToEvaluateOnNewDocument', {\n      source\n    });\n    const preloadScript = new CdpPreloadScript_js_1.CdpPreloadScript(this.mainFrame(), identifier, source);\n    this.#scriptsToEvaluateOnNewDocument.set(identifier, preloadScript);\n    await Promise.all(this.frames().map(async frame => {\n      return await frame.addPreloadScript(preloadScript);\n    }));\n    return {\n      identifier\n    };\n  }\n  async removeScriptToEvaluateOnNewDocument(identifier) {\n    const preloadScript = this.#scriptsToEvaluateOnNewDocument.get(identifier);\n    if (!preloadScript) {\n      throw new Error(`Script to evaluate on new document with id ${identifier} not found`);\n    }\n    this.#scriptsToEvaluateOnNewDocument.delete(identifier);\n    await Promise.all(this.frames().map(frame => {\n      const identifier = preloadScript.getIdForFrame(frame);\n      if (!identifier) {\n        return;\n      }\n      return frame._client().send('Page.removeScriptToEvaluateOnNewDocument', {\n        identifier\n      }).catch(util_js_1.debugError);\n    }));\n  }\n  onAttachedToTarget(target) {\n    if (target._getTargetInfo().type !== 'iframe') {\n      return;\n    }\n    const frame = this.frame(target._getTargetInfo().targetId);\n    if (frame) {\n      frame.updateClient(target._session());\n    }\n    this.setupEventListeners(target._session());\n    void this.initialize(target._session(), frame);\n  }\n  _deviceRequestPromptManager(client) {\n    let manager = this.#deviceRequestPromptManagerMap.get(client);\n    if (manager === undefined) {\n      manager = new DeviceRequestPrompt_js_1.DeviceRequestPromptManager(client, this.#timeoutSettings);\n      this.#deviceRequestPromptManagerMap.set(client, manager);\n    }\n    return manager;\n  }\n  #onLifecycleEvent(event) {\n    const frame = this.frame(event.frameId);\n    if (!frame) {\n      return;\n    }\n    frame._onLifecycleEvent(event.loaderId, event.name);\n    this.emit(FrameManagerEvents_js_1.FrameManagerEvent.LifecycleEvent, frame);\n    frame.emit(Frame_js_1.FrameEvent.LifecycleEvent, undefined);\n  }\n  #onFrameStartedLoading(frameId) {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    frame._onLoadingStarted();\n  }\n  #onFrameStoppedLoading(frameId) {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    frame._onLoadingStopped();\n    this.emit(FrameManagerEvents_js_1.FrameManagerEvent.LifecycleEvent, frame);\n    frame.emit(Frame_js_1.FrameEvent.LifecycleEvent, undefined);\n  }\n  #handleFrameTree(session, frameTree) {\n    if (frameTree.frame.parentId) {\n      this.#onFrameAttached(session, frameTree.frame.id, frameTree.frame.parentId);\n    }\n    if (!this.#frameNavigatedReceived.has(frameTree.frame.id)) {\n      void this.#onFrameNavigated(frameTree.frame, 'Navigation');\n    } else {\n      this.#frameNavigatedReceived.delete(frameTree.frame.id);\n    }\n    if (!frameTree.childFrames) {\n      return;\n    }\n    for (const child of frameTree.childFrames) {\n      this.#handleFrameTree(session, child);\n    }\n  }\n  #onFrameAttached(session, frameId, parentFrameId) {\n    let frame = this.frame(frameId);\n    if (frame) {\n      if (session && frame.client !== this.#client) {\n        // TODO: check this condition. It might not be correct for\n        // nested frames.\n        // If an OOP iframes becomes a normal iframe\n        // again it is first attached to the parent page before the\n        // target is removed.\n        frame.updateClient(session);\n      }\n      return;\n    }\n    frame = new Frame_js_2.CdpFrame(this, frameId, parentFrameId, session);\n    this._frameTree.addFrame(frame);\n    this.emit(FrameManagerEvents_js_1.FrameManagerEvent.FrameAttached, frame);\n  }\n  async #onFrameNavigated(framePayload, navigationType) {\n    const frameId = framePayload.id;\n    const isMainFrame = !framePayload.parentId;\n    let frame = this._frameTree.getById(frameId);\n    // Detach all child frames first.\n    if (frame) {\n      for (const child of frame.childFrames()) {\n        this.#removeFramesRecursively(child);\n      }\n    }\n    // Update or create main frame.\n    if (isMainFrame) {\n      if (frame) {\n        // Update frame id to retain frame identity on cross-process navigation.\n        this._frameTree.removeFrame(frame);\n        frame._id = frameId;\n      } else {\n        // Initial main frame navigation.\n        frame = new Frame_js_2.CdpFrame(this, frameId, undefined, this.#client);\n      }\n      this._frameTree.addFrame(frame);\n    }\n    frame = await this._frameTree.waitForFrame(frameId);\n    frame._navigated(framePayload);\n    this.emit(FrameManagerEvents_js_1.FrameManagerEvent.FrameNavigated, frame);\n    frame.emit(Frame_js_1.FrameEvent.FrameNavigated, navigationType);\n  }\n  async #createIsolatedWorld(session, name) {\n    const key = `${session.id()}:${name}`;\n    if (this.#isolatedWorlds.has(key)) {\n      return;\n    }\n    await session.send('Page.addScriptToEvaluateOnNewDocument', {\n      source: `//# sourceURL=${util_js_1.PuppeteerURL.INTERNAL_URL}`,\n      worldName: name\n    });\n    await Promise.all(this.frames().filter(frame => {\n      return frame.client === session;\n    }).map(frame => {\n      // Frames might be removed before we send this, so we don't want to\n      // throw an error.\n      return session.send('Page.createIsolatedWorld', {\n        frameId: frame._id,\n        worldName: name,\n        grantUniveralAccess: true\n      }).catch(util_js_1.debugError);\n    }));\n    this.#isolatedWorlds.add(key);\n  }\n  #onFrameNavigatedWithinDocument(frameId, url) {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    frame._navigatedWithinDocument(url);\n    this.emit(FrameManagerEvents_js_1.FrameManagerEvent.FrameNavigatedWithinDocument, frame);\n    frame.emit(Frame_js_1.FrameEvent.FrameNavigatedWithinDocument, undefined);\n    this.emit(FrameManagerEvents_js_1.FrameManagerEvent.FrameNavigated, frame);\n    frame.emit(Frame_js_1.FrameEvent.FrameNavigated, 'Navigation');\n  }\n  #onFrameDetached(frameId, reason) {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    switch (reason) {\n      case 'remove':\n        // Only remove the frame if the reason for the detached event is\n        // an actual removement of the frame.\n        // For frames that become OOP iframes, the reason would be 'swap'.\n        this.#removeFramesRecursively(frame);\n        break;\n      case 'swap':\n        this.emit(FrameManagerEvents_js_1.FrameManagerEvent.FrameSwapped, frame);\n        frame.emit(Frame_js_1.FrameEvent.FrameSwapped, undefined);\n        break;\n    }\n  }\n  #onExecutionContextCreated(contextPayload, session) {\n    const auxData = contextPayload.auxData;\n    const frameId = auxData && auxData.frameId;\n    const frame = typeof frameId === 'string' ? this.frame(frameId) : undefined;\n    let world;\n    if (frame) {\n      // Only care about execution contexts created for the current session.\n      if (frame.client !== session) {\n        return;\n      }\n      if (contextPayload.auxData && contextPayload.auxData['isDefault']) {\n        world = frame.worlds[IsolatedWorlds_js_1.MAIN_WORLD];\n      } else if (contextPayload.name === util_js_1.UTILITY_WORLD_NAME) {\n        // In case of multiple sessions to the same target, there's a race between\n        // connections so we might end up creating multiple isolated worlds.\n        // We can use either.\n        world = frame.worlds[IsolatedWorlds_js_1.PUPPETEER_WORLD];\n      }\n    }\n    // If there is no world, the context is not meant to be handled by us.\n    if (!world) {\n      return;\n    }\n    const context = new ExecutionContext_js_1.ExecutionContext(frame?.client || this.#client, contextPayload, world);\n    world.setContext(context);\n  }\n  #removeFramesRecursively(frame) {\n    for (const child of frame.childFrames()) {\n      this.#removeFramesRecursively(child);\n    }\n    frame[disposable_js_1.disposeSymbol]();\n    this._frameTree.removeFrame(frame);\n    this.emit(FrameManagerEvents_js_1.FrameManagerEvent.FrameDetached, frame);\n    frame.emit(Frame_js_1.FrameEvent.FrameDetached, frame);\n  }\n}\nexports.FrameManager = FrameManager;","map":{"version":3,"names":["CDPSession_js_1","require","Frame_js_1","EventEmitter_js_1","util_js_1","assert_js_1","Deferred_js_1","disposable_js_1","ErrorLike_js_1","CdpPreloadScript_js_1","CDPSession_js_2","Connection_js_1","DeviceRequestPrompt_js_1","ExecutionContext_js_1","Frame_js_2","FrameManagerEvents_js_1","FrameTree_js_1","IsolatedWorlds_js_1","NetworkManager_js_1","TIME_FOR_WAITING_FOR_SWAP","FrameManager","EventEmitter","page","networkManager","timeoutSettings","isolatedWorlds","Set","client","scriptsToEvaluateOnNewDocument","Map","bindings","_frameTree","FrameTree","frameNavigatedReceived","deviceRequestPromptManagerMap","WeakMap","frameTreeHandled","constructor","NetworkManager","setupEventListeners","once","CDPSessionEvent","Disconnected","onClientDisconnect","catch","debugError","#onClientDisconnect","mainFrame","getMainFrame","child","childFrames","removeFramesRecursively","swapped","Deferred","create","timeout","message","FrameEvent","FrameSwappedByActivation","resolve","valueOrThrow","err","swapFrameTree","assert","CdpCDPSession","frame","add","_target","_targetId","removeFrame","updateId","addFrame","updateClient","initialize","addClient","emit","undefined","registerSpeculativeSession","session","on","event","onFrameAttached","frameId","parentFrameId","id","onFrameNavigated","type","onFrameNavigatedWithinDocument","url","onFrameDetached","reason","onFrameStartedLoading","onFrameStoppedLoading","onExecutionContextCreated","context","onLifecycleEvent","Promise","all","send","then","frameTree","handleFrameTree","enabled","createIsolatedWorld","UTILITY_WORLD_NAME","Array","from","values","map","script","addPreloadScript","binding","addExposedFunctionBinding","error","isErrorLike","isTargetClosedError","frames","getById","removeExposedFunctionBinding","delete","evaluateOnNewDocument","source","identifier","_client","preloadScript","CdpPreloadScript","set","removeScriptToEvaluateOnNewDocument","get","Error","getIdForFrame","onAttachedToTarget","target","_getTargetInfo","targetId","_session","_deviceRequestPromptManager","manager","DeviceRequestPromptManager","#onLifecycleEvent","_onLifecycleEvent","loaderId","name","FrameManagerEvent","LifecycleEvent","#onFrameStartedLoading","_onLoadingStarted","#onFrameStoppedLoading","_onLoadingStopped","#handleFrameTree","parentId","has","#onFrameAttached","CdpFrame","FrameAttached","#onFrameNavigated","framePayload","navigationType","isMainFrame","_id","waitForFrame","_navigated","FrameNavigated","#createIsolatedWorld","key","PuppeteerURL","INTERNAL_URL","worldName","filter","grantUniveralAccess","#onFrameNavigatedWithinDocument","_navigatedWithinDocument","FrameNavigatedWithinDocument","#onFrameDetached","FrameSwapped","#onExecutionContextCreated","contextPayload","auxData","world","worlds","MAIN_WORLD","PUPPETEER_WORLD","ExecutionContext","setContext","#removeFramesRecursively","disposeSymbol","FrameDetached","exports"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/cdp/FrameManager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport {type CDPSession, CDPSessionEvent} from '../api/CDPSession.js';\nimport {FrameEvent} from '../api/Frame.js';\nimport type {NewDocumentScriptEvaluation} from '../api/Page.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport type {TimeoutSettings} from '../common/TimeoutSettings.js';\nimport {debugError, PuppeteerURL, UTILITY_WORLD_NAME} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {disposeSymbol} from '../util/disposable.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\nimport type {Binding} from './Binding.js';\nimport {CdpPreloadScript} from './CdpPreloadScript.js';\nimport {CdpCDPSession} from './CDPSession.js';\nimport {isTargetClosedError} from './Connection.js';\nimport {DeviceRequestPromptManager} from './DeviceRequestPrompt.js';\nimport {ExecutionContext} from './ExecutionContext.js';\nimport {CdpFrame} from './Frame.js';\nimport type {FrameManagerEvents} from './FrameManagerEvents.js';\nimport {FrameManagerEvent} from './FrameManagerEvents.js';\nimport {FrameTree} from './FrameTree.js';\nimport type {IsolatedWorld} from './IsolatedWorld.js';\nimport {MAIN_WORLD, PUPPETEER_WORLD} from './IsolatedWorlds.js';\nimport {NetworkManager} from './NetworkManager.js';\nimport type {CdpPage} from './Page.js';\nimport type {CdpTarget} from './Target.js';\n\nconst TIME_FOR_WAITING_FOR_SWAP = 100; // ms.\n\n/**\n * A frame manager manages the frames for a given {@link Page | page}.\n *\n * @internal\n */\nexport class FrameManager extends EventEmitter<FrameManagerEvents> {\n  #page: CdpPage;\n  #networkManager: NetworkManager;\n  #timeoutSettings: TimeoutSettings;\n  #isolatedWorlds = new Set<string>();\n  #client: CDPSession;\n  #scriptsToEvaluateOnNewDocument = new Map<string, CdpPreloadScript>();\n  #bindings = new Set<Binding>();\n\n  _frameTree = new FrameTree<CdpFrame>();\n\n  /**\n   * Set of frame IDs stored to indicate if a frame has received a\n   * frameNavigated event so that frame tree responses could be ignored as the\n   * frameNavigated event usually contains the latest information.\n   */\n  #frameNavigatedReceived = new Set<string>();\n\n  #deviceRequestPromptManagerMap = new WeakMap<\n    CDPSession,\n    DeviceRequestPromptManager\n  >();\n\n  #frameTreeHandled?: Deferred<void>;\n\n  get timeoutSettings(): TimeoutSettings {\n    return this.#timeoutSettings;\n  }\n\n  get networkManager(): NetworkManager {\n    return this.#networkManager;\n  }\n\n  get client(): CDPSession {\n    return this.#client;\n  }\n\n  constructor(\n    client: CDPSession,\n    page: CdpPage,\n    timeoutSettings: TimeoutSettings\n  ) {\n    super();\n    this.#client = client;\n    this.#page = page;\n    this.#networkManager = new NetworkManager(this);\n    this.#timeoutSettings = timeoutSettings;\n    this.setupEventListeners(this.#client);\n    client.once(CDPSessionEvent.Disconnected, () => {\n      this.#onClientDisconnect().catch(debugError);\n    });\n  }\n\n  /**\n   * Called when the frame's client is disconnected. We don't know if the\n   * disconnect means that the frame is removed or if it will be replaced by a\n   * new frame. Therefore, we wait for a swap event.\n   */\n  async #onClientDisconnect() {\n    const mainFrame = this._frameTree.getMainFrame();\n    if (!mainFrame) {\n      return;\n    }\n    for (const child of mainFrame.childFrames()) {\n      this.#removeFramesRecursively(child);\n    }\n    const swapped = Deferred.create<void>({\n      timeout: TIME_FOR_WAITING_FOR_SWAP,\n      message: 'Frame was not swapped',\n    });\n    mainFrame.once(FrameEvent.FrameSwappedByActivation, () => {\n      swapped.resolve();\n    });\n    try {\n      await swapped.valueOrThrow();\n    } catch (err) {\n      this.#removeFramesRecursively(mainFrame);\n    }\n  }\n\n  /**\n   * When the main frame is replaced by another main frame,\n   * we maintain the main frame object identity while updating\n   * its frame tree and ID.\n   */\n  async swapFrameTree(client: CDPSession): Promise<void> {\n    this.#client = client;\n    assert(\n      this.#client instanceof CdpCDPSession,\n      'CDPSession is not an instance of CDPSessionImpl.'\n    );\n    const frame = this._frameTree.getMainFrame();\n    if (frame) {\n      this.#frameNavigatedReceived.add(this.#client._target()._targetId);\n      this._frameTree.removeFrame(frame);\n      frame.updateId(this.#client._target()._targetId);\n      this._frameTree.addFrame(frame);\n      frame.updateClient(client);\n    }\n    this.setupEventListeners(client);\n    client.once(CDPSessionEvent.Disconnected, () => {\n      this.#onClientDisconnect().catch(debugError);\n    });\n    await this.initialize(client, frame);\n    await this.#networkManager.addClient(client);\n    if (frame) {\n      frame.emit(FrameEvent.FrameSwappedByActivation, undefined);\n    }\n  }\n\n  async registerSpeculativeSession(client: CdpCDPSession): Promise<void> {\n    await this.#networkManager.addClient(client);\n  }\n\n  private setupEventListeners(session: CDPSession) {\n    session.on('Page.frameAttached', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameAttached(session, event.frameId, event.parentFrameId);\n    });\n    session.on('Page.frameNavigated', async event => {\n      this.#frameNavigatedReceived.add(event.frame.id);\n      await this.#frameTreeHandled?.valueOrThrow();\n      void this.#onFrameNavigated(event.frame, event.type);\n    });\n    session.on('Page.navigatedWithinDocument', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameNavigatedWithinDocument(event.frameId, event.url);\n    });\n    session.on(\n      'Page.frameDetached',\n      async (event: Protocol.Page.FrameDetachedEvent) => {\n        await this.#frameTreeHandled?.valueOrThrow();\n        this.#onFrameDetached(\n          event.frameId,\n          event.reason as Protocol.Page.FrameDetachedEventReason\n        );\n      }\n    );\n    session.on('Page.frameStartedLoading', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameStartedLoading(event.frameId);\n    });\n    session.on('Page.frameStoppedLoading', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onFrameStoppedLoading(event.frameId);\n    });\n    session.on('Runtime.executionContextCreated', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onExecutionContextCreated(event.context, session);\n    });\n    session.on('Page.lifecycleEvent', async event => {\n      await this.#frameTreeHandled?.valueOrThrow();\n      this.#onLifecycleEvent(event);\n    });\n  }\n\n  async initialize(client: CDPSession, frame?: CdpFrame | null): Promise<void> {\n    try {\n      this.#frameTreeHandled?.resolve();\n      this.#frameTreeHandled = Deferred.create();\n      // We need to schedule all these commands while the target is paused,\n      // therefore, it needs to happen synchroniously. At the same time we\n      // should not start processing execution context and frame events before\n      // we received the initial information about the frame tree.\n      await Promise.all([\n        this.#networkManager.addClient(client),\n        client.send('Page.enable'),\n        client.send('Page.getFrameTree').then(({frameTree}) => {\n          this.#handleFrameTree(client, frameTree);\n          this.#frameTreeHandled?.resolve();\n        }),\n        client.send('Page.setLifecycleEventsEnabled', {enabled: true}),\n        client.send('Runtime.enable').then(() => {\n          return this.#createIsolatedWorld(client, UTILITY_WORLD_NAME);\n        }),\n        ...(frame\n          ? Array.from(this.#scriptsToEvaluateOnNewDocument.values())\n          : []\n        ).map(script => {\n          return frame?.addPreloadScript(script);\n        }),\n        ...(frame ? Array.from(this.#bindings.values()) : []).map(binding => {\n          return frame?.addExposedFunctionBinding(binding);\n        }),\n      ]);\n    } catch (error) {\n      this.#frameTreeHandled?.resolve();\n      // The target might have been closed before the initialization finished.\n      if (isErrorLike(error) && isTargetClosedError(error)) {\n        return;\n      }\n\n      throw error;\n    }\n  }\n\n  page(): CdpPage {\n    return this.#page;\n  }\n\n  mainFrame(): CdpFrame {\n    const mainFrame = this._frameTree.getMainFrame();\n    assert(mainFrame, 'Requesting main frame too early!');\n    return mainFrame;\n  }\n\n  frames(): CdpFrame[] {\n    return Array.from(this._frameTree.frames());\n  }\n\n  frame(frameId: string): CdpFrame | null {\n    return this._frameTree.getById(frameId) || null;\n  }\n\n  async addExposedFunctionBinding(binding: Binding): Promise<void> {\n    this.#bindings.add(binding);\n    await Promise.all(\n      this.frames().map(async frame => {\n        return await frame.addExposedFunctionBinding(binding);\n      })\n    );\n  }\n\n  async removeExposedFunctionBinding(binding: Binding): Promise<void> {\n    this.#bindings.delete(binding);\n    await Promise.all(\n      this.frames().map(async frame => {\n        return await frame.removeExposedFunctionBinding(binding);\n      })\n    );\n  }\n\n  async evaluateOnNewDocument(\n    source: string\n  ): Promise<NewDocumentScriptEvaluation> {\n    const {identifier} = await this.mainFrame()\n      ._client()\n      .send('Page.addScriptToEvaluateOnNewDocument', {\n        source,\n      });\n\n    const preloadScript = new CdpPreloadScript(\n      this.mainFrame(),\n      identifier,\n      source\n    );\n\n    this.#scriptsToEvaluateOnNewDocument.set(identifier, preloadScript);\n\n    await Promise.all(\n      this.frames().map(async frame => {\n        return await frame.addPreloadScript(preloadScript);\n      })\n    );\n\n    return {identifier};\n  }\n\n  async removeScriptToEvaluateOnNewDocument(identifier: string): Promise<void> {\n    const preloadScript = this.#scriptsToEvaluateOnNewDocument.get(identifier);\n    if (!preloadScript) {\n      throw new Error(\n        `Script to evaluate on new document with id ${identifier} not found`\n      );\n    }\n\n    this.#scriptsToEvaluateOnNewDocument.delete(identifier);\n\n    await Promise.all(\n      this.frames().map(frame => {\n        const identifier = preloadScript.getIdForFrame(frame);\n        if (!identifier) {\n          return;\n        }\n        return frame\n          ._client()\n          .send('Page.removeScriptToEvaluateOnNewDocument', {\n            identifier,\n          })\n          .catch(debugError);\n      })\n    );\n  }\n\n  onAttachedToTarget(target: CdpTarget): void {\n    if (target._getTargetInfo().type !== 'iframe') {\n      return;\n    }\n\n    const frame = this.frame(target._getTargetInfo().targetId);\n    if (frame) {\n      frame.updateClient(target._session()!);\n    }\n    this.setupEventListeners(target._session()!);\n    void this.initialize(target._session()!, frame);\n  }\n\n  _deviceRequestPromptManager(client: CDPSession): DeviceRequestPromptManager {\n    let manager = this.#deviceRequestPromptManagerMap.get(client);\n    if (manager === undefined) {\n      manager = new DeviceRequestPromptManager(client, this.#timeoutSettings);\n      this.#deviceRequestPromptManagerMap.set(client, manager);\n    }\n    return manager;\n  }\n\n  #onLifecycleEvent(event: Protocol.Page.LifecycleEventEvent): void {\n    const frame = this.frame(event.frameId);\n    if (!frame) {\n      return;\n    }\n    frame._onLifecycleEvent(event.loaderId, event.name);\n    this.emit(FrameManagerEvent.LifecycleEvent, frame);\n    frame.emit(FrameEvent.LifecycleEvent, undefined);\n  }\n\n  #onFrameStartedLoading(frameId: string): void {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    frame._onLoadingStarted();\n  }\n\n  #onFrameStoppedLoading(frameId: string): void {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    frame._onLoadingStopped();\n    this.emit(FrameManagerEvent.LifecycleEvent, frame);\n    frame.emit(FrameEvent.LifecycleEvent, undefined);\n  }\n\n  #handleFrameTree(\n    session: CDPSession,\n    frameTree: Protocol.Page.FrameTree\n  ): void {\n    if (frameTree.frame.parentId) {\n      this.#onFrameAttached(\n        session,\n        frameTree.frame.id,\n        frameTree.frame.parentId\n      );\n    }\n    if (!this.#frameNavigatedReceived.has(frameTree.frame.id)) {\n      void this.#onFrameNavigated(frameTree.frame, 'Navigation');\n    } else {\n      this.#frameNavigatedReceived.delete(frameTree.frame.id);\n    }\n\n    if (!frameTree.childFrames) {\n      return;\n    }\n\n    for (const child of frameTree.childFrames) {\n      this.#handleFrameTree(session, child);\n    }\n  }\n\n  #onFrameAttached(\n    session: CDPSession,\n    frameId: string,\n    parentFrameId: string\n  ): void {\n    let frame = this.frame(frameId);\n    if (frame) {\n      if (session && frame.client !== this.#client) {\n        // TODO: check this condition. It might not be correct for\n        // nested frames.\n        // If an OOP iframes becomes a normal iframe\n        // again it is first attached to the parent page before the\n        // target is removed.\n        frame.updateClient(session);\n      }\n      return;\n    }\n\n    frame = new CdpFrame(this, frameId, parentFrameId, session);\n    this._frameTree.addFrame(frame);\n    this.emit(FrameManagerEvent.FrameAttached, frame);\n  }\n\n  async #onFrameNavigated(\n    framePayload: Protocol.Page.Frame,\n    navigationType: Protocol.Page.NavigationType\n  ): Promise<void> {\n    const frameId = framePayload.id;\n    const isMainFrame = !framePayload.parentId;\n\n    let frame = this._frameTree.getById(frameId);\n\n    // Detach all child frames first.\n    if (frame) {\n      for (const child of frame.childFrames()) {\n        this.#removeFramesRecursively(child);\n      }\n    }\n\n    // Update or create main frame.\n    if (isMainFrame) {\n      if (frame) {\n        // Update frame id to retain frame identity on cross-process navigation.\n        this._frameTree.removeFrame(frame);\n        frame._id = frameId;\n      } else {\n        // Initial main frame navigation.\n        frame = new CdpFrame(this, frameId, undefined, this.#client);\n      }\n      this._frameTree.addFrame(frame);\n    }\n\n    frame = await this._frameTree.waitForFrame(frameId);\n    frame._navigated(framePayload);\n    this.emit(FrameManagerEvent.FrameNavigated, frame);\n    frame.emit(FrameEvent.FrameNavigated, navigationType);\n  }\n\n  async #createIsolatedWorld(session: CDPSession, name: string): Promise<void> {\n    const key = `${session.id()}:${name}`;\n\n    if (this.#isolatedWorlds.has(key)) {\n      return;\n    }\n\n    await session.send('Page.addScriptToEvaluateOnNewDocument', {\n      source: `//# sourceURL=${PuppeteerURL.INTERNAL_URL}`,\n      worldName: name,\n    });\n\n    await Promise.all(\n      this.frames()\n        .filter(frame => {\n          return frame.client === session;\n        })\n        .map(frame => {\n          // Frames might be removed before we send this, so we don't want to\n          // throw an error.\n          return session\n            .send('Page.createIsolatedWorld', {\n              frameId: frame._id,\n              worldName: name,\n              grantUniveralAccess: true,\n            })\n            .catch(debugError);\n        })\n    );\n\n    this.#isolatedWorlds.add(key);\n  }\n\n  #onFrameNavigatedWithinDocument(frameId: string, url: string): void {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    frame._navigatedWithinDocument(url);\n    this.emit(FrameManagerEvent.FrameNavigatedWithinDocument, frame);\n    frame.emit(FrameEvent.FrameNavigatedWithinDocument, undefined);\n    this.emit(FrameManagerEvent.FrameNavigated, frame);\n    frame.emit(FrameEvent.FrameNavigated, 'Navigation');\n  }\n\n  #onFrameDetached(\n    frameId: string,\n    reason: Protocol.Page.FrameDetachedEventReason\n  ): void {\n    const frame = this.frame(frameId);\n    if (!frame) {\n      return;\n    }\n    switch (reason) {\n      case 'remove':\n        // Only remove the frame if the reason for the detached event is\n        // an actual removement of the frame.\n        // For frames that become OOP iframes, the reason would be 'swap'.\n        this.#removeFramesRecursively(frame);\n        break;\n      case 'swap':\n        this.emit(FrameManagerEvent.FrameSwapped, frame);\n        frame.emit(FrameEvent.FrameSwapped, undefined);\n        break;\n    }\n  }\n\n  #onExecutionContextCreated(\n    contextPayload: Protocol.Runtime.ExecutionContextDescription,\n    session: CDPSession\n  ): void {\n    const auxData = contextPayload.auxData as {frameId?: string} | undefined;\n    const frameId = auxData && auxData.frameId;\n    const frame = typeof frameId === 'string' ? this.frame(frameId) : undefined;\n    let world: IsolatedWorld | undefined;\n    if (frame) {\n      // Only care about execution contexts created for the current session.\n      if (frame.client !== session) {\n        return;\n      }\n      if (contextPayload.auxData && contextPayload.auxData['isDefault']) {\n        world = frame.worlds[MAIN_WORLD];\n      } else if (contextPayload.name === UTILITY_WORLD_NAME) {\n        // In case of multiple sessions to the same target, there's a race between\n        // connections so we might end up creating multiple isolated worlds.\n        // We can use either.\n        world = frame.worlds[PUPPETEER_WORLD];\n      }\n    }\n    // If there is no world, the context is not meant to be handled by us.\n    if (!world) {\n      return;\n    }\n    const context = new ExecutionContext(\n      frame?.client || this.#client,\n      contextPayload,\n      world\n    );\n    world.setContext(context);\n  }\n\n  #removeFramesRecursively(frame: CdpFrame): void {\n    for (const child of frame.childFrames()) {\n      this.#removeFramesRecursively(child);\n    }\n    frame[disposeSymbol]();\n    this._frameTree.removeFrame(frame);\n    this.emit(FrameManagerEvent.FrameDetached, frame);\n    frame.emit(FrameEvent.FrameDetached, frame);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}