{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SessionProcessor = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nclass SessionProcessor {\n  #eventManager;\n  #browserCdpClient;\n  #initConnection;\n  #created = false;\n  constructor(eventManager, browserCdpClient, initConnection) {\n    this.#eventManager = eventManager;\n    this.#browserCdpClient = browserCdpClient;\n    this.#initConnection = initConnection;\n  }\n  status() {\n    return {\n      ready: false,\n      message: 'already connected'\n    };\n  }\n  #mergeCapabilities(capabilitiesRequest) {\n    // Roughly following https://www.w3.org/TR/webdriver2/#dfn-capabilities-processing.\n    // Validations should already be done by the parser.\n    const mergedCapabilities = [];\n    for (const first of capabilitiesRequest.firstMatch ?? [{}]) {\n      const result = {\n        ...capabilitiesRequest.alwaysMatch\n      };\n      for (const key of Object.keys(first)) {\n        if (result[key] !== undefined) {\n          throw new protocol_js_1.InvalidArgumentException(`Capability ${key} in firstMatch is already defined in alwaysMatch`);\n        }\n        result[key] = first[key];\n      }\n      mergedCapabilities.push(result);\n    }\n    const match = mergedCapabilities.find(c => c.browserName === 'chrome') ?? mergedCapabilities[0] ?? {};\n    match.unhandledPromptBehavior = this.#getUnhandledPromptBehavior(match.unhandledPromptBehavior);\n    return match;\n  }\n  #getUnhandledPromptBehavior(capabilityValue) {\n    if (capabilityValue === undefined) {\n      return undefined;\n    }\n    if (typeof capabilityValue === 'object') {\n      // Do not validate capabilities. Incorrect ones will be ignored by Mapper.\n      return capabilityValue;\n    }\n    if (typeof capabilityValue !== 'string') {\n      throw new protocol_js_1.InvalidArgumentException(`Unexpected 'unhandledPromptBehavior' type: ${typeof capabilityValue}`);\n    }\n    switch (capabilityValue) {\n      case 'accept':\n      case 'accept and notify':\n        return {\n          default: \"accept\" /* Session.UserPromptHandlerType.Accept */\n        };\n      case 'dismiss':\n      case 'dismiss and notify':\n        return {\n          default: \"dismiss\" /* Session.UserPromptHandlerType.Dismiss */\n        };\n      case 'ignore':\n        return {\n          default: \"ignore\" /* Session.UserPromptHandlerType.Ignore */\n        };\n      default:\n        throw new protocol_js_1.InvalidArgumentException(`Unexpected 'unhandledPromptBehavior' value: ${capabilityValue}`);\n    }\n  }\n  async new(params) {\n    if (this.#created) {\n      throw new Error('Session has been already created.');\n    }\n    this.#created = true;\n    const matchedCapabitlites = this.#mergeCapabilities(params.capabilities);\n    await this.#initConnection(matchedCapabitlites);\n    const version = await this.#browserCdpClient.sendCommand('Browser.getVersion');\n    return {\n      sessionId: 'unknown',\n      capabilities: {\n        ...matchedCapabitlites,\n        acceptInsecureCerts: matchedCapabitlites.acceptInsecureCerts ?? false,\n        browserName: version.product,\n        browserVersion: version.revision,\n        platformName: '',\n        setWindowRect: false,\n        webSocketUrl: '',\n        userAgent: version.userAgent\n      }\n    };\n  }\n  async subscribe(params, channel = null) {\n    await this.#eventManager.subscribe(params.events, params.contexts ?? [null], channel);\n    return {};\n  }\n  async unsubscribe(params, channel = null) {\n    await this.#eventManager.unsubscribe(params.events, params.contexts ?? [null], channel);\n    return {};\n  }\n}\nexports.SessionProcessor = SessionProcessor;","map":{"version":3,"names":["protocol_js_1","require","SessionProcessor","eventManager","browserCdpClient","initConnection","created","constructor","status","ready","message","mergeCapabilities","#mergeCapabilities","capabilitiesRequest","mergedCapabilities","first","firstMatch","result","alwaysMatch","key","Object","keys","undefined","InvalidArgumentException","push","match","find","c","browserName","unhandledPromptBehavior","getUnhandledPromptBehavior","#getUnhandledPromptBehavior","capabilityValue","default","new","params","Error","matchedCapabitlites","capabilities","version","sendCommand","sessionId","acceptInsecureCerts","product","browserVersion","revision","platformName","setWindowRect","webSocketUrl","userAgent","subscribe","channel","events","contexts","unsubscribe","exports"],"sources":["../../../../../src/bidiMapper/modules/session/SessionProcessor.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}