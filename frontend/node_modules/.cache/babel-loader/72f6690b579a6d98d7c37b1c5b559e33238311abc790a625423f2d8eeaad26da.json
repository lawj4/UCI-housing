{"ast":null,"code":"\"use strict\";\n\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __setFunctionName = this && this.__setFunctionName || function (f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", {\n    configurable: true,\n    value: prefix ? \"\".concat(prefix, \" \", name) : name\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmulationManager = exports.EmulatedState = void 0;\nconst CDPSession_js_1 = require(\"../api/CDPSession.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst assert_js_1 = require(\"../util/assert.js\");\nconst decorators_js_1 = require(\"../util/decorators.js\");\nconst ErrorLike_js_1 = require(\"../util/ErrorLike.js\");\n/**\n * @internal\n */\nclass EmulatedState {\n  #state;\n  #clientProvider;\n  #updater;\n  constructor(initialState, clientProvider, updater) {\n    this.#state = initialState;\n    this.#clientProvider = clientProvider;\n    this.#updater = updater;\n    this.#clientProvider.registerState(this);\n  }\n  async setState(state) {\n    this.#state = state;\n    await this.sync();\n  }\n  get state() {\n    return this.#state;\n  }\n  async sync() {\n    await Promise.all(this.#clientProvider.clients().map(client => {\n      return this.#updater(client, this.#state);\n    }));\n  }\n}\nexports.EmulatedState = EmulatedState;\n/**\n * @internal\n */\nlet EmulationManager = (() => {\n  let _instanceExtraInitializers = [];\n  let _private_applyViewport_decorators;\n  let _private_applyViewport_descriptor;\n  let _private_emulateIdleState_decorators;\n  let _private_emulateIdleState_descriptor;\n  let _private_emulateTimezone_decorators;\n  let _private_emulateTimezone_descriptor;\n  let _private_emulateVisionDeficiency_decorators;\n  let _private_emulateVisionDeficiency_descriptor;\n  let _private_emulateCpuThrottling_decorators;\n  let _private_emulateCpuThrottling_descriptor;\n  let _private_emulateMediaFeatures_decorators;\n  let _private_emulateMediaFeatures_descriptor;\n  let _private_emulateMediaType_decorators;\n  let _private_emulateMediaType_descriptor;\n  let _private_setGeolocation_decorators;\n  let _private_setGeolocation_descriptor;\n  let _private_setDefaultBackgroundColor_decorators;\n  let _private_setDefaultBackgroundColor_descriptor;\n  let _private_setJavaScriptEnabled_decorators;\n  let _private_setJavaScriptEnabled_descriptor;\n  return class EmulationManager {\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      _private_applyViewport_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_emulateIdleState_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_emulateTimezone_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_emulateVisionDeficiency_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_emulateCpuThrottling_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_emulateMediaFeatures_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_emulateMediaType_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_setGeolocation_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_setDefaultBackgroundColor_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      _private_setJavaScriptEnabled_decorators = [decorators_js_1.invokeAtMostOnceForArguments];\n      __esDecorate(this, _private_applyViewport_descriptor = {\n        value: __setFunctionName(async function (client, viewportState) {\n          if (!viewportState.viewport) {\n            await Promise.all([client.send('Emulation.clearDeviceMetricsOverride'), client.send('Emulation.setTouchEmulationEnabled', {\n              enabled: false\n            })]).catch(util_js_1.debugError);\n            return;\n          }\n          const {\n            viewport\n          } = viewportState;\n          const mobile = viewport.isMobile || false;\n          const width = viewport.width;\n          const height = viewport.height;\n          const deviceScaleFactor = viewport.deviceScaleFactor ?? 1;\n          const screenOrientation = viewport.isLandscape ? {\n            angle: 90,\n            type: 'landscapePrimary'\n          } : {\n            angle: 0,\n            type: 'portraitPrimary'\n          };\n          const hasTouch = viewport.hasTouch || false;\n          await Promise.all([client.send('Emulation.setDeviceMetricsOverride', {\n            mobile,\n            width,\n            height,\n            deviceScaleFactor,\n            screenOrientation\n          }).catch(err => {\n            if (err.message.includes('Target does not support metrics override')) {\n              (0, util_js_1.debugError)(err);\n              return;\n            }\n            throw err;\n          }), client.send('Emulation.setTouchEmulationEnabled', {\n            enabled: hasTouch\n          })]);\n        }, \"#applyViewport\")\n      }, _private_applyViewport_decorators, {\n        kind: \"method\",\n        name: \"#applyViewport\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #applyViewport in obj,\n          get: obj => obj.#applyViewport\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateIdleState_descriptor = {\n        value: __setFunctionName(async function (client, idleStateState) {\n          if (!idleStateState.active) {\n            return;\n          }\n          if (idleStateState.overrides) {\n            await client.send('Emulation.setIdleOverride', {\n              isUserActive: idleStateState.overrides.isUserActive,\n              isScreenUnlocked: idleStateState.overrides.isScreenUnlocked\n            });\n          } else {\n            await client.send('Emulation.clearIdleOverride');\n          }\n        }, \"#emulateIdleState\")\n      }, _private_emulateIdleState_decorators, {\n        kind: \"method\",\n        name: \"#emulateIdleState\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateIdleState in obj,\n          get: obj => obj.#emulateIdleState\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateTimezone_descriptor = {\n        value: __setFunctionName(async function (client, timezoneState) {\n          if (!timezoneState.active) {\n            return;\n          }\n          try {\n            await client.send('Emulation.setTimezoneOverride', {\n              timezoneId: timezoneState.timezoneId || ''\n            });\n          } catch (error) {\n            if ((0, ErrorLike_js_1.isErrorLike)(error) && error.message.includes('Invalid timezone')) {\n              throw new Error(`Invalid timezone ID: ${timezoneState.timezoneId}`);\n            }\n            throw error;\n          }\n        }, \"#emulateTimezone\")\n      }, _private_emulateTimezone_decorators, {\n        kind: \"method\",\n        name: \"#emulateTimezone\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateTimezone in obj,\n          get: obj => obj.#emulateTimezone\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateVisionDeficiency_descriptor = {\n        value: __setFunctionName(async function (client, visionDeficiency) {\n          if (!visionDeficiency.active) {\n            return;\n          }\n          await client.send('Emulation.setEmulatedVisionDeficiency', {\n            type: visionDeficiency.visionDeficiency || 'none'\n          });\n        }, \"#emulateVisionDeficiency\")\n      }, _private_emulateVisionDeficiency_decorators, {\n        kind: \"method\",\n        name: \"#emulateVisionDeficiency\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateVisionDeficiency in obj,\n          get: obj => obj.#emulateVisionDeficiency\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateCpuThrottling_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setCPUThrottlingRate', {\n            rate: state.factor ?? 1\n          });\n        }, \"#emulateCpuThrottling\")\n      }, _private_emulateCpuThrottling_decorators, {\n        kind: \"method\",\n        name: \"#emulateCpuThrottling\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateCpuThrottling in obj,\n          get: obj => obj.#emulateCpuThrottling\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateMediaFeatures_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setEmulatedMedia', {\n            features: state.mediaFeatures\n          });\n        }, \"#emulateMediaFeatures\")\n      }, _private_emulateMediaFeatures_decorators, {\n        kind: \"method\",\n        name: \"#emulateMediaFeatures\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateMediaFeatures in obj,\n          get: obj => obj.#emulateMediaFeatures\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateMediaType_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setEmulatedMedia', {\n            media: state.type || ''\n          });\n        }, \"#emulateMediaType\")\n      }, _private_emulateMediaType_decorators, {\n        kind: \"method\",\n        name: \"#emulateMediaType\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateMediaType in obj,\n          get: obj => obj.#emulateMediaType\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_setGeolocation_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setGeolocationOverride', state.geoLocation ? {\n            longitude: state.geoLocation.longitude,\n            latitude: state.geoLocation.latitude,\n            accuracy: state.geoLocation.accuracy\n          } : undefined);\n        }, \"#setGeolocation\")\n      }, _private_setGeolocation_decorators, {\n        kind: \"method\",\n        name: \"#setGeolocation\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #setGeolocation in obj,\n          get: obj => obj.#setGeolocation\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_setDefaultBackgroundColor_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setDefaultBackgroundColorOverride', {\n            color: state.color\n          });\n        }, \"#setDefaultBackgroundColor\")\n      }, _private_setDefaultBackgroundColor_decorators, {\n        kind: \"method\",\n        name: \"#setDefaultBackgroundColor\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #setDefaultBackgroundColor in obj,\n          get: obj => obj.#setDefaultBackgroundColor\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_setJavaScriptEnabled_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setScriptExecutionDisabled', {\n            value: !state.javaScriptEnabled\n          });\n        }, \"#setJavaScriptEnabled\")\n      }, _private_setJavaScriptEnabled_decorators, {\n        kind: \"method\",\n        name: \"#setJavaScriptEnabled\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #setJavaScriptEnabled in obj,\n          get: obj => obj.#setJavaScriptEnabled\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    }\n    #client = __runInitializers(this, _instanceExtraInitializers);\n    #emulatingMobile = false;\n    #hasTouch = false;\n    #states = [];\n    #viewportState = new EmulatedState({\n      active: false\n    }, this, this.#applyViewport);\n    #idleOverridesState = new EmulatedState({\n      active: false\n    }, this, this.#emulateIdleState);\n    #timezoneState = new EmulatedState({\n      active: false\n    }, this, this.#emulateTimezone);\n    #visionDeficiencyState = new EmulatedState({\n      active: false\n    }, this, this.#emulateVisionDeficiency);\n    #cpuThrottlingState = new EmulatedState({\n      active: false\n    }, this, this.#emulateCpuThrottling);\n    #mediaFeaturesState = new EmulatedState({\n      active: false\n    }, this, this.#emulateMediaFeatures);\n    #mediaTypeState = new EmulatedState({\n      active: false\n    }, this, this.#emulateMediaType);\n    #geoLocationState = new EmulatedState({\n      active: false\n    }, this, this.#setGeolocation);\n    #defaultBackgroundColorState = new EmulatedState({\n      active: false\n    }, this, this.#setDefaultBackgroundColor);\n    #javascriptEnabledState = new EmulatedState({\n      javaScriptEnabled: true,\n      active: false\n    }, this, this.#setJavaScriptEnabled);\n    #secondaryClients = new Set();\n    constructor(client) {\n      this.#client = client;\n    }\n    updateClient(client) {\n      this.#client = client;\n      this.#secondaryClients.delete(client);\n    }\n    registerState(state) {\n      this.#states.push(state);\n    }\n    clients() {\n      return [this.#client, ...Array.from(this.#secondaryClients)];\n    }\n    async registerSpeculativeSession(client) {\n      this.#secondaryClients.add(client);\n      client.once(CDPSession_js_1.CDPSessionEvent.Disconnected, () => {\n        this.#secondaryClients.delete(client);\n      });\n      // We don't await here because we want to register all state changes before\n      // the target is unpaused.\n      void Promise.all(this.#states.map(s => {\n        return s.sync().catch(util_js_1.debugError);\n      }));\n    }\n    get javascriptEnabled() {\n      return this.#javascriptEnabledState.state.javaScriptEnabled;\n    }\n    async emulateViewport(viewport) {\n      const currentState = this.#viewportState.state;\n      if (!viewport && !currentState.active) {\n        return false;\n      }\n      await this.#viewportState.setState(viewport ? {\n        viewport,\n        active: true\n      } : {\n        active: false\n      });\n      const mobile = viewport?.isMobile || false;\n      const hasTouch = viewport?.hasTouch || false;\n      const reloadNeeded = this.#emulatingMobile !== mobile || this.#hasTouch !== hasTouch;\n      this.#emulatingMobile = mobile;\n      this.#hasTouch = hasTouch;\n      return reloadNeeded;\n    }\n    get #applyViewport() {\n      return _private_applyViewport_descriptor.value;\n    }\n    async emulateIdleState(overrides) {\n      await this.#idleOverridesState.setState({\n        active: true,\n        overrides\n      });\n    }\n    get #emulateIdleState() {\n      return _private_emulateIdleState_descriptor.value;\n    }\n    get #emulateTimezone() {\n      return _private_emulateTimezone_descriptor.value;\n    }\n    async emulateTimezone(timezoneId) {\n      await this.#timezoneState.setState({\n        timezoneId,\n        active: true\n      });\n    }\n    get #emulateVisionDeficiency() {\n      return _private_emulateVisionDeficiency_descriptor.value;\n    }\n    async emulateVisionDeficiency(type) {\n      const visionDeficiencies = new Set(['none', 'achromatopsia', 'blurredVision', 'deuteranopia', 'protanopia', 'tritanopia']);\n      (0, assert_js_1.assert)(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n      await this.#visionDeficiencyState.setState({\n        active: true,\n        visionDeficiency: type\n      });\n    }\n    get #emulateCpuThrottling() {\n      return _private_emulateCpuThrottling_descriptor.value;\n    }\n    async emulateCPUThrottling(factor) {\n      (0, assert_js_1.assert)(factor === null || factor >= 1, 'Throttling rate should be greater or equal to 1');\n      await this.#cpuThrottlingState.setState({\n        active: true,\n        factor: factor ?? undefined\n      });\n    }\n    get #emulateMediaFeatures() {\n      return _private_emulateMediaFeatures_descriptor.value;\n    }\n    async emulateMediaFeatures(features) {\n      if (Array.isArray(features)) {\n        for (const mediaFeature of features) {\n          const name = mediaFeature.name;\n          (0, assert_js_1.assert)(/^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(name), 'Unsupported media feature: ' + name);\n        }\n      }\n      await this.#mediaFeaturesState.setState({\n        active: true,\n        mediaFeatures: features\n      });\n    }\n    get #emulateMediaType() {\n      return _private_emulateMediaType_descriptor.value;\n    }\n    async emulateMediaType(type) {\n      (0, assert_js_1.assert)(type === 'screen' || type === 'print' || (type ?? undefined) === undefined, 'Unsupported media type: ' + type);\n      await this.#mediaTypeState.setState({\n        type,\n        active: true\n      });\n    }\n    get #setGeolocation() {\n      return _private_setGeolocation_descriptor.value;\n    }\n    async setGeolocation(options) {\n      const {\n        longitude,\n        latitude,\n        accuracy = 0\n      } = options;\n      if (longitude < -180 || longitude > 180) {\n        throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n      }\n      if (latitude < -90 || latitude > 90) {\n        throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n      }\n      if (accuracy < 0) {\n        throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n      }\n      await this.#geoLocationState.setState({\n        active: true,\n        geoLocation: {\n          longitude,\n          latitude,\n          accuracy\n        }\n      });\n    }\n    get #setDefaultBackgroundColor() {\n      return _private_setDefaultBackgroundColor_descriptor.value;\n    }\n    /**\n     * Resets default white background\n     */\n    async resetDefaultBackgroundColor() {\n      await this.#defaultBackgroundColorState.setState({\n        active: true,\n        color: undefined\n      });\n    }\n    /**\n     * Hides default white background\n     */\n    async setTransparentBackgroundColor() {\n      await this.#defaultBackgroundColorState.setState({\n        active: true,\n        color: {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 0\n        }\n      });\n    }\n    get #setJavaScriptEnabled() {\n      return _private_setJavaScriptEnabled_descriptor.value;\n    }\n    async setJavaScriptEnabled(enabled) {\n      await this.#javascriptEnabledState.setState({\n        active: true,\n        javaScriptEnabled: enabled\n      });\n    }\n  };\n})();\nexports.EmulationManager = EmulationManager;","map":{"version":3,"names":["CDPSession_js_1","require","util_js_1","assert_js_1","decorators_js_1","ErrorLike_js_1","EmulatedState","state","clientProvider","updater","constructor","initialState","registerState","setState","sync","Promise","all","clients","map","client","exports","EmulationManager","invokeAtMostOnceForArguments","__esDecorate","_private_applyViewport_descriptor","value","__setFunctionName","viewportState","viewport","send","enabled","catch","debugError","mobile","isMobile","width","height","deviceScaleFactor","screenOrientation","isLandscape","angle","type","hasTouch","err","message","includes","_private_applyViewport_decorators","kind","name","static","private","access","has","obj","applyViewport","get","metadata","_metadata","_instanceExtraInitializers","_private_emulateIdleState_descriptor","idleStateState","active","overrides","isUserActive","isScreenUnlocked","_private_emulateIdleState_decorators","emulateIdleState","_private_emulateTimezone_descriptor","timezoneState","timezoneId","error","isErrorLike","Error","_private_emulateTimezone_decorators","emulateTimezone","_private_emulateVisionDeficiency_descriptor","visionDeficiency","_private_emulateVisionDeficiency_decorators","emulateVisionDeficiency","_private_emulateCpuThrottling_descriptor","rate","factor","_private_emulateCpuThrottling_decorators","emulateCpuThrottling","_private_emulateMediaFeatures_descriptor","features","mediaFeatures","_private_emulateMediaFeatures_decorators","emulateMediaFeatures","_private_emulateMediaType_descriptor","media","_private_emulateMediaType_decorators","emulateMediaType","_private_setGeolocation_descriptor","geoLocation","longitude","latitude","accuracy","undefined","_private_setGeolocation_decorators","setGeolocation","_private_setDefaultBackgroundColor_descriptor","color","_private_setDefaultBackgroundColor_decorators","setDefaultBackgroundColor","_private_setJavaScriptEnabled_descriptor","javaScriptEnabled","_private_setJavaScriptEnabled_decorators","setJavaScriptEnabled","__runInitializers","emulatingMobile","states","idleOverridesState","visionDeficiencyState","cpuThrottlingState","mediaFeaturesState","mediaTypeState","geoLocationState","defaultBackgroundColorState","javascriptEnabledState","secondaryClients","Set","updateClient","delete","push","Array","from","registerSpeculativeSession","add","once","CDPSessionEvent","Disconnected","s","javascriptEnabled","emulateViewport","currentState","reloadNeeded","#applyViewport","#emulateIdleState","#emulateTimezone","#emulateVisionDeficiency","visionDeficiencies","assert","#emulateCpuThrottling","emulateCPUThrottling","#emulateMediaFeatures","isArray","mediaFeature","test","#emulateMediaType","#setGeolocation","options","#setDefaultBackgroundColor","resetDefaultBackgroundColor","setTransparentBackgroundColor","r","g","b","a","#setJavaScriptEnabled"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/cdp/EmulationManager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type {Protocol} from 'devtools-protocol';\n\nimport {type CDPSession, CDPSessionEvent} from '../api/CDPSession.js';\nimport type {GeolocationOptions, MediaFeature} from '../api/Page.js';\nimport {debugError} from '../common/util.js';\nimport type {Viewport} from '../common/Viewport.js';\nimport {assert} from '../util/assert.js';\nimport {invokeAtMostOnceForArguments} from '../util/decorators.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\ninterface ViewportState {\n  viewport?: Viewport;\n  active: boolean;\n}\n\ninterface IdleOverridesState {\n  overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  };\n  active: boolean;\n}\n\ninterface TimezoneState {\n  timezoneId?: string;\n  active: boolean;\n}\n\ninterface VisionDeficiencyState {\n  visionDeficiency?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'];\n  active: boolean;\n}\n\ninterface CpuThrottlingState {\n  factor?: number;\n  active: boolean;\n}\n\ninterface MediaFeaturesState {\n  mediaFeatures?: MediaFeature[];\n  active: boolean;\n}\n\ninterface MediaTypeState {\n  type?: string;\n  active: boolean;\n}\n\ninterface GeoLocationState {\n  geoLocation?: GeolocationOptions;\n  active: boolean;\n}\n\ninterface DefaultBackgroundColorState {\n  color?: Protocol.DOM.RGBA;\n  active: boolean;\n}\n\ninterface JavascriptEnabledState {\n  javaScriptEnabled: boolean;\n  active: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ClientProvider {\n  clients(): CDPSession[];\n  registerState(state: EmulatedState<any>): void;\n}\n\n/**\n * @internal\n */\nexport class EmulatedState<T extends {active: boolean}> {\n  #state: T;\n  #clientProvider: ClientProvider;\n  #updater: (client: CDPSession, state: T) => Promise<void>;\n\n  constructor(\n    initialState: T,\n    clientProvider: ClientProvider,\n    updater: (client: CDPSession, state: T) => Promise<void>\n  ) {\n    this.#state = initialState;\n    this.#clientProvider = clientProvider;\n    this.#updater = updater;\n    this.#clientProvider.registerState(this);\n  }\n\n  async setState(state: T): Promise<void> {\n    this.#state = state;\n    await this.sync();\n  }\n\n  get state(): T {\n    return this.#state;\n  }\n\n  async sync(): Promise<void> {\n    await Promise.all(\n      this.#clientProvider.clients().map(client => {\n        return this.#updater(client, this.#state);\n      })\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class EmulationManager implements ClientProvider {\n  #client: CDPSession;\n\n  #emulatingMobile = false;\n  #hasTouch = false;\n\n  #states: Array<EmulatedState<any>> = [];\n\n  #viewportState = new EmulatedState<ViewportState>(\n    {\n      active: false,\n    },\n    this,\n    this.#applyViewport\n  );\n  #idleOverridesState = new EmulatedState<IdleOverridesState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateIdleState\n  );\n  #timezoneState = new EmulatedState<TimezoneState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateTimezone\n  );\n  #visionDeficiencyState = new EmulatedState<VisionDeficiencyState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateVisionDeficiency\n  );\n  #cpuThrottlingState = new EmulatedState<CpuThrottlingState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateCpuThrottling\n  );\n  #mediaFeaturesState = new EmulatedState<MediaFeaturesState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateMediaFeatures\n  );\n  #mediaTypeState = new EmulatedState<MediaTypeState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateMediaType\n  );\n  #geoLocationState = new EmulatedState<GeoLocationState>(\n    {\n      active: false,\n    },\n    this,\n    this.#setGeolocation\n  );\n  #defaultBackgroundColorState = new EmulatedState<DefaultBackgroundColorState>(\n    {\n      active: false,\n    },\n    this,\n    this.#setDefaultBackgroundColor\n  );\n  #javascriptEnabledState = new EmulatedState<JavascriptEnabledState>(\n    {\n      javaScriptEnabled: true,\n      active: false,\n    },\n    this,\n    this.#setJavaScriptEnabled\n  );\n\n  #secondaryClients = new Set<CDPSession>();\n\n  constructor(client: CDPSession) {\n    this.#client = client;\n  }\n\n  updateClient(client: CDPSession): void {\n    this.#client = client;\n    this.#secondaryClients.delete(client);\n  }\n\n  registerState(state: EmulatedState<any>): void {\n    this.#states.push(state);\n  }\n\n  clients(): CDPSession[] {\n    return [this.#client, ...Array.from(this.#secondaryClients)];\n  }\n\n  async registerSpeculativeSession(client: CDPSession): Promise<void> {\n    this.#secondaryClients.add(client);\n    client.once(CDPSessionEvent.Disconnected, () => {\n      this.#secondaryClients.delete(client);\n    });\n    // We don't await here because we want to register all state changes before\n    // the target is unpaused.\n    void Promise.all(\n      this.#states.map(s => {\n        return s.sync().catch(debugError);\n      })\n    );\n  }\n\n  get javascriptEnabled(): boolean {\n    return this.#javascriptEnabledState.state.javaScriptEnabled;\n  }\n\n  async emulateViewport(viewport: Viewport | null): Promise<boolean> {\n    const currentState = this.#viewportState.state;\n    if (!viewport && !currentState.active) {\n      return false;\n    }\n    await this.#viewportState.setState(\n      viewport\n        ? {\n            viewport,\n            active: true,\n          }\n        : {\n            active: false,\n          }\n    );\n\n    const mobile = viewport?.isMobile || false;\n    const hasTouch = viewport?.hasTouch || false;\n    const reloadNeeded =\n      this.#emulatingMobile !== mobile || this.#hasTouch !== hasTouch;\n    this.#emulatingMobile = mobile;\n    this.#hasTouch = hasTouch;\n\n    return reloadNeeded;\n  }\n\n  @invokeAtMostOnceForArguments\n  async #applyViewport(\n    client: CDPSession,\n    viewportState: ViewportState\n  ): Promise<void> {\n    if (!viewportState.viewport) {\n      await Promise.all([\n        client.send('Emulation.clearDeviceMetricsOverride'),\n        client.send('Emulation.setTouchEmulationEnabled', {\n          enabled: false,\n        }),\n      ]).catch(debugError);\n      return;\n    }\n    const {viewport} = viewportState;\n    const mobile = viewport.isMobile || false;\n    const width = viewport.width;\n    const height = viewport.height;\n    const deviceScaleFactor = viewport.deviceScaleFactor ?? 1;\n    const screenOrientation: Protocol.Emulation.ScreenOrientation =\n      viewport.isLandscape\n        ? {angle: 90, type: 'landscapePrimary'}\n        : {angle: 0, type: 'portraitPrimary'};\n    const hasTouch = viewport.hasTouch || false;\n\n    await Promise.all([\n      client\n        .send('Emulation.setDeviceMetricsOverride', {\n          mobile,\n          width,\n          height,\n          deviceScaleFactor,\n          screenOrientation,\n        })\n        .catch(err => {\n          if (\n            err.message.includes('Target does not support metrics override')\n          ) {\n            debugError(err);\n            return;\n          }\n          throw err;\n        }),\n      client.send('Emulation.setTouchEmulationEnabled', {\n        enabled: hasTouch,\n      }),\n    ]);\n  }\n\n  async emulateIdleState(overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  }): Promise<void> {\n    await this.#idleOverridesState.setState({\n      active: true,\n      overrides,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateIdleState(\n    client: CDPSession,\n    idleStateState: IdleOverridesState\n  ): Promise<void> {\n    if (!idleStateState.active) {\n      return;\n    }\n    if (idleStateState.overrides) {\n      await client.send('Emulation.setIdleOverride', {\n        isUserActive: idleStateState.overrides.isUserActive,\n        isScreenUnlocked: idleStateState.overrides.isScreenUnlocked,\n      });\n    } else {\n      await client.send('Emulation.clearIdleOverride');\n    }\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateTimezone(\n    client: CDPSession,\n    timezoneState: TimezoneState\n  ): Promise<void> {\n    if (!timezoneState.active) {\n      return;\n    }\n    try {\n      await client.send('Emulation.setTimezoneOverride', {\n        timezoneId: timezoneState.timezoneId || '',\n      });\n    } catch (error) {\n      if (isErrorLike(error) && error.message.includes('Invalid timezone')) {\n        throw new Error(`Invalid timezone ID: ${timezoneState.timezoneId}`);\n      }\n      throw error;\n    }\n  }\n\n  async emulateTimezone(timezoneId?: string): Promise<void> {\n    await this.#timezoneState.setState({\n      timezoneId,\n      active: true,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateVisionDeficiency(\n    client: CDPSession,\n    visionDeficiency: VisionDeficiencyState\n  ): Promise<void> {\n    if (!visionDeficiency.active) {\n      return;\n    }\n    await client.send('Emulation.setEmulatedVisionDeficiency', {\n      type: visionDeficiency.visionDeficiency || 'none',\n    });\n  }\n\n  async emulateVisionDeficiency(\n    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']\n  ): Promise<void> {\n    const visionDeficiencies = new Set<\n      Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']\n    >([\n      'none',\n      'achromatopsia',\n      'blurredVision',\n      'deuteranopia',\n      'protanopia',\n      'tritanopia',\n    ]);\n    assert(\n      !type || visionDeficiencies.has(type),\n      `Unsupported vision deficiency: ${type}`\n    );\n    await this.#visionDeficiencyState.setState({\n      active: true,\n      visionDeficiency: type,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateCpuThrottling(\n    client: CDPSession,\n    state: CpuThrottlingState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setCPUThrottlingRate', {\n      rate: state.factor ?? 1,\n    });\n  }\n\n  async emulateCPUThrottling(factor: number | null): Promise<void> {\n    assert(\n      factor === null || factor >= 1,\n      'Throttling rate should be greater or equal to 1'\n    );\n    await this.#cpuThrottlingState.setState({\n      active: true,\n      factor: factor ?? undefined,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateMediaFeatures(\n    client: CDPSession,\n    state: MediaFeaturesState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setEmulatedMedia', {\n      features: state.mediaFeatures,\n    });\n  }\n\n  async emulateMediaFeatures(features?: MediaFeature[]): Promise<void> {\n    if (Array.isArray(features)) {\n      for (const mediaFeature of features) {\n        const name = mediaFeature.name;\n        assert(\n          /^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(\n            name\n          ),\n          'Unsupported media feature: ' + name\n        );\n      }\n    }\n    await this.#mediaFeaturesState.setState({\n      active: true,\n      mediaFeatures: features,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateMediaType(\n    client: CDPSession,\n    state: MediaTypeState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setEmulatedMedia', {\n      media: state.type || '',\n    });\n  }\n\n  async emulateMediaType(type?: string): Promise<void> {\n    assert(\n      type === 'screen' ||\n        type === 'print' ||\n        (type ?? undefined) === undefined,\n      'Unsupported media type: ' + type\n    );\n    await this.#mediaTypeState.setState({\n      type,\n      active: true,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #setGeolocation(\n    client: CDPSession,\n    state: GeoLocationState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send(\n      'Emulation.setGeolocationOverride',\n      state.geoLocation\n        ? {\n            longitude: state.geoLocation.longitude,\n            latitude: state.geoLocation.latitude,\n            accuracy: state.geoLocation.accuracy,\n          }\n        : undefined\n    );\n  }\n\n  async setGeolocation(options: GeolocationOptions): Promise<void> {\n    const {longitude, latitude, accuracy = 0} = options;\n    if (longitude < -180 || longitude > 180) {\n      throw new Error(\n        `Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`\n      );\n    }\n    if (latitude < -90 || latitude > 90) {\n      throw new Error(\n        `Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`\n      );\n    }\n    if (accuracy < 0) {\n      throw new Error(\n        `Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`\n      );\n    }\n    await this.#geoLocationState.setState({\n      active: true,\n      geoLocation: {\n        longitude,\n        latitude,\n        accuracy,\n      },\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #setDefaultBackgroundColor(\n    client: CDPSession,\n    state: DefaultBackgroundColorState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setDefaultBackgroundColorOverride', {\n      color: state.color,\n    });\n  }\n\n  /**\n   * Resets default white background\n   */\n  async resetDefaultBackgroundColor(): Promise<void> {\n    await this.#defaultBackgroundColorState.setState({\n      active: true,\n      color: undefined,\n    });\n  }\n\n  /**\n   * Hides default white background\n   */\n  async setTransparentBackgroundColor(): Promise<void> {\n    await this.#defaultBackgroundColorState.setState({\n      active: true,\n      color: {r: 0, g: 0, b: 0, a: 0},\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #setJavaScriptEnabled(\n    client: CDPSession,\n    state: JavascriptEnabledState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setScriptExecutionDisabled', {\n      value: !state.javaScriptEnabled,\n    });\n  }\n\n  async setJavaScriptEnabled(enabled: boolean): Promise<void> {\n    await this.#javascriptEnabledState.setState({\n      active: true,\n      javaScriptEnabled: enabled,\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,MAAAA,eAAA,GAAAC,OAAA;AAEA,MAAAC,SAAA,GAAAD,OAAA;AAEA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,eAAA,GAAAH,OAAA;AACA,MAAAI,cAAA,GAAAJ,OAAA;AA+DA;;;AAGA,MAAaK,aAAa;EACxB,CAAAC,KAAM;EACN,CAAAC,cAAe;EACf,CAAAC,OAAQ;EAERC,YACEC,YAAe,EACfH,cAA8B,EAC9BC,OAAwD;IAExD,IAAI,CAAC,CAAAF,KAAM,GAAGI,YAAY;IAC1B,IAAI,CAAC,CAAAH,cAAe,GAAGA,cAAc;IACrC,IAAI,CAAC,CAAAC,OAAQ,GAAGA,OAAO;IACvB,IAAI,CAAC,CAAAD,cAAe,CAACI,aAAa,CAAC,IAAI,CAAC;EAC1C;EAEA,MAAMC,QAAQA,CAACN,KAAQ;IACrB,IAAI,CAAC,CAAAA,KAAM,GAAGA,KAAK;IACnB,MAAM,IAAI,CAACO,IAAI,EAAE;EACnB;EAEA,IAAIP,KAAKA,CAAA;IACP,OAAO,IAAI,CAAC,CAAAA,KAAM;EACpB;EAEA,MAAMO,IAAIA,CAAA;IACR,MAAMC,OAAO,CAACC,GAAG,CACf,IAAI,CAAC,CAAAR,cAAe,CAACS,OAAO,EAAE,CAACC,GAAG,CAACC,MAAM,IAAG;MAC1C,OAAO,IAAI,CAAC,CAAAV,OAAQ,CAACU,MAAM,EAAE,IAAI,CAAC,CAAAZ,KAAM,CAAC;IAC3C,CAAC,CAAC,CACH;EACH;;AA/BFa,OAAA,CAAAd,aAAA,GAAAA,aAAA;AAkCA;;;IAGae,gBAAgB;;;;;;;;;;;;;;;;;;;;;;eAAhBA,gBAAgB;;;2CA+I1BjB,eAAA,CAAAkB,4BAA4B;8CA2D5BlB,eAAA,CAAAkB,4BAA4B;6CAkB5BlB,eAAA,CAAAkB,4BAA4B;qDA2B5BlB,eAAA,CAAAkB,4BAA4B;kDAoC5BlB,eAAA,CAAAkB,4BAA4B;kDAwB5BlB,eAAA,CAAAkB,4BAA4B;8CA+B5BlB,eAAA,CAAAkB,4BAA4B;4CA0B5BlB,eAAA,CAAAkB,4BAA4B;uDA+C5BlB,eAAA,CAAAkB,4BAA4B;kDAiC5BlB,eAAA,CAAAkB,4BAA4B;MA5S7BC,YAAA,OAAAC,iCAAA;QAAAC,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBQ,aAA4B;UAE5B,IAAI,CAACA,aAAa,CAACC,QAAQ,EAAE;YAC3B,MAAMb,OAAO,CAACC,GAAG,CAAC,CAChBG,MAAM,CAACU,IAAI,CAAC,sCAAsC,CAAC,EACnDV,MAAM,CAACU,IAAI,CAAC,oCAAoC,EAAE;cAChDC,OAAO,EAAE;aACV,CAAC,CACH,CAAC,CAACC,KAAK,CAAC7B,SAAA,CAAA8B,UAAU,CAAC;YACpB;UACF;UACA,MAAM;YAACJ;UAAQ,CAAC,GAAGD,aAAa;UAChC,MAAMM,MAAM,GAAGL,QAAQ,CAACM,QAAQ,IAAI,KAAK;UACzC,MAAMC,KAAK,GAAGP,QAAQ,CAACO,KAAK;UAC5B,MAAMC,MAAM,GAAGR,QAAQ,CAACQ,MAAM;UAC9B,MAAMC,iBAAiB,GAAGT,QAAQ,CAACS,iBAAiB,IAAI,CAAC;UACzD,MAAMC,iBAAiB,GACrBV,QAAQ,CAACW,WAAW,GAChB;YAACC,KAAK,EAAE,EAAE;YAAEC,IAAI,EAAE;UAAkB,CAAC,GACrC;YAACD,KAAK,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAiB,CAAC;UACzC,MAAMC,QAAQ,GAAGd,QAAQ,CAACc,QAAQ,IAAI,KAAK;UAE3C,MAAM3B,OAAO,CAACC,GAAG,CAAC,CAChBG,MAAM,CACHU,IAAI,CAAC,oCAAoC,EAAE;YAC1CI,MAAM;YACNE,KAAK;YACLC,MAAM;YACNC,iBAAiB;YACjBC;WACD,CAAC,CACDP,KAAK,CAACY,GAAG,IAAG;YACX,IACEA,GAAG,CAACC,OAAO,CAACC,QAAQ,CAAC,0CAA0C,CAAC,EAChE;cACA,IAAA3C,SAAA,CAAA8B,UAAU,EAACW,GAAG,CAAC;cACf;YACF;YACA,MAAMA,GAAG;UACX,CAAC,CAAC,EACJxB,MAAM,CAACU,IAAI,CAAC,oCAAoC,EAAE;YAChDC,OAAO,EAAEY;WACV,CAAC,CACH,CAAC;QACJ,CAAC;MAAA,GAAAI,iCAAA;QAAAC,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IA9CK,CAAAC,aAAc,IAAAD,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAAd,CAAAC;QAAc;QAAAE,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MA2DpBnC,YAAA,OAAAoC,oCAAA;QAAAlC,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClByC,cAAkC;UAElC,IAAI,CAACA,cAAc,CAACC,MAAM,EAAE;YAC1B;UACF;UACA,IAAID,cAAc,CAACE,SAAS,EAAE;YAC5B,MAAM3C,MAAM,CAACU,IAAI,CAAC,2BAA2B,EAAE;cAC7CkC,YAAY,EAAEH,cAAc,CAACE,SAAS,CAACC,YAAY;cACnDC,gBAAgB,EAAEJ,cAAc,CAACE,SAAS,CAACE;aAC5C,CAAC;UACJ,CAAC,MAAM;YACL,MAAM7C,MAAM,CAACU,IAAI,CAAC,6BAA6B,CAAC;UAClD;QACF,CAAC;MAAA,GAAAoC,oCAAA;QAAAlB,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAfK,CAAAa,gBAAiB,IAAAb,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAAjB,CAAAa;QAAiB;QAAAV,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MAkBvBnC,YAAA,OAAA4C,mCAAA;QAAA1C,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBiD,aAA4B;UAE5B,IAAI,CAACA,aAAa,CAACP,MAAM,EAAE;YACzB;UACF;UACA,IAAI;YACF,MAAM1C,MAAM,CAACU,IAAI,CAAC,+BAA+B,EAAE;cACjDwC,UAAU,EAAED,aAAa,CAACC,UAAU,IAAI;aACzC,CAAC;UACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;YACd,IAAI,IAAAjE,cAAA,CAAAkE,WAAW,EAACD,KAAK,CAAC,IAAIA,KAAK,CAAC1B,OAAO,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;cACpE,MAAM,IAAI2B,KAAK,CAAC,wBAAwBJ,aAAa,CAACC,UAAU,EAAE,CAAC;YACrE;YACA,MAAMC,KAAK;UACb;QACF,CAAC;MAAA,GAAAG,mCAAA;QAAA1B,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAjBK,CAAAqB,eAAgB,IAAArB,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAAhB,CAAAqB;QAAgB;QAAAlB,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MA2BtBnC,YAAA,OAAAoD,2CAAA;QAAAlD,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClByD,gBAAuC;UAEvC,IAAI,CAACA,gBAAgB,CAACf,MAAM,EAAE;YAC5B;UACF;UACA,MAAM1C,MAAM,CAACU,IAAI,CAAC,uCAAuC,EAAE;YACzDY,IAAI,EAAEmC,gBAAgB,CAACA,gBAAgB,IAAI;WAC5C,CAAC;QACJ,CAAC;MAAA,GAAAC,2CAAA;QAAA9B,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAVK,CAAAyB,uBAAwB,IAAAzB,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAAxB,CAAAyB;QAAwB;QAAAtB,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MAoC9BnC,YAAA,OAAAwD,wCAAA;QAAAtD,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBZ,KAAyB;UAEzB,IAAI,CAACA,KAAK,CAACsD,MAAM,EAAE;YACjB;UACF;UACA,MAAM1C,MAAM,CAACU,IAAI,CAAC,gCAAgC,EAAE;YAClDmD,IAAI,EAAEzE,KAAK,CAAC0E,MAAM,IAAI;WACvB,CAAC;QACJ,CAAC;MAAA,GAAAC,wCAAA;QAAAnC,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAVK,CAAA8B,oBAAqB,IAAA9B,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAArB,CAAA8B;QAAqB;QAAA3B,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MAwB3BnC,YAAA,OAAA6D,wCAAA;QAAA3D,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBZ,KAAyB;UAEzB,IAAI,CAACA,KAAK,CAACsD,MAAM,EAAE;YACjB;UACF;UACA,MAAM1C,MAAM,CAACU,IAAI,CAAC,4BAA4B,EAAE;YAC9CwD,QAAQ,EAAE9E,KAAK,CAAC+E;WACjB,CAAC;QACJ,CAAC;MAAA,GAAAC,wCAAA;QAAAxC,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAVK,CAAAmC,oBAAqB,IAAAnC,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAArB,CAAAmC;QAAqB;QAAAhC,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MA+B3BnC,YAAA,OAAAkE,oCAAA;QAAAhE,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBZ,KAAqB;UAErB,IAAI,CAACA,KAAK,CAACsD,MAAM,EAAE;YACjB;UACF;UACA,MAAM1C,MAAM,CAACU,IAAI,CAAC,4BAA4B,EAAE;YAC9C6D,KAAK,EAAEnF,KAAK,CAACkC,IAAI,IAAI;WACtB,CAAC;QACJ,CAAC;MAAA,GAAAkD,oCAAA;QAAA5C,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAVK,CAAAuC,gBAAiB,IAAAvC,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAAjB,CAAAuC;QAAiB;QAAApC,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MA0BvBnC,YAAA,OAAAsE,kCAAA;QAAApE,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBZ,KAAuB;UAEvB,IAAI,CAACA,KAAK,CAACsD,MAAM,EAAE;YACjB;UACF;UACA,MAAM1C,MAAM,CAACU,IAAI,CACf,kCAAkC,EAClCtB,KAAK,CAACuF,WAAW,GACb;YACEC,SAAS,EAAExF,KAAK,CAACuF,WAAW,CAACC,SAAS;YACtCC,QAAQ,EAAEzF,KAAK,CAACuF,WAAW,CAACE,QAAQ;YACpCC,QAAQ,EAAE1F,KAAK,CAACuF,WAAW,CAACG;WAC7B,GACDC,SAAS,CACd;QACH,CAAC;MAAA,GAAAC,kCAAA;QAAApD,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAjBK,CAAA+C,cAAe,IAAA/C,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAAf,CAAA+C;QAAe;QAAA5C,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MA+CrBnC,YAAA,OAAA8E,6CAAA;QAAA5E,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBZ,KAAkC;UAElC,IAAI,CAACA,KAAK,CAACsD,MAAM,EAAE;YACjB;UACF;UACA,MAAM1C,MAAM,CAACU,IAAI,CAAC,6CAA6C,EAAE;YAC/DyE,KAAK,EAAE/F,KAAK,CAAC+F;WACd,CAAC;QACJ,CAAC;MAAA,GAAAC,6CAAA;QAAAxD,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAVK,CAAAmD,yBAA0B,IAAAnD,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAA1B,CAAAmD;QAA0B;QAAAhD,QAAA,EAAAC;MAAA,SAAAC,0BAAA;MAiChCnC,YAAA,OAAAkF,wCAAA;QAAAhF,KAAA,EAAAC,iBAAA,iBACEP,MAAkB,EAClBZ,KAA6B;UAE7B,IAAI,CAACA,KAAK,CAACsD,MAAM,EAAE;YACjB;UACF;UACA,MAAM1C,MAAM,CAACU,IAAI,CAAC,sCAAsC,EAAE;YACxDJ,KAAK,EAAE,CAAClB,KAAK,CAACmG;WACf,CAAC;QACJ,CAAC;MAAA,GAAAC,wCAAA;QAAA5D,IAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,OAAA;QAAAC,MAAA;UAAAC,GAAA,EAAAC,GAAA,IAVK,CAAAuD,oBAAqB,IAAAvD,GAAA;UAAAE,GAAA,EAAAF,GAAA,IAAAA,GAAA,CAArB,CAAAuD;QAAqB;QAAApD,QAAA,EAAAC;MAAA,SAAAC,0BAAA;;;;;;;;IA5b3B,CAAAvC,MAAO,GADI0F,iBAAA,OAAAnD,0BAAA,CAAgB;IAG3B,CAAAoD,eAAgB,GAAG,KAAK;IACxB,CAAApE,QAAS,GAAG,KAAK;IAEjB,CAAAqE,MAAO,GAA8B,EAAE;IAEvC,CAAApF,aAAc,GAAG,IAAIrB,aAAa,CAChC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAAP,aAAc,CACpB;IACD,CAAA0D,kBAAmB,GAAG,IAAI1G,aAAa,CACrC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAAK,gBAAiB,CACvB;IACD,CAAAE,aAAc,GAAG,IAAI9D,aAAa,CAChC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAAa,eAAgB,CACtB;IACD,CAAAuC,qBAAsB,GAAG,IAAI3G,aAAa,CACxC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAAiB,uBAAwB,CAC9B;IACD,CAAAoC,kBAAmB,GAAG,IAAI5G,aAAa,CACrC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAAsB,oBAAqB,CAC3B;IACD,CAAAgC,kBAAmB,GAAG,IAAI7G,aAAa,CACrC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAA2B,oBAAqB,CAC3B;IACD,CAAA4B,cAAe,GAAG,IAAI9G,aAAa,CACjC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAA+B,gBAAiB,CACvB;IACD,CAAAyB,gBAAiB,GAAG,IAAI/G,aAAa,CACnC;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAAuC,cAAe,CACrB;IACD,CAAAkB,2BAA4B,GAAG,IAAIhH,aAAa,CAC9C;MACEuD,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAA2C,yBAA0B,CAChC;IACD,CAAAe,sBAAuB,GAAG,IAAIjH,aAAa,CACzC;MACEoG,iBAAiB,EAAE,IAAI;MACvB7C,MAAM,EAAE;KACT,EACD,IAAI,EACJ,IAAI,CAAC,CAAA+C,oBAAqB,CAC3B;IAED,CAAAY,gBAAiB,GAAG,IAAIC,GAAG,EAAc;IAEzC/G,YAAYS,MAAkB;MAC5B,IAAI,CAAC,CAAAA,MAAO,GAAGA,MAAM;IACvB;IAEAuG,YAAYA,CAACvG,MAAkB;MAC7B,IAAI,CAAC,CAAAA,MAAO,GAAGA,MAAM;MACrB,IAAI,CAAC,CAAAqG,gBAAiB,CAACG,MAAM,CAACxG,MAAM,CAAC;IACvC;IAEAP,aAAaA,CAACL,KAAyB;MACrC,IAAI,CAAC,CAAAwG,MAAO,CAACa,IAAI,CAACrH,KAAK,CAAC;IAC1B;IAEAU,OAAOA,CAAA;MACL,OAAO,CAAC,IAAI,CAAC,CAAAE,MAAO,EAAE,GAAG0G,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,CAAAN,gBAAiB,CAAC,CAAC;IAC9D;IAEA,MAAMO,0BAA0BA,CAAC5G,MAAkB;MACjD,IAAI,CAAC,CAAAqG,gBAAiB,CAACQ,GAAG,CAAC7G,MAAM,CAAC;MAClCA,MAAM,CAAC8G,IAAI,CAACjI,eAAA,CAAAkI,eAAe,CAACC,YAAY,EAAE,MAAK;QAC7C,IAAI,CAAC,CAAAX,gBAAiB,CAACG,MAAM,CAACxG,MAAM,CAAC;MACvC,CAAC,CAAC;MACF;MACA;MACA,KAAKJ,OAAO,CAACC,GAAG,CACd,IAAI,CAAC,CAAA+F,MAAO,CAAC7F,GAAG,CAACkH,CAAC,IAAG;QACnB,OAAOA,CAAC,CAACtH,IAAI,EAAE,CAACiB,KAAK,CAAC7B,SAAA,CAAA8B,UAAU,CAAC;MACnC,CAAC,CAAC,CACH;IACH;IAEA,IAAIqG,iBAAiBA,CAAA;MACnB,OAAO,IAAI,CAAC,CAAAd,sBAAuB,CAAChH,KAAK,CAACmG,iBAAiB;IAC7D;IAEA,MAAM4B,eAAeA,CAAC1G,QAAyB;MAC7C,MAAM2G,YAAY,GAAG,IAAI,CAAC,CAAA5G,aAAc,CAACpB,KAAK;MAC9C,IAAI,CAACqB,QAAQ,IAAI,CAAC2G,YAAY,CAAC1E,MAAM,EAAE;QACrC,OAAO,KAAK;MACd;MACA,MAAM,IAAI,CAAC,CAAAlC,aAAc,CAACd,QAAQ,CAChCe,QAAQ,GACJ;QACEA,QAAQ;QACRiC,MAAM,EAAE;OACT,GACD;QACEA,MAAM,EAAE;OACT,CACN;MAED,MAAM5B,MAAM,GAAGL,QAAQ,EAAEM,QAAQ,IAAI,KAAK;MAC1C,MAAMQ,QAAQ,GAAGd,QAAQ,EAAEc,QAAQ,IAAI,KAAK;MAC5C,MAAM8F,YAAY,GAChB,IAAI,CAAC,CAAA1B,eAAgB,KAAK7E,MAAM,IAAI,IAAI,CAAC,CAAAS,QAAS,KAAKA,QAAQ;MACjE,IAAI,CAAC,CAAAoE,eAAgB,GAAG7E,MAAM;MAC9B,IAAI,CAAC,CAAAS,QAAS,GAAGA,QAAQ;MAEzB,OAAO8F,YAAY;IACrB;IAGA,IAAM,CAAAlF,aAAcmF,CAAA;MAAA,OAAAjH,iCAAA,CAAAC,KAAA;IAAA;IAgDpB,MAAMyC,gBAAgBA,CAACJ,SAGtB;MACC,MAAM,IAAI,CAAC,CAAAkD,kBAAmB,CAACnG,QAAQ,CAAC;QACtCgD,MAAM,EAAE,IAAI;QACZC;OACD,CAAC;IACJ;IAGA,IAAM,CAAAI,gBAAiBwE,CAAA;MAAA,OAAA/E,oCAAA,CAAAlC,KAAA;IAAA;IAkBvB,IAAM,CAAAiD,eAAgBiE,CAAA;MAAA,OAAAxE,mCAAA,CAAA1C,KAAA;IAAA;IAmBtB,MAAMiD,eAAeA,CAACL,UAAmB;MACvC,MAAM,IAAI,CAAC,CAAAD,aAAc,CAACvD,QAAQ,CAAC;QACjCwD,UAAU;QACVR,MAAM,EAAE;OACT,CAAC;IACJ;IAGA,IAAM,CAAAiB,uBAAwB8D,CAAA;MAAA,OAAAjE,2CAAA,CAAAlD,KAAA;IAAA;IAY9B,MAAMqD,uBAAuBA,CAC3BrC,IAAoE;MAEpE,MAAMoG,kBAAkB,GAAG,IAAIpB,GAAG,CAEhC,CACA,MAAM,EACN,eAAe,EACf,eAAe,EACf,cAAc,EACd,YAAY,EACZ,YAAY,CACb,CAAC;MACF,IAAAtH,WAAA,CAAA2I,MAAM,EACJ,CAACrG,IAAI,IAAIoG,kBAAkB,CAACzF,GAAG,CAACX,IAAI,CAAC,EACrC,kCAAkCA,IAAI,EAAE,CACzC;MACD,MAAM,IAAI,CAAC,CAAAwE,qBAAsB,CAACpG,QAAQ,CAAC;QACzCgD,MAAM,EAAE,IAAI;QACZe,gBAAgB,EAAEnC;OACnB,CAAC;IACJ;IAGA,IAAM,CAAA0C,oBAAqB4D,CAAA;MAAA,OAAAhE,wCAAA,CAAAtD,KAAA;IAAA;IAY3B,MAAMuH,oBAAoBA,CAAC/D,MAAqB;MAC9C,IAAA9E,WAAA,CAAA2I,MAAM,EACJ7D,MAAM,KAAK,IAAI,IAAIA,MAAM,IAAI,CAAC,EAC9B,iDAAiD,CAClD;MACD,MAAM,IAAI,CAAC,CAAAiC,kBAAmB,CAACrG,QAAQ,CAAC;QACtCgD,MAAM,EAAE,IAAI;QACZoB,MAAM,EAAEA,MAAM,IAAIiB;OACnB,CAAC;IACJ;IAGA,IAAM,CAAAV,oBAAqByD,CAAA;MAAA,OAAA7D,wCAAA,CAAA3D,KAAA;IAAA;IAY3B,MAAM+D,oBAAoBA,CAACH,QAAyB;MAClD,IAAIwC,KAAK,CAACqB,OAAO,CAAC7D,QAAQ,CAAC,EAAE;QAC3B,KAAK,MAAM8D,YAAY,IAAI9D,QAAQ,EAAE;UACnC,MAAMrC,IAAI,GAAGmG,YAAY,CAACnG,IAAI;UAC9B,IAAA7C,WAAA,CAAA2I,MAAM,EACJ,2DAA2D,CAACM,IAAI,CAC9DpG,IAAI,CACL,EACD,6BAA6B,GAAGA,IAAI,CACrC;QACH;MACF;MACA,MAAM,IAAI,CAAC,CAAAmE,kBAAmB,CAACtG,QAAQ,CAAC;QACtCgD,MAAM,EAAE,IAAI;QACZyB,aAAa,EAAED;OAChB,CAAC;IACJ;IAGA,IAAM,CAAAO,gBAAiByD,CAAA;MAAA,OAAA5D,oCAAA,CAAAhE,KAAA;IAAA;IAYvB,MAAMmE,gBAAgBA,CAACnD,IAAa;MAClC,IAAAtC,WAAA,CAAA2I,MAAM,EACJrG,IAAI,KAAK,QAAQ,IACfA,IAAI,KAAK,OAAO,IAChB,CAACA,IAAI,IAAIyD,SAAS,MAAMA,SAAS,EACnC,0BAA0B,GAAGzD,IAAI,CAClC;MACD,MAAM,IAAI,CAAC,CAAA2E,cAAe,CAACvG,QAAQ,CAAC;QAClC4B,IAAI;QACJoB,MAAM,EAAE;OACT,CAAC;IACJ;IAGA,IAAM,CAAAuC,cAAekD,CAAA;MAAA,OAAAzD,kCAAA,CAAApE,KAAA;IAAA;IAmBrB,MAAM2E,cAAcA,CAACmD,OAA2B;MAC9C,MAAM;QAACxD,SAAS;QAAEC,QAAQ;QAAEC,QAAQ,GAAG;MAAC,CAAC,GAAGsD,OAAO;MACnD,IAAIxD,SAAS,GAAG,CAAC,GAAG,IAAIA,SAAS,GAAG,GAAG,EAAE;QACvC,MAAM,IAAIvB,KAAK,CACb,sBAAsBuB,SAAS,kDAAkD,CAClF;MACH;MACA,IAAIC,QAAQ,GAAG,CAAC,EAAE,IAAIA,QAAQ,GAAG,EAAE,EAAE;QACnC,MAAM,IAAIxB,KAAK,CACb,qBAAqBwB,QAAQ,+CAA+C,CAC7E;MACH;MACA,IAAIC,QAAQ,GAAG,CAAC,EAAE;QAChB,MAAM,IAAIzB,KAAK,CACb,qBAAqByB,QAAQ,uCAAuC,CACrE;MACH;MACA,MAAM,IAAI,CAAC,CAAAoB,gBAAiB,CAACxG,QAAQ,CAAC;QACpCgD,MAAM,EAAE,IAAI;QACZiC,WAAW,EAAE;UACXC,SAAS;UACTC,QAAQ;UACRC;;OAEH,CAAC;IACJ;IAGA,IAAM,CAAAO,yBAA0BgD,CAAA;MAAA,OAAAnD,6CAAA,CAAA5E,KAAA;IAAA;IAYhC;;;IAGA,MAAMgI,2BAA2BA,CAAA;MAC/B,MAAM,IAAI,CAAC,CAAAnC,2BAA4B,CAACzG,QAAQ,CAAC;QAC/CgD,MAAM,EAAE,IAAI;QACZyC,KAAK,EAAEJ;OACR,CAAC;IACJ;IAEA;;;IAGA,MAAMwD,6BAA6BA,CAAA;MACjC,MAAM,IAAI,CAAC,CAAApC,2BAA4B,CAACzG,QAAQ,CAAC;QAC/CgD,MAAM,EAAE,IAAI;QACZyC,KAAK,EAAE;UAACqD,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAC;OAC/B,CAAC;IACJ;IAGA,IAAM,CAAAlD,oBAAqBmD,CAAA;MAAA,OAAAtD,wCAAA,CAAAhF,KAAA;IAAA;IAY3B,MAAMmF,oBAAoBA,CAAC9E,OAAgB;MACzC,MAAM,IAAI,CAAC,CAAAyF,sBAAuB,CAAC1G,QAAQ,CAAC;QAC1CgD,MAAM,EAAE,IAAI;QACZ6C,iBAAiB,EAAE5E;OACpB,CAAC;IACJ;;;AA9cWV,OAAA,CAAAC,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}