{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogManager = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst log_js_1 = require(\"../../../utils/log.js\");\nconst logHelper_js_1 = require(\"./logHelper.js\");\n/** Converts CDP StackTrace object to BiDi StackTrace object. */\nfunction getBidiStackTrace(cdpStackTrace) {\n  const stackFrames = cdpStackTrace?.callFrames.map(callFrame => {\n    return {\n      columnNumber: callFrame.columnNumber,\n      functionName: callFrame.functionName,\n      lineNumber: callFrame.lineNumber,\n      url: callFrame.url\n    };\n  });\n  return stackFrames ? {\n    callFrames: stackFrames\n  } : undefined;\n}\nfunction getLogLevel(consoleApiType) {\n  if ([\"error\" /* Log.Level.Error */, 'assert'].includes(consoleApiType)) {\n    return \"error\" /* Log.Level.Error */;\n  }\n  if ([\"debug\" /* Log.Level.Debug */, 'trace'].includes(consoleApiType)) {\n    return \"debug\" /* Log.Level.Debug */;\n  }\n  if ([\"warn\" /* Log.Level.Warn */, 'warning'].includes(consoleApiType)) {\n    return \"warn\" /* Log.Level.Warn */;\n  }\n  return \"info\" /* Log.Level.Info */;\n}\nclass LogManager {\n  #eventManager;\n  #realmStorage;\n  #cdpTarget;\n  #logger;\n  constructor(cdpTarget, realmStorage, eventManager, logger) {\n    this.#cdpTarget = cdpTarget;\n    this.#realmStorage = realmStorage;\n    this.#eventManager = eventManager;\n    this.#logger = logger;\n  }\n  static create(cdpTarget, realmStorage, eventManager, logger) {\n    const logManager = new LogManager(cdpTarget, realmStorage, eventManager, logger);\n    logManager.#initializeEntryAddedEventListener();\n    return logManager;\n  }\n  #initializeEntryAddedEventListener() {\n    this.#cdpTarget.cdpClient.on('Runtime.consoleAPICalled', params => {\n      // Try to find realm by `cdpSessionId` and `executionContextId`,\n      // if provided.\n      const realm = this.#realmStorage.findRealm({\n        cdpSessionId: this.#cdpTarget.cdpSessionId,\n        executionContextId: params.executionContextId\n      });\n      if (realm === undefined) {\n        // Ignore exceptions not attached to any realm.\n        this.#logger?.(log_js_1.LogType.cdp, params);\n        return;\n      }\n      const argsPromise = realm === undefined ? Promise.resolve(params.args) :\n      // Properly serialize arguments if possible.\n      Promise.all(params.args.map(arg => {\n        return realm.serializeCdpObject(arg, \"none\" /* Script.ResultOwnership.None */);\n      }));\n      for (const browsingContext of realm.associatedBrowsingContexts) {\n        this.#eventManager.registerPromiseEvent(argsPromise.then(args => ({\n          kind: 'success',\n          value: {\n            type: 'event',\n            method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,\n            params: {\n              level: getLogLevel(params.type),\n              source: realm.source,\n              text: (0, logHelper_js_1.getRemoteValuesText)(args, true),\n              timestamp: Math.round(params.timestamp),\n              stackTrace: getBidiStackTrace(params.stackTrace),\n              type: 'console',\n              // Console method is `warn`, not `warning`.\n              method: params.type === 'warning' ? 'warn' : params.type,\n              args\n            }\n          }\n        }), error => ({\n          kind: 'error',\n          error\n        })), browsingContext.id, protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);\n      }\n    });\n    this.#cdpTarget.cdpClient.on('Runtime.exceptionThrown', params => {\n      // Try to find realm by `cdpSessionId` and `executionContextId`,\n      // if provided.\n      const realm = this.#realmStorage.findRealm({\n        cdpSessionId: this.#cdpTarget.cdpSessionId,\n        executionContextId: params.exceptionDetails.executionContextId\n      });\n      if (realm === undefined) {\n        // Ignore exceptions not attached to any realm.\n        this.#logger?.(log_js_1.LogType.cdp, params);\n        return;\n      }\n      for (const browsingContext of realm.associatedBrowsingContexts) {\n        this.#eventManager.registerPromiseEvent(LogManager.#getExceptionText(params, realm).then(text => ({\n          kind: 'success',\n          value: {\n            type: 'event',\n            method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,\n            params: {\n              level: \"error\" /* Log.Level.Error */,\n              source: realm.source,\n              text,\n              timestamp: Math.round(params.timestamp),\n              stackTrace: getBidiStackTrace(params.exceptionDetails.stackTrace),\n              type: 'javascript'\n            }\n          }\n        }), error => ({\n          kind: 'error',\n          error\n        })), browsingContext.id, protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);\n      }\n    });\n  }\n  /**\n   * Try the best to get the exception text.\n   */\n  static async #getExceptionText(params, realm) {\n    if (!params.exceptionDetails.exception) {\n      return params.exceptionDetails.text;\n    }\n    if (realm === undefined) {\n      return JSON.stringify(params.exceptionDetails.exception);\n    }\n    return await realm.stringifyObject(params.exceptionDetails.exception);\n  }\n}\nexports.LogManager = LogManager;","map":{"version":3,"names":["protocol_js_1","require","log_js_1","logHelper_js_1","getBidiStackTrace","cdpStackTrace","stackFrames","callFrames","map","callFrame","columnNumber","functionName","lineNumber","url","undefined","getLogLevel","consoleApiType","includes","LogManager","eventManager","realmStorage","cdpTarget","logger","constructor","create","logManager","initializeEntryAddedEventListener","#initializeEntryAddedEventListener","cdpClient","on","params","realm","findRealm","cdpSessionId","executionContextId","LogType","cdp","argsPromise","Promise","resolve","args","all","arg","serializeCdpObject","browsingContext","associatedBrowsingContexts","registerPromiseEvent","then","kind","value","type","method","ChromiumBidi","Log","EventNames","LogEntryAdded","level","source","text","getRemoteValuesText","timestamp","Math","round","stackTrace","error","id","exceptionDetails","getExceptionText","#getExceptionText","exception","JSON","stringify","stringifyObject","exports"],"sources":["../../../../../src/bidiMapper/modules/log/LogManager.ts"],"sourcesContent":[null],"mappings":";;;;;;AAkBA,MAAAA,aAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAMA,MAAAE,cAAA,GAAAF,OAAA;AAEA;AACA,SAASG,iBAAiBA,CACxBC,aAAsD;EAEtD,MAAMC,WAAW,GAAGD,aAAa,EAAEE,UAAU,CAACC,GAAG,CAAEC,SAAS,IAAI;IAC9D,OAAO;MACLC,YAAY,EAAED,SAAS,CAACC,YAAY;MACpCC,YAAY,EAAEF,SAAS,CAACE,YAAY;MACpCC,UAAU,EAAEH,SAAS,CAACG,UAAU;MAChCC,GAAG,EAAEJ,SAAS,CAACI;KAChB;EACH,CAAC,CAAC;EAEF,OAAOP,WAAW,GAAG;IAACC,UAAU,EAAED;EAAW,CAAC,GAAGQ,SAAS;AAC5D;AAEA,SAASC,WAAWA,CAACC,cAAsB;EACzC,IAAI,gCAAkB,QAAQ,CAAC,CAACC,QAAQ,CAACD,cAAc,CAAC,EAAE;IACxD;EACF;EACA,IAAI,gCAAkB,OAAO,CAAC,CAACC,QAAQ,CAACD,cAAc,CAAC,EAAE;IACvD;EACF;EACA,IAAI,8BAAiB,SAAS,CAAC,CAACC,QAAQ,CAACD,cAAc,CAAC,EAAE;IACxD;EACF;EACA;AACF;AAEA,MAAaE,UAAU;EACZ,CAAAC,YAAa;EACb,CAAAC,YAAa;EACb,CAAAC,SAAU;EACV,CAAAC,MAAO;EAEhBC,YACEF,SAAoB,EACpBD,YAA0B,EAC1BD,YAA0B,EAC1BG,MAAiB;IAEjB,IAAI,CAAC,CAAAD,SAAU,GAAGA,SAAS;IAC3B,IAAI,CAAC,CAAAD,YAAa,GAAGA,YAAY;IACjC,IAAI,CAAC,CAAAD,YAAa,GAAGA,YAAY;IACjC,IAAI,CAAC,CAAAG,MAAO,GAAGA,MAAM;EACvB;EAEA,OAAOE,MAAMA,CACXH,SAAoB,EACpBD,YAA0B,EAC1BD,YAA0B,EAC1BG,MAAiB;IAEjB,MAAMG,UAAU,GAAG,IAAIP,UAAU,CAC/BG,SAAS,EACTD,YAAY,EACZD,YAAY,EACZG,MAAM,CACP;IAEDG,UAAU,CAAC,CAAAC,iCAAkC,EAAE;IAE/C,OAAOD,UAAU;EACnB;EAEA,CAAAC,iCAAkCC,CAAA;IAChC,IAAI,CAAC,CAAAN,SAAU,CAACO,SAAS,CAACC,EAAE,CAAC,0BAA0B,EAAGC,MAAM,IAAI;MAClE;MACA;MACA,MAAMC,KAAK,GAAsB,IAAI,CAAC,CAAAX,YAAa,CAACY,SAAS,CAAC;QAC5DC,YAAY,EAAE,IAAI,CAAC,CAAAZ,SAAU,CAACY,YAAY;QAC1CC,kBAAkB,EAAEJ,MAAM,CAACI;OAC5B,CAAC;MACF,IAAIH,KAAK,KAAKjB,SAAS,EAAE;QACvB;QACA,IAAI,CAAC,CAAAQ,MAAO,GAAGpB,QAAA,CAAAiC,OAAO,CAACC,GAAG,EAAEN,MAAM,CAAC;QACnC;MACF;MAEA,MAAMO,WAAW,GACfN,KAAK,KAAKjB,SAAS,GACfwB,OAAO,CAACC,OAAO,CAACT,MAAM,CAACU,IAA4B,CAAC;MACpD;MACAF,OAAO,CAACG,GAAG,CACTX,MAAM,CAACU,IAAI,CAAChC,GAAG,CAAEkC,GAAG,IAAI;QACtB,OAAOX,KAAK,CAACY,kBAAkB,CAC7BD,GAAG,2CAEJ;MACH,CAAC,CAAC,CACH;MACP,KAAK,MAAME,eAAe,IAAIb,KAAK,CAACc,0BAA0B,EAAE;QAC9D,IAAI,CAAC,CAAA1B,YAAa,CAAC2B,oBAAoB,CACrCT,WAAW,CAACU,IAAI,CACbP,IAAI,KAAM;UACTQ,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE;YACLC,IAAI,EAAE,OAAO;YACbC,MAAM,EAAEnD,aAAA,CAAAoD,YAAY,CAACC,GAAG,CAACC,UAAU,CAACC,aAAa;YACjDzB,MAAM,EAAE;cACN0B,KAAK,EAAEzC,WAAW,CAACe,MAAM,CAACoB,IAAI,CAAC;cAC/BO,MAAM,EAAE1B,KAAK,CAAC0B,MAAM;cACpBC,IAAI,EAAE,IAAAvD,cAAA,CAAAwD,mBAAmB,EAACnB,IAAI,EAAE,IAAI,CAAC;cACrCoB,SAAS,EAAEC,IAAI,CAACC,KAAK,CAAChC,MAAM,CAAC8B,SAAS,CAAC;cACvCG,UAAU,EAAE3D,iBAAiB,CAAC0B,MAAM,CAACiC,UAAU,CAAC;cAChDb,IAAI,EAAE,SAAS;cACf;cACAC,MAAM,EAAErB,MAAM,CAACoB,IAAI,KAAK,SAAS,GAAG,MAAM,GAAGpB,MAAM,CAACoB,IAAI;cACxDV;;;SAGL,CAAC,EACDwB,KAAK,KAAM;UACVhB,IAAI,EAAE,OAAO;UACbgB;SACD,CAAC,CACH,EACDpB,eAAe,CAACqB,EAAE,EAClBjE,aAAA,CAAAoD,YAAY,CAACC,GAAG,CAACC,UAAU,CAACC,aAAa,CAC1C;MACH;IACF,CAAC,CAAC;IAEF,IAAI,CAAC,CAAAlC,SAAU,CAACO,SAAS,CAACC,EAAE,CAAC,yBAAyB,EAAGC,MAAM,IAAI;MACjE;MACA;MACA,MAAMC,KAAK,GAAG,IAAI,CAAC,CAAAX,YAAa,CAACY,SAAS,CAAC;QACzCC,YAAY,EAAE,IAAI,CAAC,CAAAZ,SAAU,CAACY,YAAY;QAC1CC,kBAAkB,EAAEJ,MAAM,CAACoC,gBAAgB,CAAChC;OAC7C,CAAC;MACF,IAAIH,KAAK,KAAKjB,SAAS,EAAE;QACvB;QACA,IAAI,CAAC,CAAAQ,MAAO,GAAGpB,QAAA,CAAAiC,OAAO,CAACC,GAAG,EAAEN,MAAM,CAAC;QACnC;MACF;MAEA,KAAK,MAAMc,eAAe,IAAIb,KAAK,CAACc,0BAA0B,EAAE;QAC9D,IAAI,CAAC,CAAA1B,YAAa,CAAC2B,oBAAoB,CACrC5B,UAAU,CAAC,CAAAiD,gBAAiB,CAACrC,MAAM,EAAEC,KAAK,CAAC,CAACgB,IAAI,CAC7CW,IAAI,KAAM;UACTV,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE;YACLC,IAAI,EAAE,OAAO;YACbC,MAAM,EAAEnD,aAAA,CAAAoD,YAAY,CAACC,GAAG,CAACC,UAAU,CAACC,aAAa;YACjDzB,MAAM,EAAE;cACN0B,KAAK;cACLC,MAAM,EAAE1B,KAAK,CAAC0B,MAAM;cACpBC,IAAI;cACJE,SAAS,EAAEC,IAAI,CAACC,KAAK,CAAChC,MAAM,CAAC8B,SAAS,CAAC;cACvCG,UAAU,EAAE3D,iBAAiB,CAC3B0B,MAAM,CAACoC,gBAAgB,CAACH,UAAU,CACnC;cACDb,IAAI,EAAE;;;SAGX,CAAC,EACDc,KAAK,KAAM;UACVhB,IAAI,EAAE,OAAO;UACbgB;SACD,CAAC,CACH,EACDpB,eAAe,CAACqB,EAAE,EAClBjE,aAAA,CAAAoD,YAAY,CAACC,GAAG,CAACC,UAAU,CAACC,aAAa,CAC1C;MACH;IACF,CAAC,CAAC;EACJ;EAEA;;;EAGA,aAAa,CAAAY,gBAAiBC,CAC5BtC,MAA6C,EAC7CC,KAAa;IAEb,IAAI,CAACD,MAAM,CAACoC,gBAAgB,CAACG,SAAS,EAAE;MACtC,OAAOvC,MAAM,CAACoC,gBAAgB,CAACR,IAAI;IACrC;IACA,IAAI3B,KAAK,KAAKjB,SAAS,EAAE;MACvB,OAAOwD,IAAI,CAACC,SAAS,CAACzC,MAAM,CAACoC,gBAAgB,CAACG,SAAS,CAAC;IAC1D;IACA,OAAO,MAAMtC,KAAK,CAACyC,eAAe,CAAC1C,MAAM,CAACoC,gBAAgB,CAACG,SAAS,CAAC;EACvE;;AAzJFI,OAAA,CAAAvD,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}