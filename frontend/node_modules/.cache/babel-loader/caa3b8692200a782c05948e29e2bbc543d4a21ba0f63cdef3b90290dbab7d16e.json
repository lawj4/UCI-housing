{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PreloadScript = void 0;\nconst uuid_js_1 = require(\"../../../utils/uuid.js\");\nconst ChannelProxy_js_1 = require(\"./ChannelProxy.js\");\n/**\n * BiDi IDs are generated by the server and are unique within contexts.\n *\n * CDP preload script IDs are generated by the client and are unique\n * within sessions.\n *\n * The mapping between BiDi and CDP preload script IDs is 1:many.\n * BiDi IDs are needed by the mapper to keep track of potential multiple CDP IDs\n * in the client.\n */\nclass PreloadScript {\n  /** BiDi ID, an automatically generated UUID. */\n  #id = (0, uuid_js_1.uuidv4)();\n  /** CDP preload scripts. */\n  #cdpPreloadScripts = [];\n  /** The script itself, in a format expected by the spec i.e. a function. */\n  #functionDeclaration;\n  /** Targets, in which the preload script is initialized. */\n  #targetIds = new Set();\n  /** Channels to be added as arguments to functionDeclaration. */\n  #channels;\n  /** The script sandbox / world name. */\n  #sandbox;\n  /** The browsing contexts to execute the preload scripts in, if any. */\n  #contexts;\n  get id() {\n    return this.#id;\n  }\n  get targetIds() {\n    return this.#targetIds;\n  }\n  constructor(params, logger) {\n    this.#channels = params.arguments?.map(a => new ChannelProxy_js_1.ChannelProxy(a.value, logger)) ?? [];\n    this.#functionDeclaration = params.functionDeclaration;\n    this.#sandbox = params.sandbox;\n    this.#contexts = params.contexts;\n  }\n  /** Channels of the preload script. */\n  get channels() {\n    return this.#channels;\n  }\n  /** Contexts of the preload script, if any */\n  get contexts() {\n    return this.#contexts;\n  }\n  /**\n   * String to be evaluated. Wraps user-provided function so that the following\n   * steps are run:\n   * 1. Create channels.\n   * 2. Store the created channels in window.\n   * 3. Call the user-provided function with channels as arguments.\n   */\n  #getEvaluateString() {\n    const channelsArgStr = `[${this.channels.map(c => c.getEvalInWindowStr()).join(', ')}]`;\n    return `(()=>{(${this.#functionDeclaration})(...${channelsArgStr})})()`;\n  }\n  /**\n   * Adds the script to the given CDP targets by calling the\n   * `Page.addScriptToEvaluateOnNewDocument` command.\n   */\n  async initInTargets(cdpTargets, runImmediately) {\n    await Promise.all(Array.from(cdpTargets).map(cdpTarget => this.initInTarget(cdpTarget, runImmediately)));\n  }\n  /**\n   * Adds the script to the given CDP target by calling the\n   * `Page.addScriptToEvaluateOnNewDocument` command.\n   */\n  async initInTarget(cdpTarget, runImmediately) {\n    const addCdpPreloadScriptResult = await cdpTarget.cdpClient.sendCommand('Page.addScriptToEvaluateOnNewDocument', {\n      source: this.#getEvaluateString(),\n      worldName: this.#sandbox,\n      runImmediately\n    });\n    this.#cdpPreloadScripts.push({\n      target: cdpTarget,\n      preloadScriptId: addCdpPreloadScriptResult.identifier\n    });\n    this.#targetIds.add(cdpTarget.id);\n  }\n  /**\n   * Removes this script from all CDP targets.\n   */\n  async remove() {\n    await Promise.all([this.#cdpPreloadScripts.map(async cdpPreloadScript => {\n      const cdpTarget = cdpPreloadScript.target;\n      const cdpPreloadScriptId = cdpPreloadScript.preloadScriptId;\n      return await cdpTarget.cdpClient.sendCommand('Page.removeScriptToEvaluateOnNewDocument', {\n        identifier: cdpPreloadScriptId\n      });\n    })]);\n  }\n  /** Removes the provided cdp target from the list of cdp preload scripts. */\n  dispose(cdpTargetId) {\n    this.#cdpPreloadScripts = this.#cdpPreloadScripts.filter(cdpPreloadScript => cdpPreloadScript.target?.id !== cdpTargetId);\n    this.#targetIds.delete(cdpTargetId);\n  }\n}\nexports.PreloadScript = PreloadScript;","map":{"version":3,"names":["uuid_js_1","require","ChannelProxy_js_1","PreloadScript","id","uuidv4","cdpPreloadScripts","functionDeclaration","targetIds","Set","channels","sandbox","contexts","constructor","params","logger","arguments","map","a","ChannelProxy","value","getEvaluateString","#getEvaluateString","channelsArgStr","c","getEvalInWindowStr","join","initInTargets","cdpTargets","runImmediately","Promise","all","Array","from","cdpTarget","initInTarget","addCdpPreloadScriptResult","cdpClient","sendCommand","source","worldName","push","target","preloadScriptId","identifier","add","remove","cdpPreloadScript","cdpPreloadScriptId","dispose","cdpTargetId","filter","delete","exports"],"sources":["../../../../../src/bidiMapper/modules/script/PreloadScript.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}