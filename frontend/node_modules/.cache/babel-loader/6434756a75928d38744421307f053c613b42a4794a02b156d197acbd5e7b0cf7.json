{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BidiSerializer = void 0;\nconst util_js_1 = require(\"../common/util.js\");\n/**\n * @internal\n */\nclass UnserializableError extends Error {}\n/**\n * @internal\n */\nclass BidiSerializer {\n  static serialize(arg) {\n    switch (typeof arg) {\n      case 'symbol':\n      case 'function':\n        throw new UnserializableError(`Unable to serializable ${typeof arg}`);\n      case 'object':\n        return this.#serializeObject(arg);\n      case 'undefined':\n        return {\n          type: 'undefined'\n        };\n      case 'number':\n        return this.#serializeNumber(arg);\n      case 'bigint':\n        return {\n          type: 'bigint',\n          value: arg.toString()\n        };\n      case 'string':\n        return {\n          type: 'string',\n          value: arg\n        };\n      case 'boolean':\n        return {\n          type: 'boolean',\n          value: arg\n        };\n    }\n  }\n  static #serializeNumber(arg) {\n    let value;\n    if (Object.is(arg, -0)) {\n      value = '-0';\n    } else if (Object.is(arg, Infinity)) {\n      value = 'Infinity';\n    } else if (Object.is(arg, -Infinity)) {\n      value = '-Infinity';\n    } else if (Object.is(arg, NaN)) {\n      value = 'NaN';\n    } else {\n      value = arg;\n    }\n    return {\n      type: 'number',\n      value\n    };\n  }\n  static #serializeObject(arg) {\n    if (arg === null) {\n      return {\n        type: 'null'\n      };\n    } else if (Array.isArray(arg)) {\n      const parsedArray = arg.map(subArg => {\n        return this.serialize(subArg);\n      });\n      return {\n        type: 'array',\n        value: parsedArray\n      };\n    } else if ((0, util_js_1.isPlainObject)(arg)) {\n      try {\n        JSON.stringify(arg);\n      } catch (error) {\n        if (error instanceof TypeError && error.message.startsWith('Converting circular structure to JSON')) {\n          error.message += ' Recursive objects are not allowed.';\n        }\n        throw error;\n      }\n      const parsedObject = [];\n      for (const key in arg) {\n        parsedObject.push([this.serialize(key), this.serialize(arg[key])]);\n      }\n      return {\n        type: 'object',\n        value: parsedObject\n      };\n    } else if ((0, util_js_1.isRegExp)(arg)) {\n      return {\n        type: 'regexp',\n        value: {\n          pattern: arg.source,\n          flags: arg.flags\n        }\n      };\n    } else if ((0, util_js_1.isDate)(arg)) {\n      return {\n        type: 'date',\n        value: arg.toISOString()\n      };\n    }\n    throw new UnserializableError('Custom object serialization not possible. Use plain objects instead.');\n  }\n}\nexports.BidiSerializer = BidiSerializer;","map":{"version":3,"names":["util_js_1","require","UnserializableError","Error","BidiSerializer","serialize","arg","serializeObject","type","serializeNumber","value","toString","#serializeNumber","Object","is","Infinity","NaN","#serializeObject","Array","isArray","parsedArray","map","subArg","isPlainObject","JSON","stringify","error","TypeError","message","startsWith","parsedObject","key","push","isRegExp","pattern","source","flags","isDate","toISOString","exports"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/src/bidi/Serializer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type * as Bidi from 'chromium-bidi/lib/cjs/protocol/protocol.js';\n\nimport {isDate, isPlainObject, isRegExp} from '../common/util.js';\n\n/**\n * @internal\n */\nclass UnserializableError extends Error {}\n\n/**\n * @internal\n */\nexport class BidiSerializer {\n  static serialize(arg: unknown): Bidi.Script.LocalValue {\n    switch (typeof arg) {\n      case 'symbol':\n      case 'function':\n        throw new UnserializableError(`Unable to serializable ${typeof arg}`);\n      case 'object':\n        return this.#serializeObject(arg);\n\n      case 'undefined':\n        return {\n          type: 'undefined',\n        };\n      case 'number':\n        return this.#serializeNumber(arg);\n      case 'bigint':\n        return {\n          type: 'bigint',\n          value: arg.toString(),\n        };\n      case 'string':\n        return {\n          type: 'string',\n          value: arg,\n        };\n      case 'boolean':\n        return {\n          type: 'boolean',\n          value: arg,\n        };\n    }\n  }\n\n  static #serializeNumber(arg: number): Bidi.Script.LocalValue {\n    let value: Bidi.Script.SpecialNumber | number;\n    if (Object.is(arg, -0)) {\n      value = '-0';\n    } else if (Object.is(arg, Infinity)) {\n      value = 'Infinity';\n    } else if (Object.is(arg, -Infinity)) {\n      value = '-Infinity';\n    } else if (Object.is(arg, NaN)) {\n      value = 'NaN';\n    } else {\n      value = arg;\n    }\n    return {\n      type: 'number',\n      value,\n    };\n  }\n\n  static #serializeObject(arg: object | null): Bidi.Script.LocalValue {\n    if (arg === null) {\n      return {\n        type: 'null',\n      };\n    } else if (Array.isArray(arg)) {\n      const parsedArray = arg.map(subArg => {\n        return this.serialize(subArg);\n      });\n\n      return {\n        type: 'array',\n        value: parsedArray,\n      };\n    } else if (isPlainObject(arg)) {\n      try {\n        JSON.stringify(arg);\n      } catch (error) {\n        if (\n          error instanceof TypeError &&\n          error.message.startsWith('Converting circular structure to JSON')\n        ) {\n          error.message += ' Recursive objects are not allowed.';\n        }\n        throw error;\n      }\n\n      const parsedObject: Bidi.Script.MappingLocalValue = [];\n      for (const key in arg) {\n        parsedObject.push([this.serialize(key), this.serialize(arg[key])]);\n      }\n\n      return {\n        type: 'object',\n        value: parsedObject,\n      };\n    } else if (isRegExp(arg)) {\n      return {\n        type: 'regexp',\n        value: {\n          pattern: arg.source,\n          flags: arg.flags,\n        },\n      };\n    } else if (isDate(arg)) {\n      return {\n        type: 'date',\n        value: arg.toISOString(),\n      };\n    }\n\n    throw new UnserializableError(\n      'Custom object serialization not possible. Use plain objects instead.'\n    );\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;AAQA,MAAAA,SAAA,GAAAC,OAAA;AAEA;;;AAGA,MAAMC,mBAAoB,SAAQC,KAAK;AAEvC;;;AAGA,MAAaC,cAAc;EACzB,OAAOC,SAASA,CAACC,GAAY;IAC3B,QAAQ,OAAOA,GAAG;MAChB,KAAK,QAAQ;MACb,KAAK,UAAU;QACb,MAAM,IAAIJ,mBAAmB,CAAC,0BAA0B,OAAOI,GAAG,EAAE,CAAC;MACvE,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC,CAAAC,eAAgB,CAACD,GAAG,CAAC;MAEnC,KAAK,WAAW;QACd,OAAO;UACLE,IAAI,EAAE;SACP;MACH,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC,CAAAC,eAAgB,CAACH,GAAG,CAAC;MACnC,KAAK,QAAQ;QACX,OAAO;UACLE,IAAI,EAAE,QAAQ;UACdE,KAAK,EAAEJ,GAAG,CAACK,QAAQ;SACpB;MACH,KAAK,QAAQ;QACX,OAAO;UACLH,IAAI,EAAE,QAAQ;UACdE,KAAK,EAAEJ;SACR;MACH,KAAK,SAAS;QACZ,OAAO;UACLE,IAAI,EAAE,SAAS;UACfE,KAAK,EAAEJ;SACR;IACL;EACF;EAEA,OAAO,CAAAG,eAAgBG,CAACN,GAAW;IACjC,IAAII,KAAyC;IAC7C,IAAIG,MAAM,CAACC,EAAE,CAACR,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;MACtBI,KAAK,GAAG,IAAI;IACd,CAAC,MAAM,IAAIG,MAAM,CAACC,EAAE,CAACR,GAAG,EAAES,QAAQ,CAAC,EAAE;MACnCL,KAAK,GAAG,UAAU;IACpB,CAAC,MAAM,IAAIG,MAAM,CAACC,EAAE,CAACR,GAAG,EAAE,CAACS,QAAQ,CAAC,EAAE;MACpCL,KAAK,GAAG,WAAW;IACrB,CAAC,MAAM,IAAIG,MAAM,CAACC,EAAE,CAACR,GAAG,EAAEU,GAAG,CAAC,EAAE;MAC9BN,KAAK,GAAG,KAAK;IACf,CAAC,MAAM;MACLA,KAAK,GAAGJ,GAAG;IACb;IACA,OAAO;MACLE,IAAI,EAAE,QAAQ;MACdE;KACD;EACH;EAEA,OAAO,CAAAH,eAAgBU,CAACX,GAAkB;IACxC,IAAIA,GAAG,KAAK,IAAI,EAAE;MAChB,OAAO;QACLE,IAAI,EAAE;OACP;IACH,CAAC,MAAM,IAAIU,KAAK,CAACC,OAAO,CAACb,GAAG,CAAC,EAAE;MAC7B,MAAMc,WAAW,GAAGd,GAAG,CAACe,GAAG,CAACC,MAAM,IAAG;QACnC,OAAO,IAAI,CAACjB,SAAS,CAACiB,MAAM,CAAC;MAC/B,CAAC,CAAC;MAEF,OAAO;QACLd,IAAI,EAAE,OAAO;QACbE,KAAK,EAAEU;OACR;IACH,CAAC,MAAM,IAAI,IAAApB,SAAA,CAAAuB,aAAa,EAACjB,GAAG,CAAC,EAAE;MAC7B,IAAI;QACFkB,IAAI,CAACC,SAAS,CAACnB,GAAG,CAAC;MACrB,CAAC,CAAC,OAAOoB,KAAK,EAAE;QACd,IACEA,KAAK,YAAYC,SAAS,IAC1BD,KAAK,CAACE,OAAO,CAACC,UAAU,CAAC,uCAAuC,CAAC,EACjE;UACAH,KAAK,CAACE,OAAO,IAAI,qCAAqC;QACxD;QACA,MAAMF,KAAK;MACb;MAEA,MAAMI,YAAY,GAAkC,EAAE;MACtD,KAAK,MAAMC,GAAG,IAAIzB,GAAG,EAAE;QACrBwB,YAAY,CAACE,IAAI,CAAC,CAAC,IAAI,CAAC3B,SAAS,CAAC0B,GAAG,CAAC,EAAE,IAAI,CAAC1B,SAAS,CAACC,GAAG,CAACyB,GAAG,CAAC,CAAC,CAAC,CAAC;MACpE;MAEA,OAAO;QACLvB,IAAI,EAAE,QAAQ;QACdE,KAAK,EAAEoB;OACR;IACH,CAAC,MAAM,IAAI,IAAA9B,SAAA,CAAAiC,QAAQ,EAAC3B,GAAG,CAAC,EAAE;MACxB,OAAO;QACLE,IAAI,EAAE,QAAQ;QACdE,KAAK,EAAE;UACLwB,OAAO,EAAE5B,GAAG,CAAC6B,MAAM;UACnBC,KAAK,EAAE9B,GAAG,CAAC8B;;OAEd;IACH,CAAC,MAAM,IAAI,IAAApC,SAAA,CAAAqC,MAAM,EAAC/B,GAAG,CAAC,EAAE;MACtB,OAAO;QACLE,IAAI,EAAE,MAAM;QACZE,KAAK,EAAEJ,GAAG,CAACgC,WAAW;OACvB;IACH;IAEA,MAAM,IAAIpC,mBAAmB,CAC3B,sEAAsE,CACvE;EACH;;AA1GFqC,OAAA,CAAAnC,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}