{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WheelSource = exports.PointerSource = exports.KeySource = exports.NoneSource = void 0;\nclass NoneSource {\n  type = \"none\" /* SourceType.None */;\n}\nexports.NoneSource = NoneSource;\nclass KeySource {\n  type = \"key\" /* SourceType.Key */;\n  pressed = new Set();\n  // This is a bitfield that matches the modifiers parameter of\n  // https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent\n  #modifiers = 0;\n  get modifiers() {\n    return this.#modifiers;\n  }\n  get alt() {\n    return (this.#modifiers & 1) === 1;\n  }\n  set alt(value) {\n    this.#setModifier(value, 1);\n  }\n  get ctrl() {\n    return (this.#modifiers & 2) === 2;\n  }\n  set ctrl(value) {\n    this.#setModifier(value, 2);\n  }\n  get meta() {\n    return (this.#modifiers & 4) === 4;\n  }\n  set meta(value) {\n    this.#setModifier(value, 4);\n  }\n  get shift() {\n    return (this.#modifiers & 8) === 8;\n  }\n  set shift(value) {\n    this.#setModifier(value, 8);\n  }\n  #setModifier(value, bit) {\n    if (value) {\n      this.#modifiers |= bit;\n    } else {\n      this.#modifiers &= ~bit;\n    }\n  }\n}\nexports.KeySource = KeySource;\nclass PointerSource {\n  type = \"pointer\" /* SourceType.Pointer */;\n  subtype;\n  pointerId;\n  pressed = new Set();\n  x = 0;\n  y = 0;\n  radiusX;\n  radiusY;\n  force;\n  constructor(id, subtype) {\n    this.pointerId = id;\n    this.subtype = subtype;\n  }\n  // This is a bitfield that matches the buttons parameter of\n  // https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchMouseEvent\n  get buttons() {\n    let buttons = 0;\n    for (const button of this.pressed) {\n      switch (button) {\n        case 0:\n          buttons |= 1;\n          break;\n        case 1:\n          buttons |= 4;\n          break;\n        case 2:\n          buttons |= 2;\n          break;\n        case 3:\n          buttons |= 8;\n          break;\n        case 4:\n          buttons |= 16;\n          break;\n      }\n    }\n    return buttons;\n  }\n  // --- Platform-specific code starts here ---\n  // Input.dispatchMouseEvent doesn't know the concept of double click, so we\n  // need to create the logic, similar to how it's done for OSes:\n  // https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:ui/events/event.cc;l=479\n  static ClickContext = class ClickContext {\n    static #DOUBLE_CLICK_TIME_MS = 500;\n    static #MAX_DOUBLE_CLICK_RADIUS = 2;\n    count = 0;\n    #x;\n    #y;\n    #time;\n    constructor(x, y, time) {\n      this.#x = x;\n      this.#y = y;\n      this.#time = time;\n    }\n    compare(context) {\n      return (\n        // The click needs to be within a certain amount of ms.\n        context.#time - this.#time > ClickContext.#DOUBLE_CLICK_TIME_MS ||\n        // The click needs to be within a certain square radius.\n        Math.abs(context.#x - this.#x) > ClickContext.#MAX_DOUBLE_CLICK_RADIUS || Math.abs(context.#y - this.#y) > ClickContext.#MAX_DOUBLE_CLICK_RADIUS\n      );\n    }\n  };\n  #clickContexts = new Map();\n  setClickCount(button, context) {\n    let storedContext = this.#clickContexts.get(button);\n    if (!storedContext || storedContext.compare(context)) {\n      storedContext = context;\n    }\n    ++storedContext.count;\n    this.#clickContexts.set(button, storedContext);\n    return storedContext.count;\n  }\n  getClickCount(button) {\n    return this.#clickContexts.get(button)?.count ?? 0;\n  }\n}\nexports.PointerSource = PointerSource;\nclass WheelSource {\n  type = \"wheel\" /* SourceType.Wheel */;\n}\nexports.WheelSource = WheelSource;","map":{"version":3,"names":["NoneSource","type","exports","KeySource","pressed","Set","modifiers","alt","value","setModifier","ctrl","meta","shift","#setModifier","bit","PointerSource","subtype","pointerId","x","y","radiusX","radiusY","force","constructor","id","buttons","button","ClickContext","DOUBLE_CLICK_TIME_MS","MAX_DOUBLE_CLICK_RADIUS","count","time","compare","context","Math","abs","clickContexts","Map","setClickCount","storedContext","get","set","getClickCount","WheelSource"],"sources":["../../../../../src/bidiMapper/modules/input/InputSource.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}