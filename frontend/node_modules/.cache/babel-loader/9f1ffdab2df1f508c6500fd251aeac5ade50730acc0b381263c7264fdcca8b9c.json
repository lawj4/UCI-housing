{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scriptInjector = exports.ScriptInjector = void 0;\n/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nconst injected_js_1 = require(\"../generated/injected.js\");\n/**\n * @internal\n */\nclass ScriptInjector {\n  #updated = false;\n  #amendments = new Set();\n  // Appends a statement of the form `(PuppeteerUtil) => {...}`.\n  append(statement) {\n    this.#update(() => {\n      this.#amendments.add(statement);\n    });\n  }\n  pop(statement) {\n    this.#update(() => {\n      this.#amendments.delete(statement);\n    });\n  }\n  inject(inject, force = false) {\n    if (this.#updated || force) {\n      inject(this.#get());\n    }\n    this.#updated = false;\n  }\n  #update(callback) {\n    callback();\n    this.#updated = true;\n  }\n  #get() {\n    return `(() => {\n      const module = {};\n      ${injected_js_1.source}\n      ${[...this.#amendments].map(statement => {\n      return `(${statement})(module.exports.default);`;\n    }).join('')}\n      return module.exports.default;\n    })()`;\n  }\n}\nexports.ScriptInjector = ScriptInjector;\n/**\n * @internal\n */\nexports.scriptInjector = new ScriptInjector();","map":{"version":3,"names":["injected_js_1","require","ScriptInjector","updated","amendments","Set","append","statement","update","add","pop","delete","inject","force","get","#update","callback","#get","source","map","join","exports","scriptInjector"],"sources":["/Users/lawj4/webDevelopment/node_modules/puppeteer-core/src/common/ScriptInjector.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {source as injectedSource} from '../generated/injected.js';\n\n/**\n * @internal\n */\nexport class ScriptInjector {\n  #updated = false;\n  #amendments = new Set<string>();\n\n  // Appends a statement of the form `(PuppeteerUtil) => {...}`.\n  append(statement: string): void {\n    this.#update(() => {\n      this.#amendments.add(statement);\n    });\n  }\n\n  pop(statement: string): void {\n    this.#update(() => {\n      this.#amendments.delete(statement);\n    });\n  }\n\n  inject(inject: (script: string) => void, force = false): void {\n    if (this.#updated || force) {\n      inject(this.#get());\n    }\n    this.#updated = false;\n  }\n\n  #update(callback: () => void): void {\n    callback();\n    this.#updated = true;\n  }\n\n  #get(): string {\n    return `(() => {\n      const module = {};\n      ${injectedSource}\n      ${[...this.#amendments]\n        .map(statement => {\n          return `(${statement})(module.exports.default);`;\n        })\n        .join('')}\n      return module.exports.default;\n    })()`;\n  }\n}\n\n/**\n * @internal\n */\nexport const scriptInjector = new ScriptInjector();\n"],"mappings":";;;;;;AAAA;;;;;AAKA,MAAAA,aAAA,GAAAC,OAAA;AAEA;;;AAGA,MAAaC,cAAc;EACzB,CAAAC,OAAQ,GAAG,KAAK;EAChB,CAAAC,UAAW,GAAG,IAAIC,GAAG,EAAU;EAE/B;EACAC,MAAMA,CAACC,SAAiB;IACtB,IAAI,CAAC,CAAAC,MAAO,CAAC,MAAK;MAChB,IAAI,CAAC,CAAAJ,UAAW,CAACK,GAAG,CAACF,SAAS,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAG,GAAGA,CAACH,SAAiB;IACnB,IAAI,CAAC,CAAAC,MAAO,CAAC,MAAK;MAChB,IAAI,CAAC,CAAAJ,UAAW,CAACO,MAAM,CAACJ,SAAS,CAAC;IACpC,CAAC,CAAC;EACJ;EAEAK,MAAMA,CAACA,MAAgC,EAAEC,KAAK,GAAG,KAAK;IACpD,IAAI,IAAI,CAAC,CAAAV,OAAQ,IAAIU,KAAK,EAAE;MAC1BD,MAAM,CAAC,IAAI,CAAC,CAAAE,GAAI,EAAE,CAAC;IACrB;IACA,IAAI,CAAC,CAAAX,OAAQ,GAAG,KAAK;EACvB;EAEA,CAAAK,MAAOO,CAACC,QAAoB;IAC1BA,QAAQ,EAAE;IACV,IAAI,CAAC,CAAAb,OAAQ,GAAG,IAAI;EACtB;EAEA,CAAAW,GAAIG,CAAA;IACF,OAAO;;QAEHjB,aAAA,CAAAkB,MAAc;QACd,CAAC,GAAG,IAAI,CAAC,CAAAd,UAAW,CAAC,CACpBe,GAAG,CAACZ,SAAS,IAAG;MACf,OAAO,IAAIA,SAAS,4BAA4B;IAClD,CAAC,CAAC,CACDa,IAAI,CAAC,EAAE,CAAC;;SAER;EACP;;AAxCFC,OAAA,CAAAnB,cAAA,GAAAA,cAAA;AA2CA;;;AAGamB,OAAA,CAAAC,cAAc,GAAG,IAAIpB,cAAc,EAAE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}