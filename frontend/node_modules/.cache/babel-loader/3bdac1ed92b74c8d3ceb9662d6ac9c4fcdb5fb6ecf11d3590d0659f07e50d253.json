{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SharedWorkerRealm = exports.DedicatedWorkerRealm = exports.WindowRealm = exports.Realm = void 0;\nconst EventEmitter_js_1 = require(\"../../common/EventEmitter.js\");\nconst decorators_js_1 = require(\"../../util/decorators.js\");\nconst disposable_js_1 = require(\"../../util/disposable.js\");\n/**\n * @internal\n */\nlet Realm = (() => {\n  let _classSuper = EventEmitter_js_1.EventEmitter;\n  let _instanceExtraInitializers = [];\n  let _dispose_decorators;\n  let _disown_decorators;\n  let _callFunction_decorators;\n  let _evaluate_decorators;\n  let _resolveExecutionContextId_decorators;\n  return class Realm extends _classSuper {\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n      __esDecorate(this, null, _dispose_decorators, {\n        kind: \"method\",\n        name: \"dispose\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"dispose\" in obj,\n          get: obj => obj.dispose\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _disown_decorators, {\n        kind: \"method\",\n        name: \"disown\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"disown\" in obj,\n          get: obj => obj.disown\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _callFunction_decorators, {\n        kind: \"method\",\n        name: \"callFunction\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"callFunction\" in obj,\n          get: obj => obj.callFunction\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _evaluate_decorators, {\n        kind: \"method\",\n        name: \"evaluate\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"evaluate\" in obj,\n          get: obj => obj.evaluate\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _resolveExecutionContextId_decorators, {\n        kind: \"method\",\n        name: \"resolveExecutionContextId\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"resolveExecutionContextId\" in obj,\n          get: obj => obj.resolveExecutionContextId\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    }\n    #reason = __runInitializers(this, _instanceExtraInitializers);\n    disposables = new disposable_js_1.DisposableStack();\n    id;\n    origin;\n    executionContextId;\n    constructor(id, origin) {\n      super();\n      this.id = id;\n      this.origin = origin;\n    }\n    get disposed() {\n      return this.#reason !== undefined;\n    }\n    get target() {\n      return {\n        realm: this.id\n      };\n    }\n    dispose(reason) {\n      this.#reason = reason;\n      this[disposable_js_1.disposeSymbol]();\n    }\n    async disown(handles) {\n      await this.session.send('script.disown', {\n        target: this.target,\n        handles\n      });\n    }\n    async callFunction(functionDeclaration, awaitPromise, options = {}) {\n      const {\n        result\n      } = await this.session.send('script.callFunction', {\n        functionDeclaration,\n        awaitPromise,\n        target: this.target,\n        ...options\n      });\n      return result;\n    }\n    async evaluate(expression, awaitPromise, options = {}) {\n      const {\n        result\n      } = await this.session.send('script.evaluate', {\n        expression,\n        awaitPromise,\n        target: this.target,\n        ...options\n      });\n      return result;\n    }\n    async resolveExecutionContextId() {\n      if (!this.executionContextId) {\n        const {\n          result\n        } = await this.session.connection.send('cdp.resolveRealm', {\n          realm: this.id\n        });\n        this.executionContextId = result.executionContextId;\n      }\n      return this.executionContextId;\n    }\n    [(_dispose_decorators = [decorators_js_1.inertIfDisposed], _disown_decorators = [(0, decorators_js_1.throwIfDisposed)(realm => {\n      // SAFETY: Disposal implies this exists.\n      return realm.#reason;\n    })], _callFunction_decorators = [(0, decorators_js_1.throwIfDisposed)(realm => {\n      // SAFETY: Disposal implies this exists.\n      return realm.#reason;\n    })], _evaluate_decorators = [(0, decorators_js_1.throwIfDisposed)(realm => {\n      // SAFETY: Disposal implies this exists.\n      return realm.#reason;\n    })], _resolveExecutionContextId_decorators = [(0, decorators_js_1.throwIfDisposed)(realm => {\n      // SAFETY: Disposal implies this exists.\n      return realm.#reason;\n    })], disposable_js_1.disposeSymbol)]() {\n      this.#reason ??= 'Realm already destroyed, probably because all associated browsing contexts closed.';\n      this.emit('destroyed', {\n        reason: this.#reason\n      });\n      this.disposables.dispose();\n      super[disposable_js_1.disposeSymbol]();\n    }\n  };\n})();\nexports.Realm = Realm;\n/**\n * @internal\n */\nclass WindowRealm extends Realm {\n  static from(context, sandbox) {\n    const realm = new WindowRealm(context, sandbox);\n    realm.#initialize();\n    return realm;\n  }\n  browsingContext;\n  sandbox;\n  #workers = new Map();\n  constructor(context, sandbox) {\n    super('', '');\n    this.browsingContext = context;\n    this.sandbox = sandbox;\n  }\n  #initialize() {\n    const browsingContextEmitter = this.disposables.use(new EventEmitter_js_1.EventEmitter(this.browsingContext));\n    browsingContextEmitter.on('closed', ({\n      reason\n    }) => {\n      this.dispose(reason);\n    });\n    const sessionEmitter = this.disposables.use(new EventEmitter_js_1.EventEmitter(this.session));\n    sessionEmitter.on('script.realmCreated', info => {\n      if (info.type !== 'window' || info.context !== this.browsingContext.id || info.sandbox !== this.sandbox) {\n        return;\n      }\n      this.id = info.realm;\n      this.origin = info.origin;\n      this.executionContextId = undefined;\n      this.emit('updated', this);\n    });\n    sessionEmitter.on('script.realmCreated', info => {\n      if (info.type !== 'dedicated-worker') {\n        return;\n      }\n      if (!info.owners.includes(this.id)) {\n        return;\n      }\n      const realm = DedicatedWorkerRealm.from(this, info.realm, info.origin);\n      this.#workers.set(realm.id, realm);\n      const realmEmitter = this.disposables.use(new EventEmitter_js_1.EventEmitter(realm));\n      realmEmitter.once('destroyed', () => {\n        realmEmitter.removeAllListeners();\n        this.#workers.delete(realm.id);\n      });\n      this.emit('worker', realm);\n    });\n  }\n  get session() {\n    return this.browsingContext.userContext.browser.session;\n  }\n  get target() {\n    return {\n      context: this.browsingContext.id,\n      sandbox: this.sandbox\n    };\n  }\n}\nexports.WindowRealm = WindowRealm;\n/**\n * @internal\n */\nclass DedicatedWorkerRealm extends Realm {\n  static from(owner, id, origin) {\n    const realm = new _a(owner, id, origin);\n    realm.#initialize();\n    return realm;\n  }\n  #workers = new Map();\n  owners;\n  constructor(owner, id, origin) {\n    super(id, origin);\n    this.owners = new Set([owner]);\n  }\n  #initialize() {\n    const sessionEmitter = this.disposables.use(new EventEmitter_js_1.EventEmitter(this.session));\n    sessionEmitter.on('script.realmDestroyed', info => {\n      if (info.realm !== this.id) {\n        return;\n      }\n      this.dispose('Realm already destroyed.');\n    });\n    sessionEmitter.on('script.realmCreated', info => {\n      if (info.type !== 'dedicated-worker') {\n        return;\n      }\n      if (!info.owners.includes(this.id)) {\n        return;\n      }\n      const realm = _a.from(this, info.realm, info.origin);\n      this.#workers.set(realm.id, realm);\n      const realmEmitter = this.disposables.use(new EventEmitter_js_1.EventEmitter(realm));\n      realmEmitter.once('destroyed', () => {\n        this.#workers.delete(realm.id);\n      });\n      this.emit('worker', realm);\n    });\n  }\n  get session() {\n    // SAFETY: At least one owner will exist.\n    return this.owners.values().next().value.session;\n  }\n}\nexports.DedicatedWorkerRealm = DedicatedWorkerRealm;\n_a = DedicatedWorkerRealm;\n/**\n * @internal\n */\nclass SharedWorkerRealm extends Realm {\n  static from(browser, id, origin) {\n    const realm = new SharedWorkerRealm(browser, id, origin);\n    realm.#initialize();\n    return realm;\n  }\n  #workers = new Map();\n  browser;\n  constructor(browser, id, origin) {\n    super(id, origin);\n    this.browser = browser;\n  }\n  #initialize() {\n    const sessionEmitter = this.disposables.use(new EventEmitter_js_1.EventEmitter(this.session));\n    sessionEmitter.on('script.realmDestroyed', info => {\n      if (info.realm !== this.id) {\n        return;\n      }\n      this.dispose('Realm already destroyed.');\n    });\n    sessionEmitter.on('script.realmCreated', info => {\n      if (info.type !== 'dedicated-worker') {\n        return;\n      }\n      if (!info.owners.includes(this.id)) {\n        return;\n      }\n      const realm = DedicatedWorkerRealm.from(this, info.realm, info.origin);\n      this.#workers.set(realm.id, realm);\n      const realmEmitter = this.disposables.use(new EventEmitter_js_1.EventEmitter(realm));\n      realmEmitter.once('destroyed', () => {\n        this.#workers.delete(realm.id);\n      });\n      this.emit('worker', realm);\n    });\n  }\n  get session() {\n    return this.browser.session;\n  }\n}\nexports.SharedWorkerRealm = SharedWorkerRealm;","map":{"version":3,"names":["EventEmitter_js_1","require","decorators_js_1","disposable_js_1","Realm","EventEmitter","_classSuper","__esDecorate","_dispose_decorators","kind","name","static","private","access","has","obj","get","dispose","metadata","_metadata","_instanceExtraInitializers","_disown_decorators","disown","_callFunction_decorators","callFunction","_evaluate_decorators","evaluate","_resolveExecutionContextId_decorators","resolveExecutionContextId","reason","__runInitializers","disposables","DisposableStack","id","origin","executionContextId","constructor","disposed","undefined","target","realm","disposeSymbol","handles","session","send","functionDeclaration","awaitPromise","options","result","expression","connection","inertIfDisposed","throwIfDisposed","emit","exports","WindowRealm","from","context","sandbox","initialize","browsingContext","workers","Map","#initialize","browsingContextEmitter","use","on","sessionEmitter","info","type","owners","includes","DedicatedWorkerRealm","set","realmEmitter","once","removeAllListeners","delete","userContext","browser","owner","_a","Set","values","next","value","SharedWorkerRealm"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/bidi/core/Realm.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type * as Bidi from 'chromium-bidi/lib/cjs/protocol/protocol.js';\n\nimport {EventEmitter} from '../../common/EventEmitter.js';\nimport {inertIfDisposed, throwIfDisposed} from '../../util/decorators.js';\nimport {DisposableStack, disposeSymbol} from '../../util/disposable.js';\nimport type {BidiConnection} from '../Connection.js';\n\nimport type {Browser} from './Browser.js';\nimport type {BrowsingContext} from './BrowsingContext.js';\nimport type {Session} from './Session.js';\n\n/**\n * @internal\n */\nexport type CallFunctionOptions = Omit<\n  Bidi.Script.CallFunctionParameters,\n  'functionDeclaration' | 'awaitPromise' | 'target'\n>;\n\n/**\n * @internal\n */\nexport type EvaluateOptions = Omit<\n  Bidi.Script.EvaluateParameters,\n  'expression' | 'awaitPromise' | 'target'\n>;\n\n/**\n * @internal\n */\nexport abstract class Realm extends EventEmitter<{\n  /** Emitted whenever the realm has updated. */\n  updated: Realm;\n  /** Emitted when the realm is destroyed. */\n  destroyed: {reason: string};\n  /** Emitted when a dedicated worker is created in the realm. */\n  worker: DedicatedWorkerRealm;\n  /** Emitted when a shared worker is created in the realm. */\n  sharedworker: SharedWorkerRealm;\n}> {\n  #reason?: string;\n  protected readonly disposables = new DisposableStack();\n  readonly id: string;\n  readonly origin: string;\n  protected executionContextId?: number;\n\n  protected constructor(id: string, origin: string) {\n    super();\n\n    this.id = id;\n    this.origin = origin;\n  }\n\n  get disposed(): boolean {\n    return this.#reason !== undefined;\n  }\n  protected abstract get session(): Session;\n  get target(): Bidi.Script.Target {\n    return {realm: this.id};\n  }\n\n  @inertIfDisposed\n  protected dispose(reason?: string): void {\n    this.#reason = reason;\n    this[disposeSymbol]();\n  }\n\n  @throwIfDisposed<Realm>(realm => {\n    // SAFETY: Disposal implies this exists.\n    return realm.#reason!;\n  })\n  async disown(handles: string[]): Promise<void> {\n    await this.session.send('script.disown', {\n      target: this.target,\n      handles,\n    });\n  }\n\n  @throwIfDisposed<Realm>(realm => {\n    // SAFETY: Disposal implies this exists.\n    return realm.#reason!;\n  })\n  async callFunction(\n    functionDeclaration: string,\n    awaitPromise: boolean,\n    options: CallFunctionOptions = {}\n  ): Promise<Bidi.Script.EvaluateResult> {\n    const {result} = await this.session.send('script.callFunction', {\n      functionDeclaration,\n      awaitPromise,\n      target: this.target,\n      ...options,\n    });\n    return result;\n  }\n\n  @throwIfDisposed<Realm>(realm => {\n    // SAFETY: Disposal implies this exists.\n    return realm.#reason!;\n  })\n  async evaluate(\n    expression: string,\n    awaitPromise: boolean,\n    options: EvaluateOptions = {}\n  ): Promise<Bidi.Script.EvaluateResult> {\n    const {result} = await this.session.send('script.evaluate', {\n      expression,\n      awaitPromise,\n      target: this.target,\n      ...options,\n    });\n    return result;\n  }\n\n  @throwIfDisposed<Realm>(realm => {\n    // SAFETY: Disposal implies this exists.\n    return realm.#reason!;\n  })\n  async resolveExecutionContextId(): Promise<number> {\n    if (!this.executionContextId) {\n      const {result} = await (this.session.connection as BidiConnection).send(\n        'cdp.resolveRealm',\n        {realm: this.id}\n      );\n      this.executionContextId = result.executionContextId;\n    }\n\n    return this.executionContextId;\n  }\n\n  [disposeSymbol](): void {\n    this.#reason ??=\n      'Realm already destroyed, probably because all associated browsing contexts closed.';\n    this.emit('destroyed', {reason: this.#reason});\n\n    this.disposables.dispose();\n    super[disposeSymbol]();\n  }\n}\n\n/**\n * @internal\n */\nexport class WindowRealm extends Realm {\n  static from(context: BrowsingContext, sandbox?: string): WindowRealm {\n    const realm = new WindowRealm(context, sandbox);\n    realm.#initialize();\n    return realm;\n  }\n\n  readonly browsingContext: BrowsingContext;\n  readonly sandbox?: string;\n\n  readonly #workers = new Map<string, DedicatedWorkerRealm>();\n\n  private constructor(context: BrowsingContext, sandbox?: string) {\n    super('', '');\n\n    this.browsingContext = context;\n    this.sandbox = sandbox;\n  }\n\n  #initialize(): void {\n    const browsingContextEmitter = this.disposables.use(\n      new EventEmitter(this.browsingContext)\n    );\n    browsingContextEmitter.on('closed', ({reason}) => {\n      this.dispose(reason);\n    });\n\n    const sessionEmitter = this.disposables.use(new EventEmitter(this.session));\n    sessionEmitter.on('script.realmCreated', info => {\n      if (\n        info.type !== 'window' ||\n        info.context !== this.browsingContext.id ||\n        info.sandbox !== this.sandbox\n      ) {\n        return;\n      }\n      (this as any).id = info.realm;\n      (this as any).origin = info.origin;\n      this.executionContextId = undefined;\n      this.emit('updated', this);\n    });\n    sessionEmitter.on('script.realmCreated', info => {\n      if (info.type !== 'dedicated-worker') {\n        return;\n      }\n      if (!info.owners.includes(this.id)) {\n        return;\n      }\n\n      const realm = DedicatedWorkerRealm.from(this, info.realm, info.origin);\n      this.#workers.set(realm.id, realm);\n\n      const realmEmitter = this.disposables.use(new EventEmitter(realm));\n      realmEmitter.once('destroyed', () => {\n        realmEmitter.removeAllListeners();\n        this.#workers.delete(realm.id);\n      });\n\n      this.emit('worker', realm);\n    });\n  }\n\n  override get session(): Session {\n    return this.browsingContext.userContext.browser.session;\n  }\n\n  override get target(): Bidi.Script.Target {\n    return {context: this.browsingContext.id, sandbox: this.sandbox};\n  }\n}\n\n/**\n * @internal\n */\nexport type DedicatedWorkerOwnerRealm =\n  | DedicatedWorkerRealm\n  | SharedWorkerRealm\n  | WindowRealm;\n\n/**\n * @internal\n */\nexport class DedicatedWorkerRealm extends Realm {\n  static from(\n    owner: DedicatedWorkerOwnerRealm,\n    id: string,\n    origin: string\n  ): DedicatedWorkerRealm {\n    const realm = new DedicatedWorkerRealm(owner, id, origin);\n    realm.#initialize();\n    return realm;\n  }\n\n  readonly #workers = new Map<string, DedicatedWorkerRealm>();\n  readonly owners: Set<DedicatedWorkerOwnerRealm>;\n\n  private constructor(\n    owner: DedicatedWorkerOwnerRealm,\n    id: string,\n    origin: string\n  ) {\n    super(id, origin);\n    this.owners = new Set([owner]);\n  }\n\n  #initialize(): void {\n    const sessionEmitter = this.disposables.use(new EventEmitter(this.session));\n    sessionEmitter.on('script.realmDestroyed', info => {\n      if (info.realm !== this.id) {\n        return;\n      }\n      this.dispose('Realm already destroyed.');\n    });\n    sessionEmitter.on('script.realmCreated', info => {\n      if (info.type !== 'dedicated-worker') {\n        return;\n      }\n      if (!info.owners.includes(this.id)) {\n        return;\n      }\n\n      const realm = DedicatedWorkerRealm.from(this, info.realm, info.origin);\n      this.#workers.set(realm.id, realm);\n\n      const realmEmitter = this.disposables.use(new EventEmitter(realm));\n      realmEmitter.once('destroyed', () => {\n        this.#workers.delete(realm.id);\n      });\n\n      this.emit('worker', realm);\n    });\n  }\n\n  override get session(): Session {\n    // SAFETY: At least one owner will exist.\n    return this.owners.values().next().value.session;\n  }\n}\n\n/**\n * @internal\n */\nexport class SharedWorkerRealm extends Realm {\n  static from(browser: Browser, id: string, origin: string): SharedWorkerRealm {\n    const realm = new SharedWorkerRealm(browser, id, origin);\n    realm.#initialize();\n    return realm;\n  }\n\n  readonly #workers = new Map<string, DedicatedWorkerRealm>();\n  readonly browser: Browser;\n\n  private constructor(browser: Browser, id: string, origin: string) {\n    super(id, origin);\n    this.browser = browser;\n  }\n\n  #initialize(): void {\n    const sessionEmitter = this.disposables.use(new EventEmitter(this.session));\n    sessionEmitter.on('script.realmDestroyed', info => {\n      if (info.realm !== this.id) {\n        return;\n      }\n      this.dispose('Realm already destroyed.');\n    });\n    sessionEmitter.on('script.realmCreated', info => {\n      if (info.type !== 'dedicated-worker') {\n        return;\n      }\n      if (!info.owners.includes(this.id)) {\n        return;\n      }\n\n      const realm = DedicatedWorkerRealm.from(this, info.realm, info.origin);\n      this.#workers.set(realm.id, realm);\n\n      const realmEmitter = this.disposables.use(new EventEmitter(realm));\n      realmEmitter.once('destroyed', () => {\n        this.#workers.delete(realm.id);\n      });\n\n      this.emit('worker', realm);\n    });\n  }\n\n  override get session(): Session {\n    return this.browser.session;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}