{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeUint8Arrays = exports.typedArrayToBase64 = exports.stringToBase64 = exports.stringToTypedArray = void 0;\n/**\n * @internal\n */\nfunction stringToTypedArray(string, base64Encoded = false) {\n  if (base64Encoded) {\n    const binaryString = atob(string);\n    // @ts-expect-error There are non-proper overloads\n    return Uint8Array.from(binaryString, m => {\n      return m.codePointAt(0);\n    });\n  }\n  return new TextEncoder().encode(string);\n}\nexports.stringToTypedArray = stringToTypedArray;\n/**\n * @internal\n */\nfunction stringToBase64(str) {\n  return typedArrayToBase64(new TextEncoder().encode(str));\n}\nexports.stringToBase64 = stringToBase64;\n/**\n * @internal\n */\nfunction typedArrayToBase64(typedArray) {\n  const binaryString = Array.from(typedArray, byte => {\n    return String.fromCodePoint(byte);\n  }).join('');\n  return btoa(binaryString);\n}\nexports.typedArrayToBase64 = typedArrayToBase64;\n/**\n * @internal\n */\nfunction mergeUint8Arrays(items) {\n  let length = 0;\n  for (const item of items) {\n    length += item.length;\n  }\n  // Create a new array with total length and merge all source arrays.\n  const result = new Uint8Array(length);\n  let offset = 0;\n  for (const item of items) {\n    result.set(item, offset);\n    offset += item.length;\n  }\n  return result;\n}\nexports.mergeUint8Arrays = mergeUint8Arrays;","map":{"version":3,"names":["stringToTypedArray","string","base64Encoded","binaryString","atob","Uint8Array","from","m","codePointAt","TextEncoder","encode","exports","stringToBase64","str","typedArrayToBase64","typedArray","Array","byte","String","fromCodePoint","join","btoa","mergeUint8Arrays","items","length","item","result","offset","set"],"sources":["/Users/lawj4/webDevelopment/Todo-List/frontend/node_modules/puppeteer-core/src/util/encoding.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @internal\n */\nexport function stringToTypedArray(\n  string: string,\n  base64Encoded = false\n): Uint8Array {\n  if (base64Encoded) {\n    const binaryString = atob(string);\n    // @ts-expect-error There are non-proper overloads\n    return Uint8Array.from(binaryString, m => {\n      return m.codePointAt(0);\n    });\n  }\n  return new TextEncoder().encode(string);\n}\n\n/**\n * @internal\n */\nexport function stringToBase64(str: string): string {\n  return typedArrayToBase64(new TextEncoder().encode(str));\n}\n\n/**\n * @internal\n */\nexport function typedArrayToBase64(typedArray: Uint8Array): string {\n  const binaryString = Array.from(typedArray, byte => {\n    return String.fromCodePoint(byte);\n  }).join('');\n  return btoa(binaryString);\n}\n\n/**\n * @internal\n */\nexport function mergeUint8Arrays(items: Uint8Array[]): Uint8Array {\n  let length = 0;\n  for (const item of items) {\n    length += item.length;\n  }\n\n  // Create a new array with total length and merge all source arrays.\n  const result = new Uint8Array(length);\n  let offset = 0;\n  for (const item of items) {\n    result.set(item, offset);\n    offset += item.length;\n  }\n\n  return result;\n}\n"],"mappings":";;AAAA;;;;;;;;;AAMA;;;AAGA,SAAgBA,kBAAkBA,CAChCC,MAAc,EACdC,aAAa,GAAG,KAAK;EAErB,IAAIA,aAAa,EAAE;IACjB,MAAMC,YAAY,GAAGC,IAAI,CAACH,MAAM,CAAC;IACjC;IACA,OAAOI,UAAU,CAACC,IAAI,CAACH,YAAY,EAAEI,CAAC,IAAG;MACvC,OAAOA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC;EACJ;EACA,OAAO,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACT,MAAM,CAAC;AACzC;AAZAU,OAAA,CAAAX,kBAAA,GAAAA,kBAAA;AAcA;;;AAGA,SAAgBY,cAAcA,CAACC,GAAW;EACxC,OAAOC,kBAAkB,CAAC,IAAIL,WAAW,EAAE,CAACC,MAAM,CAACG,GAAG,CAAC,CAAC;AAC1D;AAFAF,OAAA,CAAAC,cAAA,GAAAA,cAAA;AAIA;;;AAGA,SAAgBE,kBAAkBA,CAACC,UAAsB;EACvD,MAAMZ,YAAY,GAAGa,KAAK,CAACV,IAAI,CAACS,UAAU,EAAEE,IAAI,IAAG;IACjD,OAAOC,MAAM,CAACC,aAAa,CAACF,IAAI,CAAC;EACnC,CAAC,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC;EACX,OAAOC,IAAI,CAAClB,YAAY,CAAC;AAC3B;AALAQ,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AAOA;;;AAGA,SAAgBQ,gBAAgBA,CAACC,KAAmB;EAClD,IAAIC,MAAM,GAAG,CAAC;EACd,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACxBC,MAAM,IAAIC,IAAI,CAACD,MAAM;EACvB;EAEA;EACA,MAAME,MAAM,GAAG,IAAIrB,UAAU,CAACmB,MAAM,CAAC;EACrC,IAAIG,MAAM,GAAG,CAAC;EACd,KAAK,MAAMF,IAAI,IAAIF,KAAK,EAAE;IACxBG,MAAM,CAACE,GAAG,CAACH,IAAI,EAAEE,MAAM,CAAC;IACxBA,MAAM,IAAIF,IAAI,CAACD,MAAM;EACvB;EAEA,OAAOE,MAAM;AACf;AAfAf,OAAA,CAAAW,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}