{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProcessingQueue = void 0;\nconst log_js_1 = require(\"./log.js\");\nclass ProcessingQueue {\n  static LOGGER_PREFIX = `${log_js_1.LogType.debug}:queue`;\n  #logger;\n  #processor;\n  #queue = [];\n  // Flag to keep only 1 active processor.\n  #isProcessing = false;\n  constructor(processor, logger) {\n    this.#processor = processor;\n    this.#logger = logger;\n  }\n  add(entry, name) {\n    this.#queue.push([entry, name]);\n    // No need in waiting. Just initialize processor if needed.\n    void this.#processIfNeeded();\n  }\n  async #processIfNeeded() {\n    if (this.#isProcessing) {\n      return;\n    }\n    this.#isProcessing = true;\n    while (this.#queue.length > 0) {\n      const arrayEntry = this.#queue.shift();\n      if (!arrayEntry) {\n        continue;\n      }\n      const [entryPromise, name] = arrayEntry;\n      this.#logger?.(ProcessingQueue.LOGGER_PREFIX, 'Processing event:', name);\n      await entryPromise.then(entry => {\n        if (entry.kind === 'error') {\n          this.#logger?.(log_js_1.LogType.debugError, 'Event threw before sending:', entry.error.message, entry.error.stack);\n          return;\n        }\n        return this.#processor(entry.value);\n      }).catch(error => {\n        this.#logger?.(log_js_1.LogType.debugError, 'Event was not processed:', error?.message);\n      });\n    }\n    this.#isProcessing = false;\n  }\n}\nexports.ProcessingQueue = ProcessingQueue;","map":{"version":3,"names":["log_js_1","require","ProcessingQueue","LOGGER_PREFIX","LogType","debug","logger","processor","queue","isProcessing","constructor","add","entry","name","push","processIfNeeded","#processIfNeeded","length","arrayEntry","shift","entryPromise","then","kind","debugError","error","message","stack","value","catch","exports"],"sources":["../../../src/utils/ProcessingQueue.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAaC,eAAe;EAC1B,OAAgBC,aAAa,GAAG,GAAGH,QAAA,CAAAI,OAAO,CAACC,KAAK,QAAiB;EAExD,CAAAC,MAAO;EACP,CAAAC,SAAU;EACV,CAAAC,KAAM,GAAmC,EAAE;EAEpD;EACA,CAAAC,YAAa,GAAG,KAAK;EAErBC,YAAYH,SAAoC,EAAED,MAAiB;IACjE,IAAI,CAAC,CAAAC,SAAU,GAAGA,SAAS;IAC3B,IAAI,CAAC,CAAAD,MAAO,GAAGA,MAAM;EACvB;EAEAK,GAAGA,CAACC,KAAyB,EAAEC,IAAY;IACzC,IAAI,CAAC,CAAAL,KAAM,CAACM,IAAI,CAAC,CAACF,KAAK,EAAEC,IAAI,CAAC,CAAC;IAC/B;IACA,KAAK,IAAI,CAAC,CAAAE,eAAgB,EAAE;EAC9B;EAEA,MAAM,CAAAA,eAAgBC,CAAA;IACpB,IAAI,IAAI,CAAC,CAAAP,YAAa,EAAE;MACtB;IACF;IACA,IAAI,CAAC,CAAAA,YAAa,GAAG,IAAI;IACzB,OAAO,IAAI,CAAC,CAAAD,KAAM,CAACS,MAAM,GAAG,CAAC,EAAE;MAC7B,MAAMC,UAAU,GAAG,IAAI,CAAC,CAAAV,KAAM,CAACW,KAAK,EAAE;MACtC,IAAI,CAACD,UAAU,EAAE;QACf;MACF;MACA,MAAM,CAACE,YAAY,EAAEP,IAAI,CAAC,GAAGK,UAAU;MACvC,IAAI,CAAC,CAAAZ,MAAO,GAAGJ,eAAe,CAACC,aAAa,EAAE,mBAAmB,EAAEU,IAAI,CAAC;MAExE,MAAMO,YAAY,CACfC,IAAI,CAAET,KAAK,IAAI;QACd,IAAIA,KAAK,CAACU,IAAI,KAAK,OAAO,EAAE;UAC1B,IAAI,CAAC,CAAAhB,MAAO,GACVN,QAAA,CAAAI,OAAO,CAACmB,UAAU,EAClB,6BAA6B,EAC7BX,KAAK,CAACY,KAAK,CAACC,OAAO,EACnBb,KAAK,CAACY,KAAK,CAACE,KAAK,CAClB;UACD;QACF;QACA,OAAO,IAAI,CAAC,CAAAnB,SAAU,CAACK,KAAK,CAACe,KAAK,CAAC;MACrC,CAAC,CAAC,CACDC,KAAK,CAAEJ,KAAK,IAAI;QACf,IAAI,CAAC,CAAAlB,MAAO,GACVN,QAAA,CAAAI,OAAO,CAACmB,UAAU,EAClB,0BAA0B,EAC1BC,KAAK,EAAEC,OAAO,CACf;MACH,CAAC,CAAC;IACN;IAEA,IAAI,CAAC,CAAAhB,YAAa,GAAG,KAAK;EAC5B;;AAzDFoB,OAAA,CAAA3B,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}